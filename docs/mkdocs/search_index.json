{
    "docs": [
        {
            "location": "/home/", 
            "text": "What is OpenVidu?\n\n\n\n\n\n\nOpenVidu is a platform to facilitate the addition of video calls in your web or mobile \napplication, either group or one-to-one calls. In fact, any combination you come up with is easy to implement with OpenVidu.\n\n\nOpenVidu is licensed under \nApache License v2\n.\n\n\n\n\nWhat can I do with OpenVidu?\n\n\nYou can add video-call functionalities to your app, among many other things. The process is really simple: OpenVidu offers all the necessary services and tools. You just need to integrate them in your app to start enjoying its benefits: \n\n\n\n\nOne-to-One, One-to-Many, Many-to-Many calls\n\n\nDecide which user can publish and which can't with predefined roles\n\n\nSend audio + video, audio-only or video-only streams\n\n\nBroadcast text messages\n\n\nMute any track whenever you want\n\n\nShare your screen\n\n\nRecord your videocalls\n\n\n\n\n\nSo, what about adding a video-call center for attending your customers face to face? Or maybe you are developing an application to hold meetings via videoconference. Or you are thinking about teachers streaming to all their students within online lessons, or doctors communicating with their patients with a human touch. The possibilities are endless.\n\n\nYou can check our \nDemos\n to get an idea of what you can do with OpenVidu. Here are some cool pictures of them:\n\n\n\n    \n\n    \n\n    \n\n    \n\n\n\n\n\n\n\nOpenVidu Architecture\n\n\n\n  \n\n\n\n\n\nOpenVidu is divided into two parts:\n\n\n\n\nOpenVidu Browser\n: it is a library to use in your client side (available for JavaScript and TypeScript). It allows you to create video-calls, join users to them, send and receive video and audio, etc... All the actions available with OpenVidu are managed via OpenVidu Browser.\n\n\nOpenVidu Server\n: it is an application that handles the server-side stuff. It receives the operations from OpenVidu Browser and do whatever is necessary to establish and manage your video-calls. You will never have to explicitly use it: just to run it and know its IP address.\n\n\n\n\n\n\nGet started\n\n\nThese are the recommended steps for getting started with OpenVidu:\n\n\n\n\n\n\nThe best way to get your first app working in a few minutes is following our \nOpenVidu Hello Word Tutorial\n.\n\n\n\n\n\n\nAfter that, you can try any of our \nClient-Side-Only\n tutorials, or maybe go straight to step 3 if you think that you already handle OpenVidu reasonably well.\n\n\n\n\n\n\nTry now any of our \nClient-Side + Server-Side\n tutorials, where you can see how a complete web application works with OpenVidu. Choose your preferred framework, since all 4 applications are exactly the same regarding their look and functionality.\n\n\n\n\n\n\nFinally you can \ndeploy your first app\n and see it working in the real world. You can follow our tutorial, where you can deploy our Demos in your own Amazon machine in a few minutes (\nDeploying OpenVidu Demos on AWS\n). Then you can deploy your own app following these steps (\nDeploying OpenVidu Server and your app on AWS\n).\n\n\n\n\n\n\n\n\nHow does OpenVidu work?\n\n\nWebRTC\n is the ultimate responsible for all media transmission at the very heart of OpenVidu. WebRTC is a modern, cross-platform framework that democratizes media transmission over the Internet. It is promoted by Google, Mozilla, Opera and others.\n\n\nKurento\n is the WebRTC framework on which OpenVidu is built. Openvidu was forked from \nKurentoRoom project\n.\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n\n  \n\n\n\n\n\nWhat are the differences between Kurento and OpenVidu?\n\n\nOpenVidu wraps and hides all the low-level operations. The main goal we pursue is to provide a simple, effective, easy-to-use API so you can forget about WebRTC, ICE candidates and media server tricky stuff. We internally use Kurento to generate, connect, modify and destroy media-pipelines, but OpenVidu simplifies as far as possible the process, focusing on the use-case of video-call sessions (one-to-one, one-to-many, many-to-many, users with different roles).\n\n\nUltimately, developers can create video-calls with just a few lines of code, all from their client-side\n.\n\n\n\n\nAcknowledgments\n\n\nOpenVidu has been supported under Project LERNIM (RTC-2016-4674-7), co-funded by the \nMinistry of Economy, Finance and Competitiveness\n of Spain, as well as by the \nEuropean Regional Development Fund\n, whose main goal is to promote technological development, innovation and high-quality research.\n\n\n\n  \n\n  \n\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery-wellcome\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });\n\n\n\n\n\n\n\n\n\n\n    $('.docs-gallery').slick({\n      autoplay: true,\n      autoplaySpeed: 4000,\n      dots: true,\n      infinite: true,\n      pauseOnHover: false,\n      pauseOnFocus: false,\n      responsive: [\n      {\n        breakpoint: 768,\n        settings: {\n          arrows: false,\n          slidesToShow: 1\n        }\n      },\n    ]\n    });", 
            "title": "What is OpenVidu?"
        }, 
        {
            "location": "/home/#what-can-i-do-with-openvidu", 
            "text": "You can add video-call functionalities to your app, among many other things. The process is really simple: OpenVidu offers all the necessary services and tools. You just need to integrate them in your app to start enjoying its benefits:    One-to-One, One-to-Many, Many-to-Many calls  Decide which user can publish and which can't with predefined roles  Send audio + video, audio-only or video-only streams  Broadcast text messages  Mute any track whenever you want  Share your screen  Record your videocalls   \nSo, what about adding a video-call center for attending your customers face to face? Or maybe you are developing an application to hold meetings via videoconference. Or you are thinking about teachers streaming to all their students within online lessons, or doctors communicating with their patients with a human touch. The possibilities are endless.  You can check our  Demos  to get an idea of what you can do with OpenVidu. Here are some cool pictures of them:", 
            "title": "What can I do with OpenVidu?"
        }, 
        {
            "location": "/home/#openvidu-architecture", 
            "text": "OpenVidu is divided into two parts:   OpenVidu Browser : it is a library to use in your client side (available for JavaScript and TypeScript). It allows you to create video-calls, join users to them, send and receive video and audio, etc... All the actions available with OpenVidu are managed via OpenVidu Browser.  OpenVidu Server : it is an application that handles the server-side stuff. It receives the operations from OpenVidu Browser and do whatever is necessary to establish and manage your video-calls. You will never have to explicitly use it: just to run it and know its IP address.", 
            "title": "OpenVidu Architecture"
        }, 
        {
            "location": "/home/#get-started", 
            "text": "These are the recommended steps for getting started with OpenVidu:    The best way to get your first app working in a few minutes is following our  OpenVidu Hello Word Tutorial .    After that, you can try any of our  Client-Side-Only  tutorials, or maybe go straight to step 3 if you think that you already handle OpenVidu reasonably well.    Try now any of our  Client-Side + Server-Side  tutorials, where you can see how a complete web application works with OpenVidu. Choose your preferred framework, since all 4 applications are exactly the same regarding their look and functionality.    Finally you can  deploy your first app  and see it working in the real world. You can follow our tutorial, where you can deploy our Demos in your own Amazon machine in a few minutes ( Deploying OpenVidu Demos on AWS ). Then you can deploy your own app following these steps ( Deploying OpenVidu Server and your app on AWS ).", 
            "title": "Get started"
        }, 
        {
            "location": "/home/#how-does-openvidu-work", 
            "text": "WebRTC  is the ultimate responsible for all media transmission at the very heart of OpenVidu. WebRTC is a modern, cross-platform framework that democratizes media transmission over the Internet. It is promoted by Google, Mozilla, Opera and others.  Kurento  is the WebRTC framework on which OpenVidu is built. Openvidu was forked from  KurentoRoom project .  \n   \n     \n   \n   \n     \n     What are the differences between Kurento and OpenVidu?  OpenVidu wraps and hides all the low-level operations. The main goal we pursue is to provide a simple, effective, easy-to-use API so you can forget about WebRTC, ICE candidates and media server tricky stuff. We internally use Kurento to generate, connect, modify and destroy media-pipelines, but OpenVidu simplifies as far as possible the process, focusing on the use-case of video-call sessions (one-to-one, one-to-many, many-to-many, users with different roles).  Ultimately, developers can create video-calls with just a few lines of code, all from their client-side .", 
            "title": "How does OpenVidu work?"
        }, 
        {
            "location": "/home/#acknowledgments", 
            "text": "OpenVidu has been supported under Project LERNIM (RTC-2016-4674-7), co-funded by the  Ministry of Economy, Finance and Competitiveness  of Spain, as well as by the  European Regional Development Fund , whose main goal is to promote technological development, innovation and high-quality research.  \n   \n       \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery-wellcome\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });     \n    $('.docs-gallery').slick({\n      autoplay: true,\n      autoplaySpeed: 4000,\n      dots: true,\n      infinite: true,\n      pauseOnHover: false,\n      pauseOnFocus: false,\n      responsive: [\n      {\n        breakpoint: 768,\n        settings: {\n          arrows: false,\n          slidesToShow: 1\n        }\n      },\n    ]\n    });", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/tutorials/", 
            "text": "OpenVidu Tutorials\n\n\n\n\n\n\n\n\n\n\n    \n\n\n        \n\n            \nHello World\n\n            \nMake your first video-call with just a few lines of code\n\n        \n\n\n        \n\n            \n\n            \n\n                \n\n                    \n\n                        \nHello World!\n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n            \n\n            \n\n        \n\n\n        \n\n\n        \n\n            \nClient Side only \n\n            \nGet quickly started without worrying about a server-side\n\n        \n\n\n        \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nJavaScript\n\n                    \nVanilla JavaScript app: good old JS code for a traditional approach.\n\n                \n\n            \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nAngular\n\n                    \nTry this fantastic tutorial using the last version of Angular framework.\n\n                \n\n            \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \nComing soon...\n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nIonic\n\n                    \nThis Ionic app will get you going in the blink of an eye\n\n                \n\n            \n\n\n        \n\n        \n\n\n        \n\n            \n\n            \n\n                \n\n                    \n\n                        \n\n                    \n\n                    \n\n                        \nOpenVidu\n is present on both client-side and server-side, but the \napplication\n is only present on client-side.\n\n                        \nSince these are client-side-only applications, you will be dealing only with \nfrontend technologies\n: HTML, CSS, Javascript / Typescript ...\n\n                        \nThe main difference compared to Client Side + Server Side tutorials is that here you don't have real control over your users: your\n                            \nvideo-calls won't be secure\n beacuse you cannot identify them and cannot determine if allow or deny their access.\n\n                    \n\n                \n\n            \n\n        \n\n\n        \n\n\n        \n\n            \nClient Side + Server Side \n\n            \nTry any of our ready-for-production web apps to see OpenVidu in action with a real example\n\n        \n\n\n        \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nJavaScript + Java SPA\n\n                    \nVanilla JavasCript frontend and a SPA Java Backend: forget building HTML templates, just feed your\n                        front with HTTP requests\n\n                \n\n            \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nJavaScript + Java MVC\n\n                    \nVanilla JavasCript frontend and a traditional Java MVC Backend: serve HTML pages from your server\n\n                \n\n            \n\n\n        \n\n        \n\n\n        \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nJavaScript + Node SPA\n\n                    \nVanilla JavasCript frontend and a SPA Node Backend: forget building HTML templates, just feed your\n                        front with HTTP requests\n\n                \n\n            \n\n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                            \n\n                                \n\n                            \n\n                            \nx\n\n                        \n\n                    \n\n                \n\n                \n\n                    \nJavaScript + Node MVC\n\n                    \nVanilla JavasCript frontend and a traditional Node MVC backend: serve HTML pages from your server\n\n                \n\n            \n\n\n        \n\n\n        \n\n            \n\n            \n\n                \n\n                    \n\n                        \n\n                    \n\n                    \n\n                        \nOpenVidu\n and the \napplication\n are present on both client-side and server-side.\n\n                        \nSince these are full web applications, you will be dealing with \nfrontend technologies\n (HTML, CSS, Javascript / Typescript ...) \n                            but also with \nbackend technologies\n (Java / Node)\n\n                        \nThe main difference compared to Client Side Only tutorials is that here you have total control over your users: your \n                            \nvideo-calls are secure\n beacuse you can identify them and allow or deny their access.", 
            "title": "Intro"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/", 
            "text": "openvidu-hello-world\n\n\n Check it on GitHub\n\n\nThis is the simplest demo you can try to get started with OpenVidu. It has the minimum set of features to make a group video-call. You will only need a few minutes to get your first application working!\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need an http web server installed in your development computer to execute the tutorial. If you have \nnode.js\n installed, you can use \nhttp-server\n to serve application files. It can be installed with:\n\n\nnpm install -g http-server\n\n\n\n\n3) Run the tutorial:\n\n\nhttp-server openvidu-tutorials/openvidu-hello-world/web\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nlocalhost:8080\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\nUnderstanding the code\n\n\nThis application is very simple. It has only 4 files:\n\n\n\n\nopenvidu-browser-VERSION.js\n: openvidu-browser library. You don't have to manipulate this file. \n\n\napp.js\n: sample application main JavaScritp file, which makes use of \nopenvidu-browser-VERSION.js\n.\n\n\nstyle.css\n: some CSS classes to style \nindex.html\n.\n\n\nindex.html\n: HTML code for the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files: \n\n\n\n\n\n  \nscript src=\"openvidu-browser-VERSION.js\"\n/script\n\n\nscript src=\"app.js\"\n/script\n\n\n\n\n\nLet's see how \napp.js\n uses \nopenvidu-browser-VERSION.js\n:\n\n\n\n\nFirst lines declare the variables that will be needed in different points along the code\n\n\nvar OV;\nvar session;\n\n\n\n\nOV\n will be our OpenVidu object (entrypoint to the libray). \nsession\n will be the video-call we will connect to. As first sentence in the \njoinSession()\n method, we initialize the variable that will identify our video-call retrieving the value from the HTML input.\n\n\nvar mySessionId = document.getElementById(\nsessionId\n).value;\n\n\n\n\n\n\nInitialize a new session and its events\n\n\nOV = new OpenVidu();\nsession = OV.initSession();\n\nsession.on('streamCreated', function (event) {\n  session.subscribe(event.stream, 'subscriber');\n});\n\n\n\n\nAs you can see in the code, the process is very simple: get an OpenVidu object and initialize a Session object with it.\n\n\nThen you can subscribe to all the events you want for your session. In this case we just want to subscribe to every stream that is being created in the session: on \nstreamCreated\n we subscribe to the specific stream, available at \nevent.stream\n property.\n\n\n\n\nYou can take a look at all the events in the \nReference Documentation\n\n\n\n\n\n\nGet a \ntoken\n from OpenVidu Server\n\n\n\n    \n\n\n\n    \nWARNING\n: This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session. \nThis process should entirely take place in our server-side\n, not in our client-side. But due to the lack of an application backend in this tutorial, the JavaScript code itself will perform the POST operations to OpenVidu Server\n\n\n\n\n\n\ngetToken(mySessionId).then(token =\n {\n    // See next point to see how to connect to the session using 'token'\n});\n\n\n\n\nNow we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the \nAPI REST\n, \nOpenVidu Java Client\n or \nOpenVidu Node Client\n. Here we have implemented the POST requests to OpenVidu Server in a mehtod \ngetToken()\n that returns a Promise with the token. Without going into too much detail, this method performs two \najax\n requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:\n\n\n\n\nFirst ajax request performs a POST to \n/api/sessions\n (we send a \ncustomSessionId\n field to name the session with our \nmySessionId\n value retrieved from HTML input)\n\n\nSecond ajax request performas a POST to \n/api/tokens\n (we send a \nsessionId\n field to assign the token to this same session)\n\n\n\n\nYou can inspect this method in detail in the \nGitHub repo\n.\n\n\n\n\nConnect to the session using the token\n\n\ngetToken(mySessionId).then(token =\n {\n\n  session.connect(token)\n    .then(() =\n {\n      document.getElementById(\nsession-header\n).innerText = mySessionId;\n      document.getElementById(\njoin\n).style.display = \nnone\n;\n      document.getElementById(\nsession\n).style.display = \nblock\n;\n\n      var publisher = OV.initPublisher(\npublisher\n);\n      session.publish(publisher);\n    })\n    .catch(error =\n {\n      console.log(\nThere was an error connecting to the session:\n, error.code, error.message);\n    });\n});\n\n\n\n\nWe simply need to call \nsession.connect\n passing the recently retrieved token from OpenVidu Server. This method returns a Promise to which you can subscribe to.\n\n\nIn case of success we first set the view to the active video session. Then we proceed to publish our webcam. To do so we just get a \npublisher\n using \nOpenVidu.initPublisher\n method, and a new HTML video showing our webcam will be appended to the page inside element with id \n\"publisher\"\n.\n\n\nLast but not least, we publish this \npublisher\n object thanks to \nsession.publish\n. At this point the rest of users connected to this session will trigger their own \nstreamCreated\n event and can start watching our webcam.\n\n\n\n\nLeaving the session:\n\n\nsession.disconnect();\n\n\n\n\nWhenever we want a user to leave the session, we just need to call \nsession.disconnect\n method. Here it will be called inside \nleaveSession\n function, triggered when the user clicks on \"LEAVE\" button. This function also returns the page to the \"Join session\" view.", 
            "title": "openvidu-hello-world"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#openvidu-hello-world", 
            "text": "Check it on GitHub  This is the simplest demo you can try to get started with OpenVidu. It has the minimum set of features to make a group video-call. You will only need a few minutes to get your first application working!", 
            "title": "openvidu-hello-world"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need an http web server installed in your development computer to execute the tutorial. If you have  node.js  installed, you can use  http-server  to serve application files. It can be installed with:  npm install -g http-server  3) Run the tutorial:  http-server openvidu-tutorials/openvidu-hello-world/web  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  localhost:8080  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#understanding-the-code", 
            "text": "This application is very simple. It has only 4 files:   openvidu-browser-VERSION.js : openvidu-browser library. You don't have to manipulate this file.   app.js : sample application main JavaScritp file, which makes use of  openvidu-browser-VERSION.js .  style.css : some CSS classes to style  index.html .  index.html : HTML code for the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files:    \n   script src=\"openvidu-browser-VERSION.js\" /script  script src=\"app.js\" /script   Let's see how  app.js  uses  openvidu-browser-VERSION.js :", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#first-lines-declare-the-variables-that-will-be-needed-in-different-points-along-the-code", 
            "text": "var OV;\nvar session;  OV  will be our OpenVidu object (entrypoint to the libray).  session  will be the video-call we will connect to. As first sentence in the  joinSession()  method, we initialize the variable that will identify our video-call retrieving the value from the HTML input.  var mySessionId = document.getElementById( sessionId ).value;", 
            "title": "First lines declare the variables that will be needed in different points along the code"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#initialize-a-new-session-and-its-events", 
            "text": "OV = new OpenVidu();\nsession = OV.initSession();\n\nsession.on('streamCreated', function (event) {\n  session.subscribe(event.stream, 'subscriber');\n});  As you can see in the code, the process is very simple: get an OpenVidu object and initialize a Session object with it.  Then you can subscribe to all the events you want for your session. In this case we just want to subscribe to every stream that is being created in the session: on  streamCreated  we subscribe to the specific stream, available at  event.stream  property.   You can take a look at all the events in the  Reference Documentation", 
            "title": "Initialize a new session and its events"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#get-a-token-from-openvidu-server", 
            "text": "WARNING : This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session.  This process should entirely take place in our server-side , not in our client-side. But due to the lack of an application backend in this tutorial, the JavaScript code itself will perform the POST operations to OpenVidu Server   getToken(mySessionId).then(token =  {\n    // See next point to see how to connect to the session using 'token'\n});  Now we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the  API REST ,  OpenVidu Java Client  or  OpenVidu Node Client . Here we have implemented the POST requests to OpenVidu Server in a mehtod  getToken()  that returns a Promise with the token. Without going into too much detail, this method performs two  ajax  requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:   First ajax request performs a POST to  /api/sessions  (we send a  customSessionId  field to name the session with our  mySessionId  value retrieved from HTML input)  Second ajax request performas a POST to  /api/tokens  (we send a  sessionId  field to assign the token to this same session)   You can inspect this method in detail in the  GitHub repo .", 
            "title": "Get a token from OpenVidu Server"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#connect-to-the-session-using-the-token", 
            "text": "getToken(mySessionId).then(token =  {\n\n  session.connect(token)\n    .then(() =  {\n      document.getElementById( session-header ).innerText = mySessionId;\n      document.getElementById( join ).style.display =  none ;\n      document.getElementById( session ).style.display =  block ;\n\n      var publisher = OV.initPublisher( publisher );\n      session.publish(publisher);\n    })\n    .catch(error =  {\n      console.log( There was an error connecting to the session: , error.code, error.message);\n    });\n});  We simply need to call  session.connect  passing the recently retrieved token from OpenVidu Server. This method returns a Promise to which you can subscribe to.  In case of success we first set the view to the active video session. Then we proceed to publish our webcam. To do so we just get a  publisher  using  OpenVidu.initPublisher  method, and a new HTML video showing our webcam will be appended to the page inside element with id  \"publisher\" .  Last but not least, we publish this  publisher  object thanks to  session.publish . At this point the rest of users connected to this session will trigger their own  streamCreated  event and can start watching our webcam.", 
            "title": "Connect to the session using the token"
        }, 
        {
            "location": "/tutorials/openvidu-hello-world/#leaving-the-session", 
            "text": "session.disconnect();  Whenever we want a user to leave the session, we just need to call  session.disconnect  method. Here it will be called inside  leaveSession  function, triggered when the user clicks on \"LEAVE\" button. This function also returns the page to the \"Join session\" view.", 
            "title": "Leaving the session:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/", 
            "text": "openvidu-insecure-js\n\n\n Check it on GitHub\n\n\nA client-side only application built with JavaScript, HTML and CSS.\n\n\nIf it is the first time you use OpenVidu, it is higly recommended to start with \nopenvidu-hello-world\n tutorial, as this app is no more than an extension of it with some new features and sytles.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the three modules displayed on the image above in its insecure version.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-server\n: Java application that controls Kurento Media Server\n\n\nKurento Media Server\n: server that handles low level operations of media flows transmission\n\n\n\n\n\n    \n\n\n\n    Tutorial's name includes \"insecure\" word because this application has no backend and therefore it has no control over the users. Typically you don't want such application in production environments. When you feel comfortable with the client-side of OpenVidu, add your own server or follow one of our super simple secure tutorials.\n\n\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need an http web server installed in your development computer to execute the sample application. If you have \nnode.js\n installed, you can use \nhttp-server\n to serve application files. It can be installed with:\n\n\nnpm install -g http-server\n\n\n\n\n3) Run the tutorial:\n\n\nhttp-server openvidu-tutorials/openvidu-insecure-js/web\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nlocalhost:8080\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n        \n\n    \n\n    \n\n    \n\n        \n\n        \n\n    \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis application is very simple. It has only 4 files:\n\n\n\n\nopenvidu-browser-VERSION.js\n: openvidu-browser library. You don't have to manipulate this file. \n\n\napp.js\n: sample application main JavaScritp file, which makes use of \nopenvidu-browser-VERSION.js\n. You can manipulate this file to suit your needs.\n\n\nstyle.css\n: some CSS classes to style \nindex.html\n. You can manipulate this file to suit your needs.\n\n\nindex.html\n: HTML code for the form to connect to a video-call and for the video-call itself. You can manipulate this file to suit your needs. It has two links to both JavaScript files: \n\n\n\n\n\n    \nscript src=\"openvidu-browser-VERSION.js\"\n/script\n\n\nscript src=\"app.js\"\n/script\n\n\n\n\n\nLet's see how \napp.js\n uses \nopenvidu-browser-VERSION.js\n:\n\n\n\n\nFirst lines declare the variables that will be needed in different points along the code\n\n\nvar OV;\nvar session;\n\n\n\n\nOV\n will be our OpenVidu object (entrypoint to the libray). \nsession\n will be the video-call we will connect to. As first sentences in the join method, we initialize the two parameters whose value is retrieved from the HTML inputs.\n\n\nvar mySessionId = document.getElementById(\nsessionId\n).value;   // Session the user will join\nvar myUserName = document.getElementById(\nuserName\n).value;     // Nickname of the user in the session\n\n\n\n\n\n\nLet's initialize a new session and configure our events:\n\n\n// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n\n\n\nAs you can see in the code, the process is very simple: get an OpenVidu object and initialize a Session object with it.\n\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', event =\n {\n\n    // Subscribe to the Stream to receive it. HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', event =\n {\n\n        // Add a new \np\n element for the user's nickname just below its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', event =\n {\n\n    // Delete the HTML element with the user's nickname. HTML videos are automatically removed from DOM\n    removeUserData(event.stream.connection);\n});\n\n\n\n\nHere we subscribe to the events that interest us. In this case, we want to receive all videos published to the session, as well as displaying every user's nickname next to its video. To achieve this:\n\n\n\n\n\n\nstreamCreated\n: for each new Stream received by OpenVidu, we immediately subscribe to it so we can see its video. A new HTML video element will be appended to element with id 'video-container'.\n\n\n\n\n\n\nvideoElementCreated\n: event triggered by Subscriber object (returned by the previous \nSession.subscribe\n method). This allows us to add the participant nickname to the new video previously added in \nstreamCreated\n event. Auxiliary method \nappendUserData\n is responsible for appending a new paragraph element just below the \nevent.element\n video, containing \nsubscriber.stream.connection.data\n field. In this case, this field contains the user's nickName. You can see how to feed this property from the client in a later step.\n\n\n\n\n\n\nstreamDestroyed\n: for each Stream that has been destroyed (which means a user has left the video-call), we remove the element with the user's nickname that we added in the previous event with the auxiliary method \nremoveUserData\n (\nappendUserData\n method created the element with an \nid\n containing \nevent.stream.connection.connectionId\n unique value, so we can now identify the right element to be removed). OpenVidu automatically deletes the proper video element by default, so we don't need to do anything else.\n\n\n\n\n\n\n\n\nCheck \nApplication specific methods\n section to see all the auxiliary methods used in this app\n\n\n\n\n\n\nGet a \ntoken\n from OpenVidu Server\n\n\n\n    \n\n\n\n    \nWARNING\n: This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session. \nThis process should entirely take place in our server-side\n, not in our client-side. But due to the lack of an application backend in this tutorial, the JavaScript code itself will perform the POST operations to OpenVidu Server\n\n\n\n\n\n\n// --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\ngetToken(mySessionId).then(token =\n {\n    // See next point to see how to connect to the session using 'token'\n});\n\n\n\n\nNow we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the \nAPI REST\n, \nOpenVidu Java Client\n or \nOpenVidu Node Client\n. Here we have implemented the POST requests to OpenVidu Server in a mehtod \ngetToken()\n that returns a Promise with the token. Without going into too much detail, this method performs two \najax\n requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:\n\n\n\n\nFirst ajax request performs a POST to \n/api/sessions\n (we send a \ncustomSessionId\n field to name the session with our \nmySessionId\n value retrieved from HTML input)\n\n\nSecond ajax request performas a POST to \n/api/tokens\n (we send a \nsessionId\n field to assign the token to this same session)\n\n\n\n\nYou can inspect this method in detail in the \nGitHub repo\n.\n\n\n\n\nFinally connect to the session using the token and publish your webcam:\n\n\n// --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\ngetToken(mySessionId).then(token =\n {\n\n    // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n    session.connect(token, { clientData: myUserName })\n        .then(() =\n {\n\n            // --- 5) Set page layout for active call ---\n\n            document.getElementById('session-title').innerText = mySessionId;\n            document.getElementById('join').style.display = 'none';\n            document.getElementById('session').style.display = 'block';\n\n            // --- 6) Get your own camera stream with the desired properties ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', function (event) {\n                initMainVideo(event.element, myUserName);\n                appendUserData(event.element, myUserName);\n                event.element['muted'] = true;\n            });\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        })\n        .catch(error =\n {\n            console.log('There was an error connecting to the session:', error.code, error.message);\n        });\n});\n\n\n\n\nIn \nsession.connect\n method first param is the recently retrieved user token. Remember \nvideoElementCreated\n event for the Subscriber object, when we added the user's nickname to the HTML? Well, second parameter is the actual value every user will receive in \nStream.connection.data\n property in that event. So in this case it is an object with a property \"clientData\" with value \"myUserName\", which has been set in the first step to the value retrieved from HTML input \ninput class=\"form-control\" type=\"text\" id=\"userName\" required\n (this is filled by the user).\n\n\nIf the method succeeds, we first change our view to the active call (5) and then proceed to publish our webcam to the session. To do so we get a \nPublisher\n object with the desired properties (6). This process will end with the addition of a new HTML video element showing your camera, as a child of element with \nid\n 'video-container'. Event \nvideoElementCreated\n will be fired by the Publisher object just after this video is added to DOM, so we can subscribe to it and do whatever we want with it. In this case, we init another bigger video element with our video and append our nickname to it, by using auxiliary methods \ninitMainVideo\n and \nappendUserData\n (7).\n\n\nFinally we just have to publish \npublisher\n object through \nSession.publish\n method (8), and the rest of users will begin receiving our webcam ('streamCreated' event will be fired for them).\n\n\n\n\nLeaving the session:\n\n\nWhenever we want a user to leave the session, we just need to call \nsession.disconnect\n method:\n\n\nfunction leaveSession() {\n\n    // --- 9) Leave the session by calling 'disconnect' method over the Session object ---\n\n    session.disconnect();\n\n    // Removing all HTML elements with user's nicknames. \n    // HTML videos are automatically removed when leaving a Session\n    removeAllUserData();\n\n    // Back to 'Join session' page\n    document.getElementById('join').style.display = 'block';\n    document.getElementById('session').style.display = 'none';\n}\n\n\n\n\n\n\nApplication specific methods\n\n\nHere you have all the auxiliary methods used in this app, which are not directly related to OpenVidu:\n\n\n/* APPLICATION SPECIFIC METHODS */\n\nwindow.addEventListener('load', function () {\n    generateParticipantInfo();\n});\n\nwindow.onbeforeunload = function () {\n    if (session) session.disconnect();\n};\n\nfunction generateParticipantInfo() {\n    document.getElementById(\nsessionId\n).value = \nSessionA\n;\n    document.getElementById(\nuserName\n).value = \nParticipant\n + Math.floor(Math.random() * 100);\n}\n\nfunction appendUserData(videoElement, connection) {\n    var userData;\n    var nodeId;\n    if (typeof connection === \nstring\n) {\n        userData = connection;\n        nodeId = connection;\n    } else {\n        userData = JSON.parse(connection.data).clientData;\n        nodeId = connection.connectionId;\n    }\n    var dataNode = document.createElement('div');\n    dataNode.className = \ndata-node\n;\n    dataNode.id = \ndata-\n + nodeId;\n    dataNode.innerHTML = \np\n + userData + \n/p\n;\n    videoElement.parentNode.insertBefore(dataNode, videoElement.nextSibling);\n    addClickListener(videoElement, userData);\n}\n\nfunction removeUserData(connection) {\n    var dataNode = document.getElementById(\ndata-\n + connection.connectionId);\n    dataNode.parentNode.removeChild(dataNode);\n}\n\nfunction removeAllUserData() {\n    var nicknameElements = document.getElementsByClassName('data-node');\n    while (nicknameElements[0]) {\n        nicknameElements[0].parentNode.removeChild(nicknameElements[0]);\n    }\n}\n\nfunction addClickListener(videoElement, userData) {\n    videoElement.addEventListener('click', function () {\n        var mainVideo = document.querySelector('#main-video video');\n        var mainUserData = document.querySelector('#main-video p');\n        if (mainVideo.srcObject !== videoElement.srcObject) {\n            mainUserData.innerHTML = userData;\n            mainVideo.srcObject = videoElement.srcObject;\n        }\n    });\n}\n\nfunction initMainVideo(videoElement, userData) {\n    document.querySelector('#main-video video').srcObject = videoElement.srcObject;\n    document.querySelector('#main-video p').innerHTML = userData;\n    document.querySelector('#main-video video')['muted'] = true;\n}\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-insecure-js"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#openvidu-insecure-js", 
            "text": "Check it on GitHub  A client-side only application built with JavaScript, HTML and CSS.  If it is the first time you use OpenVidu, it is higly recommended to start with  openvidu-hello-world  tutorial, as this app is no more than an extension of it with some new features and sytles.", 
            "title": "openvidu-insecure-js"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the three modules displayed on the image above in its insecure version.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-server : Java application that controls Kurento Media Server  Kurento Media Server : server that handles low level operations of media flows transmission   \n      \n    Tutorial's name includes \"insecure\" word because this application has no backend and therefore it has no control over the users. Typically you don't want such application in production environments. When you feel comfortable with the client-side of OpenVidu, add your own server or follow one of our super simple secure tutorials.", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need an http web server installed in your development computer to execute the sample application. If you have  node.js  installed, you can use  http-server  to serve application files. It can be installed with:  npm install -g http-server  3) Run the tutorial:  http-server openvidu-tutorials/openvidu-insecure-js/web  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  localhost:8080  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#understanding-the-code", 
            "text": "This application is very simple. It has only 4 files:   openvidu-browser-VERSION.js : openvidu-browser library. You don't have to manipulate this file.   app.js : sample application main JavaScritp file, which makes use of  openvidu-browser-VERSION.js . You can manipulate this file to suit your needs.  style.css : some CSS classes to style  index.html . You can manipulate this file to suit your needs.  index.html : HTML code for the form to connect to a video-call and for the video-call itself. You can manipulate this file to suit your needs. It has two links to both JavaScript files:    \n     script src=\"openvidu-browser-VERSION.js\" /script  script src=\"app.js\" /script   Let's see how  app.js  uses  openvidu-browser-VERSION.js :", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#first-lines-declare-the-variables-that-will-be-needed-in-different-points-along-the-code", 
            "text": "var OV;\nvar session;  OV  will be our OpenVidu object (entrypoint to the libray).  session  will be the video-call we will connect to. As first sentences in the join method, we initialize the two parameters whose value is retrieved from the HTML inputs.  var mySessionId = document.getElementById( sessionId ).value;   // Session the user will join\nvar myUserName = document.getElementById( userName ).value;     // Nickname of the user in the session", 
            "title": "First lines declare the variables that will be needed in different points along the code"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#lets-initialize-a-new-session-and-configure-our-events", 
            "text": "// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();  As you can see in the code, the process is very simple: get an OpenVidu object and initialize a Session object with it.  // --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', event =  {\n\n    // Subscribe to the Stream to receive it. HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', event =  {\n\n        // Add a new  p  element for the user's nickname just below its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', event =  {\n\n    // Delete the HTML element with the user's nickname. HTML videos are automatically removed from DOM\n    removeUserData(event.stream.connection);\n});  Here we subscribe to the events that interest us. In this case, we want to receive all videos published to the session, as well as displaying every user's nickname next to its video. To achieve this:    streamCreated : for each new Stream received by OpenVidu, we immediately subscribe to it so we can see its video. A new HTML video element will be appended to element with id 'video-container'.    videoElementCreated : event triggered by Subscriber object (returned by the previous  Session.subscribe  method). This allows us to add the participant nickname to the new video previously added in  streamCreated  event. Auxiliary method  appendUserData  is responsible for appending a new paragraph element just below the  event.element  video, containing  subscriber.stream.connection.data  field. In this case, this field contains the user's nickName. You can see how to feed this property from the client in a later step.    streamDestroyed : for each Stream that has been destroyed (which means a user has left the video-call), we remove the element with the user's nickname that we added in the previous event with the auxiliary method  removeUserData  ( appendUserData  method created the element with an  id  containing  event.stream.connection.connectionId  unique value, so we can now identify the right element to be removed). OpenVidu automatically deletes the proper video element by default, so we don't need to do anything else.     Check  Application specific methods  section to see all the auxiliary methods used in this app", 
            "title": "Let's initialize a new session and configure our events:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#get-a-token-from-openvidu-server", 
            "text": "WARNING : This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session.  This process should entirely take place in our server-side , not in our client-side. But due to the lack of an application backend in this tutorial, the JavaScript code itself will perform the POST operations to OpenVidu Server   // --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\ngetToken(mySessionId).then(token =  {\n    // See next point to see how to connect to the session using 'token'\n});  Now we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the  API REST ,  OpenVidu Java Client  or  OpenVidu Node Client . Here we have implemented the POST requests to OpenVidu Server in a mehtod  getToken()  that returns a Promise with the token. Without going into too much detail, this method performs two  ajax  requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:   First ajax request performs a POST to  /api/sessions  (we send a  customSessionId  field to name the session with our  mySessionId  value retrieved from HTML input)  Second ajax request performas a POST to  /api/tokens  (we send a  sessionId  field to assign the token to this same session)   You can inspect this method in detail in the  GitHub repo .", 
            "title": "Get a token from OpenVidu Server"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#finally-connect-to-the-session-using-the-token-and-publish-your-webcam", 
            "text": "// --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\ngetToken(mySessionId).then(token =  {\n\n    // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n    session.connect(token, { clientData: myUserName })\n        .then(() =  {\n\n            // --- 5) Set page layout for active call ---\n\n            document.getElementById('session-title').innerText = mySessionId;\n            document.getElementById('join').style.display = 'none';\n            document.getElementById('session').style.display = 'block';\n\n            // --- 6) Get your own camera stream with the desired properties ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', function (event) {\n                initMainVideo(event.element, myUserName);\n                appendUserData(event.element, myUserName);\n                event.element['muted'] = true;\n            });\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        })\n        .catch(error =  {\n            console.log('There was an error connecting to the session:', error.code, error.message);\n        });\n});  In  session.connect  method first param is the recently retrieved user token. Remember  videoElementCreated  event for the Subscriber object, when we added the user's nickname to the HTML? Well, second parameter is the actual value every user will receive in  Stream.connection.data  property in that event. So in this case it is an object with a property \"clientData\" with value \"myUserName\", which has been set in the first step to the value retrieved from HTML input  input class=\"form-control\" type=\"text\" id=\"userName\" required  (this is filled by the user).  If the method succeeds, we first change our view to the active call (5) and then proceed to publish our webcam to the session. To do so we get a  Publisher  object with the desired properties (6). This process will end with the addition of a new HTML video element showing your camera, as a child of element with  id  'video-container'. Event  videoElementCreated  will be fired by the Publisher object just after this video is added to DOM, so we can subscribe to it and do whatever we want with it. In this case, we init another bigger video element with our video and append our nickname to it, by using auxiliary methods  initMainVideo  and  appendUserData  (7).  Finally we just have to publish  publisher  object through  Session.publish  method (8), and the rest of users will begin receiving our webcam ('streamCreated' event will be fired for them).", 
            "title": "Finally connect to the session using the token and publish your webcam:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#leaving-the-session", 
            "text": "Whenever we want a user to leave the session, we just need to call  session.disconnect  method:  function leaveSession() {\n\n    // --- 9) Leave the session by calling 'disconnect' method over the Session object ---\n\n    session.disconnect();\n\n    // Removing all HTML elements with user's nicknames. \n    // HTML videos are automatically removed when leaving a Session\n    removeAllUserData();\n\n    // Back to 'Join session' page\n    document.getElementById('join').style.display = 'block';\n    document.getElementById('session').style.display = 'none';\n}", 
            "title": "Leaving the session:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-js/#application-specific-methods", 
            "text": "Here you have all the auxiliary methods used in this app, which are not directly related to OpenVidu:  /* APPLICATION SPECIFIC METHODS */\n\nwindow.addEventListener('load', function () {\n    generateParticipantInfo();\n});\n\nwindow.onbeforeunload = function () {\n    if (session) session.disconnect();\n};\n\nfunction generateParticipantInfo() {\n    document.getElementById( sessionId ).value =  SessionA ;\n    document.getElementById( userName ).value =  Participant  + Math.floor(Math.random() * 100);\n}\n\nfunction appendUserData(videoElement, connection) {\n    var userData;\n    var nodeId;\n    if (typeof connection ===  string ) {\n        userData = connection;\n        nodeId = connection;\n    } else {\n        userData = JSON.parse(connection.data).clientData;\n        nodeId = connection.connectionId;\n    }\n    var dataNode = document.createElement('div');\n    dataNode.className =  data-node ;\n    dataNode.id =  data-  + nodeId;\n    dataNode.innerHTML =  p  + userData +  /p ;\n    videoElement.parentNode.insertBefore(dataNode, videoElement.nextSibling);\n    addClickListener(videoElement, userData);\n}\n\nfunction removeUserData(connection) {\n    var dataNode = document.getElementById( data-  + connection.connectionId);\n    dataNode.parentNode.removeChild(dataNode);\n}\n\nfunction removeAllUserData() {\n    var nicknameElements = document.getElementsByClassName('data-node');\n    while (nicknameElements[0]) {\n        nicknameElements[0].parentNode.removeChild(nicknameElements[0]);\n    }\n}\n\nfunction addClickListener(videoElement, userData) {\n    videoElement.addEventListener('click', function () {\n        var mainVideo = document.querySelector('#main-video video');\n        var mainUserData = document.querySelector('#main-video p');\n        if (mainVideo.srcObject !== videoElement.srcObject) {\n            mainUserData.innerHTML = userData;\n            mainVideo.srcObject = videoElement.srcObject;\n        }\n    });\n}\n\nfunction initMainVideo(videoElement, userData) {\n    document.querySelector('#main-video video').srcObject = videoElement.srcObject;\n    document.querySelector('#main-video p').innerHTML = userData;\n    document.querySelector('#main-video video')['muted'] = true;\n}    \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "Application specific methods"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/", 
            "text": "openvidu-insecure-angular\n\n\n Check it on GitHub\n\n\nA client-side only application built with \nAngular 6\n framework.\n\n\nIf it is the first time you use OpenVidu, it is higly recommended to start with \nopenvidu-hello-world\n tutorial, as this app is no more than an extension of it with some new features and sytles.\n\n\nThis is the Angular version of \nopenvidu-insecure-js\n. Try it if you plan to use Angular framework for your frontend.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the three modules displayed on the image above in its insecure version.\n\n\n\n\nopenvidu-browser\n: NPM package for your Angular app. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-server\n: Java application that controls Kurento Media Server\n\n\nKurento Media Server\n: server that handles low level operations of media flow transmissions\n\n\n\n\n\n    \n\n\n\n    Tutorial's name includes \"insecure\" word because this application has no backend and therefore it has no control over the users. Typically you don't want such application in production environments. When you feel comfortable with the client-side of OpenVidu, add your own server or follow one of our super simple secure tutorials.\n\n\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need angular-cli (and of course NPM) to serve the Angular frontend. You can install it with the following command:\n\n\nnpm install -g @angular/cli@6.0.1\n\n\n\n\n3) Run the tutorial:\n\n\ncd openvidu-tutorials/openvidu-insecure-angular\nnpm install\nng serve\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nlocalhost:4200\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n        \n\n    \n\n    \n\n    \n\n        \n\n        \n\n    \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis is an Angular project generated with angular-cli tool, and therefore you will see lots of configuration files and other stuff that doesn't really matter to us. We will focus on the following files under \nsrc/app/\n folder:\n\n\n\n\napp.component.ts\n: defines \nAppComponent\n, main component of the app. It contains the functionalities for joining a video-call and for handling the video-calls themselves.\n\n\napp.component.html\n: HTML for AppComponent.\n\n\napp.component.css\n: CSS for AppComponent.\n\n\nuser-video.component.ts\n: defines \nUserVideoComponent\n, used to display every user video. It contains one \nOpenViduVideoComponent\n, the name of the user and also handles a click event to update the view of \nAppComponent\n.\n\n\nov-video.component.ts\n: defines \nOpenViduVideoComponent\n, which wraps the final HTML \nvideo\n that finally displays the media stream.\n\n\n\n\nLet's see first how \napp.component.ts\n uses NPM package \nopenvidu-browser\n:\n\n\n\n\nWe import the necessary objects from \nopenvidu-browser\n:\n\n\nimport { OpenVidu, Session, StreamManager, Publisher, Subscriber, StreamEvent } from 'openvidu-browser';\n\n\n\n\n\n\napp.component.ts\n declares the following properties:\n\n\n// OpenVidu objects\nOV: OpenVidu;\nsession: Session;\npublisher: StreamManager; // Local\nsubscribers: StreamManager[] = []; // Remotes\n\n// Join form\nmySessionId: string;\nmyUserName: string;\n\n// Main video of the page, will be 'publisher' or one of the 'subscribers',\n// updated by an Output event of UserVideoComponent children\n@Input() mainStreamManager: StreamManager;\n\n\n\n\nOpenVidu\n object will allow us to get a \nSession\n object, which is declared just after it. \npublisher\n StreamManager object will be will be our own local webcam stream and \nsubscribers\n StreamManager array will store the active streams of other users in the video-call. Finally, \nmySessionId\n and \nmyUserName\n params simply represent the video-call and your participant's nickname, as you will see in a moment.\n\n\n\n\nWhenever a user clicks on the submit input defined in \napp.component.html\n, \njoinSession()\n method is called:\n\n\n\n\nWe first get an OpenVidu object and initialize a Session object with it.\n\n\n// --- 1) Get an OpenVidu object ---\n\nthis.OV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nthis.session = this.OV.initSession();\n\n\n\n\nThen we subscribe to the Session events that interest us.\n\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nthis.session.on('streamCreated', (event: StreamEvent) =\n {\n\n    // Subscribe to the Stream to receive it. Second parameter is undefined\n    // so OpenVidu doesn't create an HTML video by its own\n    let subscriber: Subscriber = this.session.subscribe(event.stream, undefined);\n    this.subscribers.push(subscriber);\n});\n\n// On every Stream destroyed...\nthis.session.on('streamDestroyed', (event: StreamEvent) =\n {\n\n    // Remove the stream from 'subscribers' array\n    this.deleteSubscriber(event.stream.streamManager);\n});\n\n\n\n\nAs we are using Angular framework, a good approach for managing the remote media streams is to loop across an array of them, feeding a common component with each \nSubscriber\n object and let it manage its video. This component will be our \nUserVideoComponent\n. To do this, we need to store each new Subscriber we received in array \nsubscribers\n (of the parent class \nStreamManager\n), and we must remove from it every deleted subscriber whenever it is necessary. To achieve this, we use the following events:\n\n\n\n\n\n\nstreamCreated\n: for each new Stream received by the Session object, we subscribe to it and store the returned Subscriber object in our \nsubscribers\n array. Method \nsession.subscribe\n has \nundefined\n as second parameter so OpenVidu doesn't insert and HTML video element in the DOM on its own (we will use the video element contained in one of our child components). HTML template of \nAppComponent\n loops through \nsubscribers\n array with an \nngFor\n directive, declaring a \nUserVideoComponent\n for each subscriber. We feed them not really as \nSubscriber\n objects, but rather as their parent class \nStreamManager\n. This way we can reuse \nUserVideoComponent\n to also display our \nPublisher\n object (that also inhertis from class StreamManager). \nuser-video\n also declares an output event to let \nAppComponent\n know when the user has clicked on it.\n\n\ndiv *ngFor=\"let sub of subscribers\" class=\"stream-container col-md-6 col-xs-6\"\n\n    \nuser-video [streamManager]=\"sub\" (clicked)=\"updateMainStreamManager(sub)\"\n/user-video\n\n\n/div\n\n\n\n\n\n\n\n\nstreamDestroyed\n: for each Stream that has been destroyed from the Session object (which means a user has left the video-call), we remove the associated Subscriber from \nsubscribers\n array, so Angular will automatically delete the required UserVideoComponent from HTML. Each Stream object has a property \nstreamManager\n that indicates which Subscriber or Publisher owns it (in the same way, each StreamManager object also has a reference to its Stream).\n\n\n\n\n\n\n\n\nGet a \ntoken\n from OpenVidu Server\n\n\n\n    \n\n\n\n    \nWARNING\n: This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session. \nThis process should entirely take place in our server-side\n, not in our client-side. But due to the lack of an application backend in this tutorial, the Angular front itself will perform the POST operations to OpenVidu Server\n\n\n\n\n\n\n// --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\nthis.getToken().then(token =\n {\n    // See next point to see how to connect to the session using 'token'\n});\n\n\n\n\nNow we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the \nAPI REST\n, \nOpenVidu Java Client\n or \nOpenVidu Node Client\n. Here we have implemented the POST requests to OpenVidu Server in a mehtod \ngetToken()\n that returns a Promise with the token, using \n@angular/http\n library. Without going into too much detail, this method performs two POST requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:\n\n\n\n\nFirst request performs a POST to \n/api/sessions\n (we send a \ncustomSessionId\n field to name the session with our \nmySessionId\n value retrieved from HTML input)\n\n\nSecond request performas a POST to \n/api/tokens\n (we send a \nsessionId\n field to assign the token to this same session)\n\n\n\n\nYou can inspect this method in detail in the \nGitHub repo\n.\n\n\n\n\nFinally connect to the session and publish your webcam:\n\n\n // --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\nthis.getToken().then(token =\n {\n\n    // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n    this.session.connect(token, { clientData: this.myUserName })\n        .then(() =\n {\n\n            // --- 5) Get your own camera stream ---\n\n            // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n            // element: we will manage it on our own) and with the desired properties\n            let publisher: Publisher = this.OV.initPublisher(undefined, {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 6) Publish your stream ---\n\n            this.session.publish(publisher);\n\n            // Set the main video in the page to display our webcam and store our Publisher\n            this.mainStreamManager = publisher;\n            this.publisher = publisher;\n        })\n        .catch(error =\n {\n            console.log('There was an error connecting to the session:', error.code, error.message);\n        });\n});\n\n\n\n\nIn \nsession.connect\n method first param is the recently retrieved user token. Second param is the value every user will receive in \nevent.stream.connection.data\n property on \nstreamCreated\n event (this value will be used by \nUserVideoComponent\n to append the user's nickname to the his video). So in this case it is an object with a property \"clientData\" with value \"myUserName\", which is binded from HTML input \ninput class=\"form-control\" type=\"text\" id=\"userName\" name=\"userName\" [(ngModel)]=\"myUserName\" required\n (filled by the user).\n\n\nIf the method succeeds, we proceed to publish our webcam to the session. To do so we get a \nPublisher\n object with the desired properties and publish it to the Session through \nSession.publish()\n method. The rest of users will receive our Stream object and will execute their \nstreamCreated\n event. Finally we make the main video player (which is just another \nUserVideoComponent\n) display the Publisher object by default. This is the HTML code that will display the main stream manager:\n\n\ndiv *ngIf=\nmainStreamManager\n id=\nmain-video\n class=\ncol-md-6\n\n    \nuser-video [streamManager]=\nmainStreamManager\n/user-video\n\n\n/div\n\n\n\n\n\nAnd we store the Publisher under \nthis.publisher\n, which is also of parent class \nStreamManager\n. This way our webcam will be appended along all remote subscribers, in exactly the same way they are shown (remember all of them are displayed by \nUserVideoComponent\n):\n\n\ndiv *ngIf=\npublisher\n class=\nstream-container col-md-6 col-xs-6\n\n    \nuser-video [streamManager]=\npublisher\n (clicked)=\nupdateMainStreamManager(publisher)\n/user-video\n\n\n/div\n\n\n\n\n\nLast point worth considering is the implementation of \nUserVideoComonent\n and \nOpenViduVideoComponent\n. Each \nUserVideoComponent\n manages one StreamManager object (a Subscriber or a Publisher) that will be fed to its child component \nOpenViduVideoComponent\n. Its main task is not managing the final video player (that is \nOpenViduVideoComponent\n responsability), but displaying custom information for each one of them (the user's nickname) and handling the click event on them to update property \nmainStreamManager\n of parent \nAppComponent\n:\n\n\ndiv (click)=\nvideoClicked()\n\n    \nov-video [streamManager]=\nstreamManager\n/ov-video\n\n    \ndiv\np\n{% raw %}{{getNicknameTag()}}{% endraw %}\n/p\n/div\n\n\n/div\n\n\n\n\n\nexport class UserVideoComponent {\n\n    @Input()\n    streamManager: StreamManager;\n\n    @Output()\n    clicked = new EventEmitter();\n\n    getNicknameTag() { // Gets the nickName of the user\n        return JSON.parse(this.streamManager.stream.connection.data).clientData;\n    }\n\n    videoClicked() { // Triggers event for the parent component to update its main video display\n        this.clicked.emit();\n    }\n}\n\n\n\n\nOpenViduVideoComponent\n html template is just the video element:\n\n\nvideo #videoElement\n/video\n\n\n\n\n\nAnd the unique responsability of the component's logic is letting OpenVidu know the exact HTML DOM video player associated to its StreamManger. To do so we use method \nStreamManager.addVideoElement\n, which receives a native HTML video element. The way we implement this is Angular dependant: we get the video element with \n@ViewChild\n tag and we call the method once after the view has initialized (\nngAfterViewInit\n) and once every time the StreamManager input changes (\nset\n method with \n@Input\n tag)\n\n\nexport class OpenViduVideoComponent implements AfterViewInit {\n\n    @ViewChild('videoElement') elementRef: ElementRef;\n\n    _streamManager: StreamManager;\n\n    ngAfterViewInit() {\n        this._streamManager.addVideoElement(this.elementRef.nativeElement);\n    }\n\n    @Input()\n    set streamManager(streamManager: StreamManager) {\n        this._streamManager = streamManager;\n        if (!!this.elementRef) {\n            this._streamManager.addVideoElement(this.elementRef.nativeElement);\n        }\n    }\n}\n\n\n\n\n\n\nLeaving the session:\n\n\nWhenever we want a user to leave the session, we just need to call \nsession.disconnect\n method in \napp.component.ts\n:\n\n\n  leaveSession() {\n\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n\n    if (this.session) { this.session.disconnect(); };\n\n    // Empty all properties...\n    this.subscribers = [];\n    delete this.publisher;\n    delete this.session;\n    delete this.OV;\n    this.generateParticipantInfo();\n  }\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-insecure-angular"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#openvidu-insecure-angular", 
            "text": "Check it on GitHub  A client-side only application built with  Angular 6  framework.  If it is the first time you use OpenVidu, it is higly recommended to start with  openvidu-hello-world  tutorial, as this app is no more than an extension of it with some new features and sytles.  This is the Angular version of  openvidu-insecure-js . Try it if you plan to use Angular framework for your frontend.", 
            "title": "openvidu-insecure-angular"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the three modules displayed on the image above in its insecure version.   openvidu-browser : NPM package for your Angular app. It allows you to manage your video-calls straight away from your clients  openvidu-server : Java application that controls Kurento Media Server  Kurento Media Server : server that handles low level operations of media flow transmissions   \n      \n    Tutorial's name includes \"insecure\" word because this application has no backend and therefore it has no control over the users. Typically you don't want such application in production environments. When you feel comfortable with the client-side of OpenVidu, add your own server or follow one of our super simple secure tutorials.", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need angular-cli (and of course NPM) to serve the Angular frontend. You can install it with the following command:  npm install -g @angular/cli@6.0.1  3) Run the tutorial:  cd openvidu-tutorials/openvidu-insecure-angular\nnpm install\nng serve  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  localhost:4200  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#understanding-the-code", 
            "text": "This is an Angular project generated with angular-cli tool, and therefore you will see lots of configuration files and other stuff that doesn't really matter to us. We will focus on the following files under  src/app/  folder:   app.component.ts : defines  AppComponent , main component of the app. It contains the functionalities for joining a video-call and for handling the video-calls themselves.  app.component.html : HTML for AppComponent.  app.component.css : CSS for AppComponent.  user-video.component.ts : defines  UserVideoComponent , used to display every user video. It contains one  OpenViduVideoComponent , the name of the user and also handles a click event to update the view of  AppComponent .  ov-video.component.ts : defines  OpenViduVideoComponent , which wraps the final HTML  video  that finally displays the media stream.   Let's see first how  app.component.ts  uses NPM package  openvidu-browser :", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#we-import-the-necessary-objects-from-openvidu-browser", 
            "text": "import { OpenVidu, Session, StreamManager, Publisher, Subscriber, StreamEvent } from 'openvidu-browser';", 
            "title": "We import the necessary objects from openvidu-browser:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#appcomponentts-declares-the-following-properties", 
            "text": "// OpenVidu objects\nOV: OpenVidu;\nsession: Session;\npublisher: StreamManager; // Local\nsubscribers: StreamManager[] = []; // Remotes\n\n// Join form\nmySessionId: string;\nmyUserName: string;\n\n// Main video of the page, will be 'publisher' or one of the 'subscribers',\n// updated by an Output event of UserVideoComponent children\n@Input() mainStreamManager: StreamManager;  OpenVidu  object will allow us to get a  Session  object, which is declared just after it.  publisher  StreamManager object will be will be our own local webcam stream and  subscribers  StreamManager array will store the active streams of other users in the video-call. Finally,  mySessionId  and  myUserName  params simply represent the video-call and your participant's nickname, as you will see in a moment.", 
            "title": "app.component.ts declares the following properties:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#whenever-a-user-clicks-on-the-submit-input-defined-in-appcomponenthtml-joinsession-method-is-called", 
            "text": "We first get an OpenVidu object and initialize a Session object with it.  // --- 1) Get an OpenVidu object ---\n\nthis.OV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nthis.session = this.OV.initSession();  Then we subscribe to the Session events that interest us.  // --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nthis.session.on('streamCreated', (event: StreamEvent) =  {\n\n    // Subscribe to the Stream to receive it. Second parameter is undefined\n    // so OpenVidu doesn't create an HTML video by its own\n    let subscriber: Subscriber = this.session.subscribe(event.stream, undefined);\n    this.subscribers.push(subscriber);\n});\n\n// On every Stream destroyed...\nthis.session.on('streamDestroyed', (event: StreamEvent) =  {\n\n    // Remove the stream from 'subscribers' array\n    this.deleteSubscriber(event.stream.streamManager);\n});  As we are using Angular framework, a good approach for managing the remote media streams is to loop across an array of them, feeding a common component with each  Subscriber  object and let it manage its video. This component will be our  UserVideoComponent . To do this, we need to store each new Subscriber we received in array  subscribers  (of the parent class  StreamManager ), and we must remove from it every deleted subscriber whenever it is necessary. To achieve this, we use the following events:    streamCreated : for each new Stream received by the Session object, we subscribe to it and store the returned Subscriber object in our  subscribers  array. Method  session.subscribe  has  undefined  as second parameter so OpenVidu doesn't insert and HTML video element in the DOM on its own (we will use the video element contained in one of our child components). HTML template of  AppComponent  loops through  subscribers  array with an  ngFor  directive, declaring a  UserVideoComponent  for each subscriber. We feed them not really as  Subscriber  objects, but rather as their parent class  StreamManager . This way we can reuse  UserVideoComponent  to also display our  Publisher  object (that also inhertis from class StreamManager).  user-video  also declares an output event to let  AppComponent  know when the user has clicked on it.  div *ngFor=\"let sub of subscribers\" class=\"stream-container col-md-6 col-xs-6\" \n     user-video [streamManager]=\"sub\" (clicked)=\"updateMainStreamManager(sub)\" /user-video  /div     streamDestroyed : for each Stream that has been destroyed from the Session object (which means a user has left the video-call), we remove the associated Subscriber from  subscribers  array, so Angular will automatically delete the required UserVideoComponent from HTML. Each Stream object has a property  streamManager  that indicates which Subscriber or Publisher owns it (in the same way, each StreamManager object also has a reference to its Stream).", 
            "title": "Whenever a user clicks on the submit input defined in app.component.html, joinSession() method is called:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#get-a-token-from-openvidu-server", 
            "text": "WARNING : This is why this tutorial is an insecure application. We need to ask OpenVidu Server for a user token in order to connect to our session.  This process should entirely take place in our server-side , not in our client-side. But due to the lack of an application backend in this tutorial, the Angular front itself will perform the POST operations to OpenVidu Server   // --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\nthis.getToken().then(token =  {\n    // See next point to see how to connect to the session using 'token'\n});  Now we need a token from OpenVidu Server. In a production environment we would perform this operations in our application backend, by making use of the  API REST ,  OpenVidu Java Client  or  OpenVidu Node Client . Here we have implemented the POST requests to OpenVidu Server in a mehtod  getToken()  that returns a Promise with the token, using  @angular/http  library. Without going into too much detail, this method performs two POST requests to OpenVidu Server, passing OpenVidu Server secret to authenticate them:   First request performs a POST to  /api/sessions  (we send a  customSessionId  field to name the session with our  mySessionId  value retrieved from HTML input)  Second request performas a POST to  /api/tokens  (we send a  sessionId  field to assign the token to this same session)   You can inspect this method in detail in the  GitHub repo .", 
            "title": "Get a token from OpenVidu Server"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#finally-connect-to-the-session-and-publish-your-webcam", 
            "text": "// --- 4) Connect to the session with a valid user token ---\n\n// 'getToken' method is simulating what your server-side should do.\n// 'token' parameter should be retrieved and returned by your own backend\nthis.getToken().then(token =  {\n\n    // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event\n    // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname\n    this.session.connect(token, { clientData: this.myUserName })\n        .then(() =  {\n\n            // --- 5) Get your own camera stream ---\n\n            // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video\n            // element: we will manage it on our own) and with the desired properties\n            let publisher: Publisher = this.OV.initPublisher(undefined, {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 6) Publish your stream ---\n\n            this.session.publish(publisher);\n\n            // Set the main video in the page to display our webcam and store our Publisher\n            this.mainStreamManager = publisher;\n            this.publisher = publisher;\n        })\n        .catch(error =  {\n            console.log('There was an error connecting to the session:', error.code, error.message);\n        });\n});  In  session.connect  method first param is the recently retrieved user token. Second param is the value every user will receive in  event.stream.connection.data  property on  streamCreated  event (this value will be used by  UserVideoComponent  to append the user's nickname to the his video). So in this case it is an object with a property \"clientData\" with value \"myUserName\", which is binded from HTML input  input class=\"form-control\" type=\"text\" id=\"userName\" name=\"userName\" [(ngModel)]=\"myUserName\" required  (filled by the user).  If the method succeeds, we proceed to publish our webcam to the session. To do so we get a  Publisher  object with the desired properties and publish it to the Session through  Session.publish()  method. The rest of users will receive our Stream object and will execute their  streamCreated  event. Finally we make the main video player (which is just another  UserVideoComponent ) display the Publisher object by default. This is the HTML code that will display the main stream manager:  div *ngIf= mainStreamManager  id= main-video  class= col-md-6 \n     user-video [streamManager]= mainStreamManager /user-video  /div   And we store the Publisher under  this.publisher , which is also of parent class  StreamManager . This way our webcam will be appended along all remote subscribers, in exactly the same way they are shown (remember all of them are displayed by  UserVideoComponent ):  div *ngIf= publisher  class= stream-container col-md-6 col-xs-6 \n     user-video [streamManager]= publisher  (clicked)= updateMainStreamManager(publisher) /user-video  /div   Last point worth considering is the implementation of  UserVideoComonent  and  OpenViduVideoComponent . Each  UserVideoComponent  manages one StreamManager object (a Subscriber or a Publisher) that will be fed to its child component  OpenViduVideoComponent . Its main task is not managing the final video player (that is  OpenViduVideoComponent  responsability), but displaying custom information for each one of them (the user's nickname) and handling the click event on them to update property  mainStreamManager  of parent  AppComponent :  div (click)= videoClicked() \n     ov-video [streamManager]= streamManager /ov-video \n     div p {% raw %}{{getNicknameTag()}}{% endraw %} /p /div  /div   export class UserVideoComponent {\n\n    @Input()\n    streamManager: StreamManager;\n\n    @Output()\n    clicked = new EventEmitter();\n\n    getNicknameTag() { // Gets the nickName of the user\n        return JSON.parse(this.streamManager.stream.connection.data).clientData;\n    }\n\n    videoClicked() { // Triggers event for the parent component to update its main video display\n        this.clicked.emit();\n    }\n}  OpenViduVideoComponent  html template is just the video element:  video #videoElement /video   And the unique responsability of the component's logic is letting OpenVidu know the exact HTML DOM video player associated to its StreamManger. To do so we use method  StreamManager.addVideoElement , which receives a native HTML video element. The way we implement this is Angular dependant: we get the video element with  @ViewChild  tag and we call the method once after the view has initialized ( ngAfterViewInit ) and once every time the StreamManager input changes ( set  method with  @Input  tag)  export class OpenViduVideoComponent implements AfterViewInit {\n\n    @ViewChild('videoElement') elementRef: ElementRef;\n\n    _streamManager: StreamManager;\n\n    ngAfterViewInit() {\n        this._streamManager.addVideoElement(this.elementRef.nativeElement);\n    }\n\n    @Input()\n    set streamManager(streamManager: StreamManager) {\n        this._streamManager = streamManager;\n        if (!!this.elementRef) {\n            this._streamManager.addVideoElement(this.elementRef.nativeElement);\n        }\n    }\n}", 
            "title": "Finally connect to the session and publish your webcam:"
        }, 
        {
            "location": "/tutorials/openvidu-insecure-angular/#leaving-the-session", 
            "text": "Whenever we want a user to leave the session, we just need to call  session.disconnect  method in  app.component.ts :    leaveSession() {\n\n    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---\n\n    if (this.session) { this.session.disconnect(); };\n\n    // Empty all properties...\n    this.subscribers = [];\n    delete this.publisher;\n    delete this.session;\n    delete this.OV;\n    this.generateParticipantInfo();\n  }    \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "Leaving the session:"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/", 
            "text": "openvidu-js-java\n\n\n Check it on GitHub\n\n\nA secure OpenVidu sample app with a Java backend and a SPA frontend. It makes use of \nopenvidu-java-client\n to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to \nopenvidu-mvc-java\n. This tutorial is intended for developers who feel more comfortable with a SPA (Single Page Application) architecture for their frontends.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the modules displayed on the image above.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-java-client\n: server SDK for Java. Quick alternative to REST API\n\n\nopenvidu-server\n: application to control Kurento Media Server\n\n\nKurento Media Server\n: handles low level operations of media flow transmissions\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need \nmaven\n to build the project. You can install it with:\n\n\nsudo apt-get install maven\n\n\n\n\n3) Run the tutorial:\n\n\ncd openvidu-tutorials/openvidu-js-java\nmvn package exec:java\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nhttps://localhost:5000\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Java backend. OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive \nHttpSession\n API. In these posts multiple options for user session management in Java are explained, inlcuding the one used in this tutorial: \njournaldev.com\n, \nstudytonight.com\n.\n\n\n\n\n\n\nBackend\n: SpringBoot app with the following classes (\nsrc/main/java\n path, \nio.openvidu.js.java\n package)\n\n\n\n\nApp.java\n : entrypoint for the app\n\n\nLoginController.java\n : rest controller for handling login and logout operations\n\n\nSessionController.java\n : rest controller for getting OpenVidu tokens. It also stores our active video-calls and the users connected to them\n\n\n\n\n\n\n\n\nFrontend\n: Plain JS/HTML/CSS files (\nsrc/main/resources/static\n)\n\n\n\n\nopenvidu-browser-VERSION.js\n : openvidu-browser library. You don't have to manipulate this file.\n\n\napp.js\n : sample application main JavaScritp file, which makes use of \nopenvidu-browser-VERSION.js\n.\n\n\n\n\nindex.html\n : HTML code for the form to login, the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files:\n\n\nscript src=\"openvidu-browser-VERSION.js\"\n/script\n\n\nscript src=\"app.js\"\n/script\n\n\n\n\n\n\n\n\nstyle.css\n: some CSS classes to style \nindex.html\n.\n\n\n\n\n\n\n\n\n\n\nLet's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.\n\n\n\n\n1) User logs in\n\n\nWe have implemented a method for making HTTP POST requests to the backend, as we will need to make at least three of them: one for logging in, one for getting a token from openvidu-server and one for letting know our backend when any user leaves the video-call. The header of the method looks like this:\n\n\nfunction httpPostRequest(url, body, errorMsg, callback)\n\n\n\n\nWhere \nurl\n is the path of the POST operation, \nbody\n the object to send as data, \nerrorMsg\n the output error message if something goes wrong and \ncallback\n the function to execute in case of success. As mentioned above, we need to call this method three times for each user that LOGS IN \ud83e\udc52 CONNECTS TO A VIDEO-CALL \ud83e\udc52 LEAVES THE VIDEO-CALL.\n\n\nindex.html\n will first show a form to log in:\n\n\n\n  \n\n\n\n\n\napp.js\n sends a POST request to \"/api-login/login\" passing the username and the password retrieved from the HTML form whenever \"Log in\" button is clicked:\n\n\nfunction logIn() {\n    var user = $(\n#user\n).val(); // Username\n    var pass = $(\n#pass\n).val(); // Password\n\n    httpPostRequest(\n        'api-login/login',\n        {user: user, pass: pass},\n        'Login WRONG',\n        (response) =\n {\n            // HTML shows logged-in page ...\n        }\n    );\n}\n\n\n\n\nLoginController.java\n checks the params are correct and if so sets an \nHttpSession\n for the newly logged user (adding a \"loggedUser\" attribute with its username in the HttpSession object):\n\n\n@RequestMapping(value = \n/login\n, method = RequestMethod.POST)\npublic ResponseEntity\nObject\n login(@RequestBody String userPass, HttpSession httpSession) \n    throws ParseException {\n\n    System.out.println(\nLogging in | {user, pass}=\n + userPass);\n    // Retrieve params from POST body\n    JSONObject userPassJson = (JSONObject) new JSONParser().parse(userPass);\n    String user = (String) userPassJson.get(\nuser\n);\n    String pass = (String) userPassJson.get(\npass\n);\n\n    if (login(user, pass)) { // Correct user-pass\n        // Validate session and return OK \n        // Value stored in HttpSession allows us to identify the user in future requests\n        httpSession.setAttribute(\nloggedUser\n, user);\n        return new ResponseEntity\n(HttpStatus.OK);\n    } else { // Wrong user-pass\n        // Invalidate session and return error\n        httpSession.invalidate();\n        return new ResponseEntity\n(\nUser/Pass incorrect\n, HttpStatus.UNAUTHORIZED);\n    }\n}\n\n\n\n\n\n\n2) User connects to \"TUTORIAL\" video-call\n\n\nHTML will display now the user has logged a different form, asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field and press \"Join!\" button:\n\n\n\n  \n\n\n\n\n\napp.js\n will execute \njoinSession()\n method, which starts like this:\n\n\nfunction joinSession() {\n    getToken((token) =\n { ...\n\n\n\n\nSo the first thing to do here is to retrieve an OpenVidu \ntoken\n from our backend. Only when we have it available in the browser we will continue with the \njoin\n operation. Let's see what \ngetToken()\n looks like:\n\n\nfunction getToken(callback) {\n    sessionName = $(\n#sessionName\n).val(); // Video-call chosen by the user\n\n    httpPostRequest(\n        'api-sessions/get-token',\n        {sessionName: sessionName},\n        'Request of TOKEN gone WRONG:',\n        (response) =\n {\n            token = response[0]; // Get token from response\n            console.warn('Request of TOKEN gone WELL (TOKEN:' + token + ')');\n            callback(token); // Continue the join operation\n        }\n    );\n}\n\n\n\n\nHere is the second time we must call our \nhttpPostRequest()\n method, sending the session we want to connect (\nsessionName\n parameter) and waiting to get a \ntoken\n as response. The interesting part here is in \nSessionController.java\n at \n/api-sessions/get-token\n. First of all there are some important attributes in this class we must mention:\n\n\n// OpenVidu object as entrypoint of the SDK\nprivate OpenVidu openVidu;\n\n// Collection to pair session names and OpenVidu Session objects\nprivate Map\nString, Session\n mapSessions = new ConcurrentHashMap\n();\n// Collection to pair session names and tokens (the inner Map pairs tokens and role associated)\nprivate Map\nString, Map\nString, OpenViduRole\n mapSessionNamesTokens = new ConcurrentHashMap\n();\n\n// URL where our OpenVidu server is listening\nprivate String OPENVIDU_URL;\n// Secret shared with our OpenVidu server\nprivate String SECRET;\n\n\n\n\nRest controller method begins retrieving the param send by the client, which in this case is the video-call name (\"TUTORIAL\"), as well as preparing a param we will need a little further on: \ntokenOptions\n.\n\n\n@RequestMapping(value = \n/get-token\n, method = RequestMethod.POST)\n    public ResponseEntity\nJSONObject\n getToken(@RequestBody String sessionNameParam,\n        HttpSession httpSession) throws ParseException {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    JSONObject sessionJSON = (JSONObject) new JSONParser().parse(sessionNameParam);\n\n    // The video-call to connect (\nTUTORIAL\n)\n    String sessionName = (String) sessionJSON.get(\nsessionName\n);\n\n    // Role associated to this user\n    OpenViduRole role = LoginController.users.get(httpSession.getAttribute(\nloggedUser\n)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the HttpSession object on login\n    String serverData = \n{\\\nserverData\\\n: \\\n + httpSession.getAttribute(\nloggedUser\n) + \n\\\n}\n;\n\n    // Build tokenOptions object with the serverData and the role\n    TokenOptions tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build();\n\n    JSONObject responseJson = new JSONObject();\n\n\n\n\nJust after that an \nif-else\n statement comes into play: does the session \"TUTORIAL\" already exist?\n\n\nif (this.mapSessions.get(sessionName) != null) { ...\n\n\n\n\nIn this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the \nelse\n branch:\n\n\nelse {\n    // New session\n    System.out.println(\nNew session \n + sessionName);\n    try {\n\n        // Create a new OpenVidu Session\n        Session session = this.openVidu.createSession();\n        // Generate a new token with the recently created tokenOptions\n        String token = session.generateToken(tokenOptions);\n\n        // Store the session and the token in our collections\n        this.mapSessions.put(sessionName, session);\n        this.mapSessionNamesTokens.put(sessionName, new ConcurrentHashMap\n());\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Prepare the response with the token\n        responseJson.put(0, token);\n\n        // Return the response to the client\n        return new ResponseEntity\n(responseJson, HttpStatus.OK);\n\n    } catch (Exception e) {\n        // If error generate an error message and return it to client\n        return getErrorResponse(e);\n    }\n}\n\n\n\n\nWe are almost there! Now in \napp.js\n we can init a new Session and connect to it with \ntoken\n:\n\n\n// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =\n {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =\n {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =\n {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nvar nickName = $(\n#nickName\n).val();\nsession.connect(token, { clientData: nickName })\n    .then(() =\n {\n\n        // --- 5) Set page layout for active call ---\n\n        var userName = $(\n#user\n).val();\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher(userName)) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =\n {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =\n {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });\n\n\n\n\nThe user will now see its own video on the page. The connection to the session has completed!\n\n\n\n\n3) Another user connects to the video-call\n\n\nThe process would be exactly the same as before until \nSessionController.java\n executes \ngetToken()\n method. Now session 'TUTORIAL' already exists, so in the \nif-else\n statement the \nif\n branch would be the one executed:\n\n\nif (this.mapSessions.get(sessionName) != null) {\n    // Session already exists\n    System.out.println(\nExisting session \n + sessionName);\n    try {\n\n        // Generate a new token with the recently created tokenOptions\n        String token = this.mapSessions.get(sessionName).generateToken(tokenOptions);\n\n        // Update our collection storing the new token\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Prepare the response with the token\n        responseJson.put(0, token);\n\n        // Return the response to the client\n        return new ResponseEntity\n(responseJson, HttpStatus.OK);\n\n    } catch (Exception e) {\n        // If error generate an error message and return it to client\n        return getErrorResponse(e);\n    }\n}\n\n\n\n\nThe code executed in \napp.js\n would also be the same. After the \nSession.publish()\n method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.\n\n\n\n\n4) Users leave the video-call\n\n\nAfter a while both users decide to leave the session. Apart from calling \nleaveSession()\n (and therefore \nsession.disconnect()\n) to destroy the connection on OpenVidu Server, we need to run the last POST operation: we must let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens. To sum up, \nsession.disconnect()\n updates our OpenVidu Server and the POST operation updates our application's backend.\nFor the POST operation, in \napp.js\n we run:\n\n\nfunction removeUser() {\n    httpPostRequest(\n        'api-sessions/remove-user',\n        {sessionName: sessionName, token: token},\n        'User couldn\\'t be removed from session',\n        (response) =\n {\n            console.warn(\nYou have been removed from session \n + sessionName);\n        }\n    );\n}\n\n\n\n\nAnd in \nSessionController.java\n we update the collections:\n\n\n@RequestMapping(value = \n/remove-user\n, method = RequestMethod.POST)\npublic ResponseEntity\nJSONObject\n removeUser(@RequestBody String sessionNameToken,\n    HttpSession httpSession) throws Exception {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // Retrieve the params from BODY\n    JSONObject sessionNameTokenJSON = (JSONObject) new JSONParser().parse(sessionNameToken);\n    String sessionName = (String) sessionNameTokenJSON.get(\nsessionName\n);\n    String token = (String) sessionNameTokenJSON.get(\ntoken\n);\n\n    // If the session exists (\nTUTORIAL\n in this case)\n    if (this.mapSessions.get(sessionName) != null \n this.mapSessionNamesTokens.get(sessionName) != null) {\n\n        // If the token exists and is succesfully removed\n        if (this.mapSessionNamesTokens.get(sessionName).remove(token) != null) {\n            // User left the session\n            if (this.mapSessionNamesTokens.get(sessionName).isEmpty()) {\n                // Last user left: session must be removed\n                this.mapSessions.remove(sessionName);\n            }\n            return new ResponseEntity\n(HttpStatus.OK);\n        } else {\n            // The TOKEN wasn't valid\n            System.out.println(\nProblems in the app server: the TOKEN wasn't valid\n);\n            return new ResponseEntity\n(HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    } else {\n        // The SESSION does not exist\n        System.out.println(\nProblems in the app server: the SESSION does not exist\n);\n        return new ResponseEntity\n(HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n\n\n\n\nWhen the last user leaves the session \nthis.mapSessions.remove(sessionName);\n will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.\n\n\n\n\n\n\nAt this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches: \nyou can implement your frontend and your backend as you want\n.\n\n\nThe only actual requirements are getting a valid \ntoken\n from  \nopenvidu-server\n (by using \nopenvidu-java-client\n, \nopenvidu-node-client\n or the \nREST API\n) and use it in \nopenvidu-browser\n to connect your clients to the sessions with \nSession.connect(token)\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-js-java"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#openvidu-js-java", 
            "text": "Check it on GitHub  A secure OpenVidu sample app with a Java backend and a SPA frontend. It makes use of  openvidu-java-client  to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to  openvidu-mvc-java . This tutorial is intended for developers who feel more comfortable with a SPA (Single Page Application) architecture for their frontends.", 
            "title": "openvidu-js-java"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the modules displayed on the image above.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-java-client : server SDK for Java. Quick alternative to REST API  openvidu-server : application to control Kurento Media Server  Kurento Media Server : handles low level operations of media flow transmissions", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need  maven  to build the project. You can install it with:  sudo apt-get install maven  3) Run the tutorial:  cd openvidu-tutorials/openvidu-js-java\nmvn package exec:java  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  https://localhost:5000  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#understanding-the-code", 
            "text": "This is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Java backend. OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive  HttpSession  API. In these posts multiple options for user session management in Java are explained, inlcuding the one used in this tutorial:  journaldev.com ,  studytonight.com .    Backend : SpringBoot app with the following classes ( src/main/java  path,  io.openvidu.js.java  package)   App.java  : entrypoint for the app  LoginController.java  : rest controller for handling login and logout operations  SessionController.java  : rest controller for getting OpenVidu tokens. It also stores our active video-calls and the users connected to them     Frontend : Plain JS/HTML/CSS files ( src/main/resources/static )   openvidu-browser-VERSION.js  : openvidu-browser library. You don't have to manipulate this file.  app.js  : sample application main JavaScritp file, which makes use of  openvidu-browser-VERSION.js .   index.html  : HTML code for the form to login, the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files:  script src=\"openvidu-browser-VERSION.js\" /script  script src=\"app.js\" /script     style.css : some CSS classes to style  index.html .      Let's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#1-user-logs-in", 
            "text": "We have implemented a method for making HTTP POST requests to the backend, as we will need to make at least three of them: one for logging in, one for getting a token from openvidu-server and one for letting know our backend when any user leaves the video-call. The header of the method looks like this:  function httpPostRequest(url, body, errorMsg, callback)  Where  url  is the path of the POST operation,  body  the object to send as data,  errorMsg  the output error message if something goes wrong and  callback  the function to execute in case of success. As mentioned above, we need to call this method three times for each user that LOGS IN \ud83e\udc52 CONNECTS TO A VIDEO-CALL \ud83e\udc52 LEAVES THE VIDEO-CALL.  index.html  will first show a form to log in:  \n     app.js  sends a POST request to \"/api-login/login\" passing the username and the password retrieved from the HTML form whenever \"Log in\" button is clicked:  function logIn() {\n    var user = $( #user ).val(); // Username\n    var pass = $( #pass ).val(); // Password\n\n    httpPostRequest(\n        'api-login/login',\n        {user: user, pass: pass},\n        'Login WRONG',\n        (response) =  {\n            // HTML shows logged-in page ...\n        }\n    );\n}  LoginController.java  checks the params are correct and if so sets an  HttpSession  for the newly logged user (adding a \"loggedUser\" attribute with its username in the HttpSession object):  @RequestMapping(value =  /login , method = RequestMethod.POST)\npublic ResponseEntity Object  login(@RequestBody String userPass, HttpSession httpSession) \n    throws ParseException {\n\n    System.out.println( Logging in | {user, pass}=  + userPass);\n    // Retrieve params from POST body\n    JSONObject userPassJson = (JSONObject) new JSONParser().parse(userPass);\n    String user = (String) userPassJson.get( user );\n    String pass = (String) userPassJson.get( pass );\n\n    if (login(user, pass)) { // Correct user-pass\n        // Validate session and return OK \n        // Value stored in HttpSession allows us to identify the user in future requests\n        httpSession.setAttribute( loggedUser , user);\n        return new ResponseEntity (HttpStatus.OK);\n    } else { // Wrong user-pass\n        // Invalidate session and return error\n        httpSession.invalidate();\n        return new ResponseEntity ( User/Pass incorrect , HttpStatus.UNAUTHORIZED);\n    }\n}", 
            "title": "1) User logs in"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#2-user-connects-to-tutorial-video-call", 
            "text": "HTML will display now the user has logged a different form, asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field and press \"Join!\" button:  \n     app.js  will execute  joinSession()  method, which starts like this:  function joinSession() {\n    getToken((token) =  { ...  So the first thing to do here is to retrieve an OpenVidu  token  from our backend. Only when we have it available in the browser we will continue with the  join  operation. Let's see what  getToken()  looks like:  function getToken(callback) {\n    sessionName = $( #sessionName ).val(); // Video-call chosen by the user\n\n    httpPostRequest(\n        'api-sessions/get-token',\n        {sessionName: sessionName},\n        'Request of TOKEN gone WRONG:',\n        (response) =  {\n            token = response[0]; // Get token from response\n            console.warn('Request of TOKEN gone WELL (TOKEN:' + token + ')');\n            callback(token); // Continue the join operation\n        }\n    );\n}  Here is the second time we must call our  httpPostRequest()  method, sending the session we want to connect ( sessionName  parameter) and waiting to get a  token  as response. The interesting part here is in  SessionController.java  at  /api-sessions/get-token . First of all there are some important attributes in this class we must mention:  // OpenVidu object as entrypoint of the SDK\nprivate OpenVidu openVidu;\n\n// Collection to pair session names and OpenVidu Session objects\nprivate Map String, Session  mapSessions = new ConcurrentHashMap ();\n// Collection to pair session names and tokens (the inner Map pairs tokens and role associated)\nprivate Map String, Map String, OpenViduRole  mapSessionNamesTokens = new ConcurrentHashMap ();\n\n// URL where our OpenVidu server is listening\nprivate String OPENVIDU_URL;\n// Secret shared with our OpenVidu server\nprivate String SECRET;  Rest controller method begins retrieving the param send by the client, which in this case is the video-call name (\"TUTORIAL\"), as well as preparing a param we will need a little further on:  tokenOptions .  @RequestMapping(value =  /get-token , method = RequestMethod.POST)\n    public ResponseEntity JSONObject  getToken(@RequestBody String sessionNameParam,\n        HttpSession httpSession) throws ParseException {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    JSONObject sessionJSON = (JSONObject) new JSONParser().parse(sessionNameParam);\n\n    // The video-call to connect ( TUTORIAL )\n    String sessionName = (String) sessionJSON.get( sessionName );\n\n    // Role associated to this user\n    OpenViduRole role = LoginController.users.get(httpSession.getAttribute( loggedUser )).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the HttpSession object on login\n    String serverData =  {\\ serverData\\ : \\  + httpSession.getAttribute( loggedUser ) +  \\ } ;\n\n    // Build tokenOptions object with the serverData and the role\n    TokenOptions tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build();\n\n    JSONObject responseJson = new JSONObject();  Just after that an  if-else  statement comes into play: does the session \"TUTORIAL\" already exist?  if (this.mapSessions.get(sessionName) != null) { ...  In this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the  else  branch:  else {\n    // New session\n    System.out.println( New session   + sessionName);\n    try {\n\n        // Create a new OpenVidu Session\n        Session session = this.openVidu.createSession();\n        // Generate a new token with the recently created tokenOptions\n        String token = session.generateToken(tokenOptions);\n\n        // Store the session and the token in our collections\n        this.mapSessions.put(sessionName, session);\n        this.mapSessionNamesTokens.put(sessionName, new ConcurrentHashMap ());\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Prepare the response with the token\n        responseJson.put(0, token);\n\n        // Return the response to the client\n        return new ResponseEntity (responseJson, HttpStatus.OK);\n\n    } catch (Exception e) {\n        // If error generate an error message and return it to client\n        return getErrorResponse(e);\n    }\n}  We are almost there! Now in  app.js  we can init a new Session and connect to it with  token :  // --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =  {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =  {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =  {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nvar nickName = $( #nickName ).val();\nsession.connect(token, { clientData: nickName })\n    .then(() =  {\n\n        // --- 5) Set page layout for active call ---\n\n        var userName = $( #user ).val();\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher(userName)) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =  {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =  {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });  The user will now see its own video on the page. The connection to the session has completed!", 
            "title": "2) User connects to \"TUTORIAL\" video-call"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#3-another-user-connects-to-the-video-call", 
            "text": "The process would be exactly the same as before until  SessionController.java  executes  getToken()  method. Now session 'TUTORIAL' already exists, so in the  if-else  statement the  if  branch would be the one executed:  if (this.mapSessions.get(sessionName) != null) {\n    // Session already exists\n    System.out.println( Existing session   + sessionName);\n    try {\n\n        // Generate a new token with the recently created tokenOptions\n        String token = this.mapSessions.get(sessionName).generateToken(tokenOptions);\n\n        // Update our collection storing the new token\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Prepare the response with the token\n        responseJson.put(0, token);\n\n        // Return the response to the client\n        return new ResponseEntity (responseJson, HttpStatus.OK);\n\n    } catch (Exception e) {\n        // If error generate an error message and return it to client\n        return getErrorResponse(e);\n    }\n}  The code executed in  app.js  would also be the same. After the  Session.publish()  method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.", 
            "title": "3) Another user connects to the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-js-java/#4-users-leave-the-video-call", 
            "text": "After a while both users decide to leave the session. Apart from calling  leaveSession()  (and therefore  session.disconnect() ) to destroy the connection on OpenVidu Server, we need to run the last POST operation: we must let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens. To sum up,  session.disconnect()  updates our OpenVidu Server and the POST operation updates our application's backend.\nFor the POST operation, in  app.js  we run:  function removeUser() {\n    httpPostRequest(\n        'api-sessions/remove-user',\n        {sessionName: sessionName, token: token},\n        'User couldn\\'t be removed from session',\n        (response) =  {\n            console.warn( You have been removed from session   + sessionName);\n        }\n    );\n}  And in  SessionController.java  we update the collections:  @RequestMapping(value =  /remove-user , method = RequestMethod.POST)\npublic ResponseEntity JSONObject  removeUser(@RequestBody String sessionNameToken,\n    HttpSession httpSession) throws Exception {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // Retrieve the params from BODY\n    JSONObject sessionNameTokenJSON = (JSONObject) new JSONParser().parse(sessionNameToken);\n    String sessionName = (String) sessionNameTokenJSON.get( sessionName );\n    String token = (String) sessionNameTokenJSON.get( token );\n\n    // If the session exists ( TUTORIAL  in this case)\n    if (this.mapSessions.get(sessionName) != null   this.mapSessionNamesTokens.get(sessionName) != null) {\n\n        // If the token exists and is succesfully removed\n        if (this.mapSessionNamesTokens.get(sessionName).remove(token) != null) {\n            // User left the session\n            if (this.mapSessionNamesTokens.get(sessionName).isEmpty()) {\n                // Last user left: session must be removed\n                this.mapSessions.remove(sessionName);\n            }\n            return new ResponseEntity (HttpStatus.OK);\n        } else {\n            // The TOKEN wasn't valid\n            System.out.println( Problems in the app server: the TOKEN wasn't valid );\n            return new ResponseEntity (HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    } else {\n        // The SESSION does not exist\n        System.out.println( Problems in the app server: the SESSION does not exist );\n        return new ResponseEntity (HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}  When the last user leaves the session  this.mapSessions.remove(sessionName);  will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.    At this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches:  you can implement your frontend and your backend as you want .  The only actual requirements are getting a valid  token  from   openvidu-server  (by using  openvidu-java-client ,  openvidu-node-client  or the  REST API ) and use it in  openvidu-browser  to connect your clients to the sessions with  Session.connect(token)     \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "4) Users leave the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/", 
            "text": "openvidu-mvc-java\n\n\n Check it on GitHub\n\n\nA secure OpenVidu sample app with a Java backend and a traditional MVC frontend. It makes use of \nopenvidu-java-client\n to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to \nopenvidu-js-java\n. This tutorial is intended for developers who feel more comfortable with MVC web architectures for their frontends. \nThymeleaf\n is the template engine of choice for this tutorial.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the modules displayed on the image above.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-java-client\n: server SDK for Java. Quick alternative to REST API\n\n\nopenvidu-server\n: application to control Kurento Media Server\n\n\nKurento Media Server\n: handles low level operations of media flow transmissions\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need \nmaven\n to build the project. You can install it with:\n\n\nsudo apt-get install maven\n\n\n\n\n3) Run the tutorial:\n\n\ncd openvidu-tutorials/openvidu-mvc-java\nmvn package exec:java\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nhttps://localhost:5000\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Java backend that serves HTML files with a MVC approach, building the templates with the help of \nThymeleaf\n.\n\n\nOpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive \nHttpSession\n API. In these posts multiple options for user session management in Java are explained, inlcuding the one used in this tutorial: \njournaldev.com\n, \nstudytonight.com\n.\n\n\n\n\n\n\nBackend\n: SpringBoot app with the following classes (\nsrc/main/java\n path, \nio.openvidu.js.java\n package)\n\n\n\n\nApp.java\n : entrypoint for the app\n\n\nLoginController.java\n : controller for handling login and logout operations\n\n\nSessionController.java\n : controller for getting OpenVidu tokens. It also stores our active video-calls and the users connected to them\n\n\n\n\n\n\n\n\nFrontend templates\n: Plain JS/HTML/CSS files served by the backend (\nsrc/main/resources/templates\n)\n\n\n\n\nindex.html\n : template with the login form\n\n\ndashboard.html\n : template with the form to join a video-call\n\n\nsession.html\n : template of the video-call itself\n\n\n\n\n\n\n\n\nFrontend static files\n (\nsrc/main/resources/static\n)\n\n\n\n\nopenvidu-browser-VERSION.js\n : openvidu-browser library. You don't have to manipulate this file\n\n\nstyle.css\n : some CSS classes to style the templates\n\n\n\n\n\n\n\n\nLet's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.\n\n\n\n\n1) User logs in\n\n\nAt path \n/\n a login form will be displayed:\n\n\n\n  \n\n\n\n\n\nThe form will execute a POST operation to path \n/dashboard\n whenever \"Log in\" button is clicked, passing the username and the password:\n\n\nform class=\nform-group jumbotron\n action=\n/dashboard\n method=\npost\n\n    \np\n\n        \nlabel\nUser\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\nuser\n required=\ntrue\n/input\n\n    \n/p\n\n    \np\n\n        \nlabel\nPass\n/label\n\n        \ninput class=\nform-control\n type=\npassword\n name=\npass\n required=\ntrue\n/input\n\n    \n/p\n\n    \np class=\ntext-center\n\n        \nbutton class=\nbtn btn-lg btn-info\n type=\nsubmit\nLog in\n/button\n\n    \n/p\n\n\n/form\n\n\n\n\n\nLoginController.java\n first checks if the user is already logged (maybe he has just refreshed \n/dashboard\n page), and if so it just redirects to the dashboard itself. If the user is actually logging in, the method checks that the params are correct and if so sets an \nHttpSession\n for the newly logged user (adding a \"loggedUser\" attribute with its username in the HttpSession object). Finally it returns \ndashboard.html\n template:\n\n\n@RequestMapping(value = \n/dashboard\n, method = { RequestMethod.GET, RequestMethod.POST })\npublic String login(@RequestParam(name = \nuser\n, required = false) String user,\n            @RequestParam(name = \npass\n, required = false) String pass,\n            Model model, HttpSession httpSession) {\n\n    // Check if the user is already logged in\n    String userName = (String) httpSession.getAttribute(\nloggedUser\n);\n    if (userName != null) { \n        // User is already logged. Immediately return dashboard\n        model.addAttribute(\nusername\n, userName);\n        return \ndashboard\n;\n    }\n\n    // User wasn't logged and wants to\n    if (login(user, pass)) { // Correct user-pass\n\n        // Validate session and return OK \n        // Value stored in HttpSession allows us to identify the user in future requests\n        httpSession.setAttribute(\nloggedUser\n, user);\n        model.addAttribute(\nusername\n, user);\n\n        // Return dashboard.html template\n        return \ndashboard\n;\n\n    } else { // Wrong user-pass\n        // Invalidate session and redirect to index.html\n        httpSession.invalidate();\n        return \nredirect:/\n;\n    }\n}\n\n\n\n\n\n\n2) User connects to \"TUTORIAL\" video-call\n\n\ndashboard.html\n template will display a form asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field:\n\n\n\n  \n\n\n\n\n\nThe form will execute a POST operation to path \n/session\n whenever \"Join!\" button is clicked, passing the nickname and the session name:\n\n\nform class=\nform-group\n action=\n/session\n method=\npost\n\n    \np\n\n        \nlabel\nParticipant\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\ndata\n required=\ntrue\n/input\n\n    \n/p\n\n    \np\n\n        \nlabel\nSession\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\nsession-name\n required=\ntrue\n/input\n\n    \n/p\n\n    \np class=\ntext-center\n\n        \nbutton class=\nbtn btn-lg btn-success\n type=\nsubmit\nJoin!\n/button\n\n    \n/p\n\n\n/form\n\n\n\n\n\nWhen \nSessionController.java\n receives a request at \n/session\n path is when things get interesting.\nFirst of all there are some important attributes in this class we must mention:\n\n\n// OpenVidu object as entrypoint of the SDK\nprivate OpenVidu openVidu;\n\n// Collection to pair session names and OpenVidu Session objects\nprivate Map\nString, Session\n mapSessions = new ConcurrentHashMap\n();\n// Collection to pair session names and tokens (the inner Map pairs tokens and role associated)\nprivate Map\nString, Map\nString, OpenViduRole\n mapSessionNamesTokens = new ConcurrentHashMap\n();\n\n// URL where our OpenVidu server is listening\nprivate String OPENVIDU_URL;\n// Secret shared with our OpenVidu server\nprivate String SECRET;\n\n\n\n\nRest controller method receives both params sent by the client (whatever nickname the user has chosen and \"TUTORIAL\" as the sessionName). First it prepares a param we will need a little further on: \ntokenOptions\n.\n\n\n@RequestMapping(value = \n/session\n, method = RequestMethod.POST)\npublic String joinSession(@RequestParam(name = \ndata\n) String clientData,\n            @RequestParam(name = \nsession-name\n) String sessionName,\n            Model model, HttpSession httpSession) {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // Role associated to this user\n    OpenViduRole role = LoginController.users.get(httpSession.getAttribute(\nloggedUser\n)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the HttpSession object on login\n    String serverData = \n{\\\nserverData\\\n: \\\n + httpSession.getAttribute(\nloggedUser\n) + \n\\\n}\n;\n\n    // Build tokenOptions object with the serverData and the role\n    TokenOptions tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build();\n\n\n\n\nJust after that an \nif-else\n statement comes into play: does the session \"TUTORIAL\" already exist?\n\n\nif (this.mapSessions.get(sessionName) != null) { ...\n\n\n\n\nIn this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the \nelse\n branch:\n\n\nelse {\n    // New session\n    System.out.println(\nNew session \n + sessionName);\n    try {\n\n        // Create a new OpenVidu Session\n        Session session = this.openVidu.createSession();\n        // Generate a new token with the recently created tokenOptions\n        String token = session.generateToken(tokenOptions);\n\n        // Store the session and the token in our collections\n        this.mapSessions.put(sessionName, session);\n        this.mapSessionNamesTokens.put(sessionName, new ConcurrentHashMap\n());\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Add all the needed attributes to the template\n        model.addAttribute(\nsessionName\n, sessionName);\n        model.addAttribute(\ntoken\n, token);\n        model.addAttribute(\nnickName\n, clientData);\n        model.addAttribute(\nuserName\n, httpSession.getAttribute(\nloggedUser\n));\n\n        // Return session.html template\n        return \nsession\n;\n\n    } catch (Exception e) {\n        // If error just return dashboard.html template\n        model.addAttribute(\nusername\n, httpSession.getAttribute(\nloggedUser\n));\n        return \ndashboard\n;\n    }\n}\n\n\n\n\nWe are almost there! Now in \nsession.html\n JavaScript code (preceded by a tag \nscript th:inline=\"javascript\"\n) we can init a new Session and connect to it with \ntoken\n:\n\n\n// Get all the attributes from the template in Thymeleaf style\nvar sessionName = [[${ sessionName }]];\nvar token = [[${ token }]];\nvar nickName = [[${ nickName }]];\nvar userName = [[${ userName }]];\n\n// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =\n {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =\n {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =\n {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nsession.connect(token, { clientData: nickName })\n    .then(() =\n {\n\n        // --- 5) Set page layout for active call ---\n\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher()) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =\n {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =\n {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });\n\n\n\n\nThe user will now see its own video on the page. The connection to the session has completed!\n\n\n\n\n3) Another user connects to the video-call\n\n\nThe process would be exactly the same as before until \nSessionController.java\n executes \njoinSession()\n method. Now session 'TUTORIAL' already exists, so in the \nif-else\n statement the \nif\n branch would be the one executed:\n\n\nif (this.mapSessions.get(sessionName) != null) {\n    // Session already exists\n    System.out.println(\nExisting session \n + sessionName);\n    try {\n\n        // Generate a new token with the recently created tokenOptions\n        String token = this.mapSessions.get(sessionName).generateToken(tokenOptions);\n\n        // Update our collection storing the new token\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Add all the needed attributes to the template\n        model.addAttribute(\nsessionName\n, sessionName);\n        model.addAttribute(\ntoken\n, token);\n        model.addAttribute(\nnickName\n, clientData);\n        model.addAttribute(\nuserName\n, httpSession.getAttribute(\nloggedUser\n));\n\n        // Return session.html template\n        return \nsession\n;\n\n    } catch (Exception e) {\n        // If error just return dashboard.html template\n        model.addAttribute(\nusername\n, httpSession.getAttribute(\nloggedUser\n));\n        return \ndashboard\n;\n    }\n}\n\n\n\n\nThe code executed in \nsession.html\n \n script \n tag would also be the same. After the \nSession.publish()\n method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.\n\n\n\n\n4) Users leave the video-call\n\n\nAfter a while both users decide to leave the session. Apart from calling \nsession.disconnect()\n (triggered in \nleaveSession()\n \nonclick\n method) to destroy the connection on OpenVidu Server, we need another POST operation to let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens.\n\n\nIn \nsession.html\n template the \"Leave session\" button actually performs a POST operation to path \n/leave-session\n with a hidden form. Notice that when the user clicks the submit button, a POST operation will be triggered but also the \nleaveSession()\n method. First updates our application's backend. Second updates our OpenVidu Server.\n\n\nform action=\n/leave-session\n method=\npost\n\n    \ninput type=\nhidden\n name=\nsession-name\n th:value=\n${sessionName}\n/input\n\n    \ninput type=\nhidden\n name=\ntoken\n th:value=\n${token}\n/input\n\n    \nbutton id=\nbuttonLeaveSession\n class=\nbtn btn-large btn-danger\n type=\nsubmit\n onclick=\nleaveSession()\n\n        Leave session\n/button\n\n\n/form\n\n\n\n\n\nIn \nSessionController.java\n we update the collections:\n\n\n@RequestMapping(value = \n/leave-session\n, method = RequestMethod.POST)\npublic String removeUser(@RequestParam(name = \nsession-name\n) String sessionName,\n            @RequestParam(name = \ntoken\n) String token,\n            Model model, HttpSession httpSession) throws Exception {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // If the session exists (\nTUTORIAL\n in this case)\n    if (this.mapSessions.get(sessionName) != null \n this.mapSessionNamesTokens.get(sessionName) != null) {\n\n        // If the token exists\n        if (this.mapSessionNamesTokens.get(sessionName).remove(token) != null) {\n            // User left the session\n            if (this.mapSessionNamesTokens.get(sessionName).isEmpty()) {\n                // Last user left: session must be removed\n                this.mapSessions.remove(sessionName);\n            }\n            return \nredirect:/dashboard\n;\n\n        } else {\n            // The TOKEN wasn't valid\n            System.out.println(\nProblems in the app server: the TOKEN wasn't valid\n);\n            return \nredirect:/dashboard\n;\n        }\n\n    } else {\n        // The SESSION does not exist\n        System.out.println(\nProblems in the app server: the SESSION does not exist\n);\n        return \nredirect:/dashboard\n;\n    }\n}\n\n\n\n\nWhen the last user leaves the session \nthis.mapSessions.remove(sessionName);\n will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.\n\n\n\n\n\n\nAt this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches: \nyou can implement your frontend and your backend as you want\n.\n\n\nThe only actual requirements are getting a valid \ntoken\n from  \nopenvidu-server\n (by using \nopenvidu-java-client\n, \nopenvidu-node-client\n or the \nREST API\n) and use it in \nopenvidu-browser\n to connect your clients to the sessions with \nSession.connect(token)\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-mvc-java"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#openvidu-mvc-java", 
            "text": "Check it on GitHub  A secure OpenVidu sample app with a Java backend and a traditional MVC frontend. It makes use of  openvidu-java-client  to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to  openvidu-js-java . This tutorial is intended for developers who feel more comfortable with MVC web architectures for their frontends.  Thymeleaf  is the template engine of choice for this tutorial.", 
            "title": "openvidu-mvc-java"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the modules displayed on the image above.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-java-client : server SDK for Java. Quick alternative to REST API  openvidu-server : application to control Kurento Media Server  Kurento Media Server : handles low level operations of media flow transmissions", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need  maven  to build the project. You can install it with:  sudo apt-get install maven  3) Run the tutorial:  cd openvidu-tutorials/openvidu-mvc-java\nmvn package exec:java  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  https://localhost:5000  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#understanding-the-code", 
            "text": "This is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Java backend that serves HTML files with a MVC approach, building the templates with the help of  Thymeleaf .  OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive  HttpSession  API. In these posts multiple options for user session management in Java are explained, inlcuding the one used in this tutorial:  journaldev.com ,  studytonight.com .    Backend : SpringBoot app with the following classes ( src/main/java  path,  io.openvidu.js.java  package)   App.java  : entrypoint for the app  LoginController.java  : controller for handling login and logout operations  SessionController.java  : controller for getting OpenVidu tokens. It also stores our active video-calls and the users connected to them     Frontend templates : Plain JS/HTML/CSS files served by the backend ( src/main/resources/templates )   index.html  : template with the login form  dashboard.html  : template with the form to join a video-call  session.html  : template of the video-call itself     Frontend static files  ( src/main/resources/static )   openvidu-browser-VERSION.js  : openvidu-browser library. You don't have to manipulate this file  style.css  : some CSS classes to style the templates     Let's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#1-user-logs-in", 
            "text": "At path  /  a login form will be displayed:  \n     The form will execute a POST operation to path  /dashboard  whenever \"Log in\" button is clicked, passing the username and the password:  form class= form-group jumbotron  action= /dashboard  method= post \n     p \n         label User /label \n         input class= form-control  type= text  name= user  required= true /input \n     /p \n     p \n         label Pass /label \n         input class= form-control  type= password  name= pass  required= true /input \n     /p \n     p class= text-center \n         button class= btn btn-lg btn-info  type= submit Log in /button \n     /p  /form   LoginController.java  first checks if the user is already logged (maybe he has just refreshed  /dashboard  page), and if so it just redirects to the dashboard itself. If the user is actually logging in, the method checks that the params are correct and if so sets an  HttpSession  for the newly logged user (adding a \"loggedUser\" attribute with its username in the HttpSession object). Finally it returns  dashboard.html  template:  @RequestMapping(value =  /dashboard , method = { RequestMethod.GET, RequestMethod.POST })\npublic String login(@RequestParam(name =  user , required = false) String user,\n            @RequestParam(name =  pass , required = false) String pass,\n            Model model, HttpSession httpSession) {\n\n    // Check if the user is already logged in\n    String userName = (String) httpSession.getAttribute( loggedUser );\n    if (userName != null) { \n        // User is already logged. Immediately return dashboard\n        model.addAttribute( username , userName);\n        return  dashboard ;\n    }\n\n    // User wasn't logged and wants to\n    if (login(user, pass)) { // Correct user-pass\n\n        // Validate session and return OK \n        // Value stored in HttpSession allows us to identify the user in future requests\n        httpSession.setAttribute( loggedUser , user);\n        model.addAttribute( username , user);\n\n        // Return dashboard.html template\n        return  dashboard ;\n\n    } else { // Wrong user-pass\n        // Invalidate session and redirect to index.html\n        httpSession.invalidate();\n        return  redirect:/ ;\n    }\n}", 
            "title": "1) User logs in"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#2-user-connects-to-tutorial-video-call", 
            "text": "dashboard.html  template will display a form asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field:  \n     The form will execute a POST operation to path  /session  whenever \"Join!\" button is clicked, passing the nickname and the session name:  form class= form-group  action= /session  method= post \n     p \n         label Participant /label \n         input class= form-control  type= text  name= data  required= true /input \n     /p \n     p \n         label Session /label \n         input class= form-control  type= text  name= session-name  required= true /input \n     /p \n     p class= text-center \n         button class= btn btn-lg btn-success  type= submit Join! /button \n     /p  /form   When  SessionController.java  receives a request at  /session  path is when things get interesting.\nFirst of all there are some important attributes in this class we must mention:  // OpenVidu object as entrypoint of the SDK\nprivate OpenVidu openVidu;\n\n// Collection to pair session names and OpenVidu Session objects\nprivate Map String, Session  mapSessions = new ConcurrentHashMap ();\n// Collection to pair session names and tokens (the inner Map pairs tokens and role associated)\nprivate Map String, Map String, OpenViduRole  mapSessionNamesTokens = new ConcurrentHashMap ();\n\n// URL where our OpenVidu server is listening\nprivate String OPENVIDU_URL;\n// Secret shared with our OpenVidu server\nprivate String SECRET;  Rest controller method receives both params sent by the client (whatever nickname the user has chosen and \"TUTORIAL\" as the sessionName). First it prepares a param we will need a little further on:  tokenOptions .  @RequestMapping(value =  /session , method = RequestMethod.POST)\npublic String joinSession(@RequestParam(name =  data ) String clientData,\n            @RequestParam(name =  session-name ) String sessionName,\n            Model model, HttpSession httpSession) {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // Role associated to this user\n    OpenViduRole role = LoginController.users.get(httpSession.getAttribute( loggedUser )).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the HttpSession object on login\n    String serverData =  {\\ serverData\\ : \\  + httpSession.getAttribute( loggedUser ) +  \\ } ;\n\n    // Build tokenOptions object with the serverData and the role\n    TokenOptions tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build();  Just after that an  if-else  statement comes into play: does the session \"TUTORIAL\" already exist?  if (this.mapSessions.get(sessionName) != null) { ...  In this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the  else  branch:  else {\n    // New session\n    System.out.println( New session   + sessionName);\n    try {\n\n        // Create a new OpenVidu Session\n        Session session = this.openVidu.createSession();\n        // Generate a new token with the recently created tokenOptions\n        String token = session.generateToken(tokenOptions);\n\n        // Store the session and the token in our collections\n        this.mapSessions.put(sessionName, session);\n        this.mapSessionNamesTokens.put(sessionName, new ConcurrentHashMap ());\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Add all the needed attributes to the template\n        model.addAttribute( sessionName , sessionName);\n        model.addAttribute( token , token);\n        model.addAttribute( nickName , clientData);\n        model.addAttribute( userName , httpSession.getAttribute( loggedUser ));\n\n        // Return session.html template\n        return  session ;\n\n    } catch (Exception e) {\n        // If error just return dashboard.html template\n        model.addAttribute( username , httpSession.getAttribute( loggedUser ));\n        return  dashboard ;\n    }\n}  We are almost there! Now in  session.html  JavaScript code (preceded by a tag  script th:inline=\"javascript\" ) we can init a new Session and connect to it with  token :  // Get all the attributes from the template in Thymeleaf style\nvar sessionName = [[${ sessionName }]];\nvar token = [[${ token }]];\nvar nickName = [[${ nickName }]];\nvar userName = [[${ userName }]];\n\n// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =  {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =  {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =  {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nsession.connect(token, { clientData: nickName })\n    .then(() =  {\n\n        // --- 5) Set page layout for active call ---\n\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher()) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =  {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =  {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });  The user will now see its own video on the page. The connection to the session has completed!", 
            "title": "2) User connects to \"TUTORIAL\" video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#3-another-user-connects-to-the-video-call", 
            "text": "The process would be exactly the same as before until  SessionController.java  executes  joinSession()  method. Now session 'TUTORIAL' already exists, so in the  if-else  statement the  if  branch would be the one executed:  if (this.mapSessions.get(sessionName) != null) {\n    // Session already exists\n    System.out.println( Existing session   + sessionName);\n    try {\n\n        // Generate a new token with the recently created tokenOptions\n        String token = this.mapSessions.get(sessionName).generateToken(tokenOptions);\n\n        // Update our collection storing the new token\n        this.mapSessionNamesTokens.get(sessionName).put(token, role);\n\n        // Add all the needed attributes to the template\n        model.addAttribute( sessionName , sessionName);\n        model.addAttribute( token , token);\n        model.addAttribute( nickName , clientData);\n        model.addAttribute( userName , httpSession.getAttribute( loggedUser ));\n\n        // Return session.html template\n        return  session ;\n\n    } catch (Exception e) {\n        // If error just return dashboard.html template\n        model.addAttribute( username , httpSession.getAttribute( loggedUser ));\n        return  dashboard ;\n    }\n}  The code executed in  session.html    script   tag would also be the same. After the  Session.publish()  method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.", 
            "title": "3) Another user connects to the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-java/#4-users-leave-the-video-call", 
            "text": "After a while both users decide to leave the session. Apart from calling  session.disconnect()  (triggered in  leaveSession()   onclick  method) to destroy the connection on OpenVidu Server, we need another POST operation to let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens.  In  session.html  template the \"Leave session\" button actually performs a POST operation to path  /leave-session  with a hidden form. Notice that when the user clicks the submit button, a POST operation will be triggered but also the  leaveSession()  method. First updates our application's backend. Second updates our OpenVidu Server.  form action= /leave-session  method= post \n     input type= hidden  name= session-name  th:value= ${sessionName} /input \n     input type= hidden  name= token  th:value= ${token} /input \n     button id= buttonLeaveSession  class= btn btn-large btn-danger  type= submit  onclick= leaveSession() \n        Leave session /button  /form   In  SessionController.java  we update the collections:  @RequestMapping(value =  /leave-session , method = RequestMethod.POST)\npublic String removeUser(@RequestParam(name =  session-name ) String sessionName,\n            @RequestParam(name =  token ) String token,\n            Model model, HttpSession httpSession) throws Exception {\n\n    // ... check the user is logged with HttpSession and continue ...\n\n    // If the session exists ( TUTORIAL  in this case)\n    if (this.mapSessions.get(sessionName) != null   this.mapSessionNamesTokens.get(sessionName) != null) {\n\n        // If the token exists\n        if (this.mapSessionNamesTokens.get(sessionName).remove(token) != null) {\n            // User left the session\n            if (this.mapSessionNamesTokens.get(sessionName).isEmpty()) {\n                // Last user left: session must be removed\n                this.mapSessions.remove(sessionName);\n            }\n            return  redirect:/dashboard ;\n\n        } else {\n            // The TOKEN wasn't valid\n            System.out.println( Problems in the app server: the TOKEN wasn't valid );\n            return  redirect:/dashboard ;\n        }\n\n    } else {\n        // The SESSION does not exist\n        System.out.println( Problems in the app server: the SESSION does not exist );\n        return  redirect:/dashboard ;\n    }\n}  When the last user leaves the session  this.mapSessions.remove(sessionName);  will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.    At this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches:  you can implement your frontend and your backend as you want .  The only actual requirements are getting a valid  token  from   openvidu-server  (by using  openvidu-java-client ,  openvidu-node-client  or the  REST API ) and use it in  openvidu-browser  to connect your clients to the sessions with  Session.connect(token)     \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "4) Users leave the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/", 
            "text": "openvidu-js-node\n\n\n Check it on GitHub\n\n\nA secure OpenVidu sample app with a Node backend and a SPA frontend. It makes use of \nopenvidu-node-client\n to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to \nopenvidu-mvc-node\n. This tutorial is intended for developers who feel more comfortable with a SPA (Single Page Application) architecture for their frontends.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the modules displayed on the image above.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-node-client\n: server SDK for Node. Quick alternative to REST API\n\n\nopenvidu-server\n: application to control Kurento Media Server\n\n\nKurento Media Server\n: handles low level operations of media flow transmissions\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need \nnode\n to execute the app. You can install them with:\n\n\nsudo curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs\n\n\n\n\n3) Run the tutorial with the following commands. They will install the NPM dependencies and will execute \nserver.js\n server passing two arguments: \"localhost:4443\" as the URL where \nopenvidu-server\n will be listening and \"MY_SECRET\" as the secret share with it:\n\n\ncd openvidu-tutorials/openvidu-js-node\nnpm install\nnode server.js localhost:4443 MY_SECRET\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nhttps://localhost:5000\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Node backend with \nexpress\n. OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive \nexpress-session\n API.\n\n\n\n\n\n\nBackend\n: node server\n\n\n\n\nserver.js\n : single file which handles all operations of server\n\n\n\n\n\n\n\n\nFrontend\n: Plain JS/HTML/CSS files (\n/public\n folder)\n\n\n\n\nopenvidu-browser-VERSION.js\n : openvidu-browser library. You don't have to manipulate this file.\n\n\napp.js\n : sample application main JavaScritp file, which makes use of \nopenvidu-browser-VERSION.js\n.\n\n\n\n\nindex.html\n : HTML code for the form to login, the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files:\n\n\nscript src=\"openvidu-browser-VERSION.js\"\n/script\n\n\nscript src=\"app.js\"\n/script\n\n\n\n\n\n\n\n\nstyle.css\n: some CSS classes to style \nindex.html\n.\n\n\n\n\n\n\n\n\n\n\nLet's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.\n\n\n\n\n1) User logs in\n\n\nWe have implemented a method for making HTTP POST requests to the backend, as we will need to make at least three of them: one for logging in, one for getting a token from openvidu-server and one for letting know our backend when any user leaves the video-call. The header of the method looks like this:\n\n\nfunction httpPostRequest(url, body, errorMsg, callback)\n\n\n\n\nWhere \nurl\n is the path of the POST operation, \nbody\n the object to send as data, \nerrorMsg\n the output error message if something goes wrong and \ncallback\n the function to execute in case of success. As mentioned above, we need to call this method three times for each user that LOGS IN \ud83e\udc52 CONNECTS TO A VIDEO-CALL \ud83e\udc52 LEAVES THE VIDEO-CALL.\n\n\nindex.html\n will first show a form to log in:\n\n\n\n  \n\n\n\n\n\napp.js\n sends a POST request to \"/api-login/login\" passing the username and the password retrieved from the HTML form whenever \"Log in\" button is clicked:\n\n\nfunction logIn() {\n    var user = $(\n#user\n).val(); // Username\n    var pass = $(\n#pass\n).val(); // Password\n\n    httpPostRequest(\n        'api-login/login',\n        {user: user, pass: pass},\n        'Login WRONG',\n        (response) =\n {\n            // HTML shows logged-in page ...\n        }\n    );\n}\n\n\n\n\nserver.js\n at \n/api-login/login\n checks the params are correct and if so sets an active session for the newly logged user (adding a \nloggedUser\n property with its username in the \nreq.session\n object):\n\n\napp.post('/api-login/login', function (req, res) {\n\n    // Retrieve params from POST body\n    var user = req.body.user;\n    var pass = req.body.pass;\n\n    if (login(user, pass)) { // Correct user-pass\n        // Validate session and return OK\n        // Value stored in req.session allows us to identify the user in future requests\n        req.session.loggedUser = user;\n        res.status(200).send();\n    } else { // Wrong user-pass\n        // Invalidate session and return error\n        req.session.destroy();\n        res.status(401).send('User/Pass incorrect');\n    }\n});\n\n\n\n\n\n\n2) User connects to \"TUTORIAL\" video-call\n\n\nHTML will display now the user has logged a different form, asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field and press \"Join!\" button:\n\n\n\n  \n\n\n\n\n\napp.js\n will execute \njoinSession()\n method, which starts like this:\n\n\nfunction joinSession() {\n    getToken((token) =\n { ...\n\n\n\n\nSo the first thing to do here is to retrieve an OpenVidu \ntoken\n from our backend. Only when we have it available in the browser we will continue with the \njoin\n operation. Let's see what \ngetToken()\n looks like:\n\n\nfunction getToken(callback) {\n    sessionName = $(\n#sessionName\n).val(); // Video-call chosen by the user\n\n    httpPostRequest(\n        'api-sessions/get-token',\n        {sessionName: sessionName},\n        'Request of TOKEN gone WRONG:',\n        (response) =\n {\n            token = response[0]; // Get token from response\n            console.warn('Request of TOKEN gone WELL (TOKEN:' + token + ')');\n            callback(token); // Continue the join operation\n        }\n    );\n}\n\n\n\n\nHere is the second time we must call our \nhttpPostRequest()\n method, sending the session we want to connect (\nsessionName\n parameter) and waiting to get a \ntoken\n as response. The interesting part here is in \nserver.js\n controller at \n/api-sessions/get-token\n. First of all there are some important attributes in this class we must mention:\n\n\n// Environment variable: URL where our OpenVidu server is listening\nvar OPENVIDU_URL = process.argv[2];\n// Environment variable: secret shared with our OpenVidu server\nvar OPENVIDU_SECRET = process.argv[3];\n\n// Entrypoint to OpenVidu Node Client SDK\nvar OV = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\n\n// Collection to pair session names with OpenVidu Session objects\nvar mapSessions = {};\n// Collection to pair session names with tokens\nvar mapSessionNamesTokens = {};\n\n\n\n\nRest controller method begins retrieving the param send by the client, which in this case is the video-call name (\"TUTORIAL\"), as well as preparing a param we will need a little further on: \ntokenOptions\n.\n\n\napp.post('/api-sessions/get-token', function (req, res) {\n\n   // ... check the user is logged with req.session and continue ...\n\n    // The video-call to connect (\nTUTORIAL\n)\n    var sessionName = req.body.sessionName;\n\n    // Role associated to this user\n    var role = users.find(u =\n (u.user === req.session.loggedUser)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the req.session object on login\n    var serverData = JSON.stringify({serverData: req.session.loggedUser});\n\n    // Build tokenOptions object with the serverData and the role\n    var tokenOptions = {\n        data: serverData,\n        role: role\n    };\n\n\n\n\nJust after that an \nif-else\n statement comes into play: does the session \"TUTORIAL\" already exist?\n\n\nif (mapSessions[sessionName]) { ...\n\n\n\n\nIn this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the \nelse\n branch:\n\n\nelse {\n    // New session\n    console.log('New session ' + sessionName);\n\n    // Create a new OpenVidu Session asynchronously\n    OV.createSession()\n        .then(session =\n {\n            // Store the new Session in the collection of Sessions\n            mapSessions[sessionName] = session;\n            // Store a new empty array in the collection of tokens\n            mapSessionNamesTokens[sessionName] = [];\n\n            // Generate a new token asynchronously with the recently created tokenOptions\n            session.generateToken(tokenOptions)\n                .then(token =\n {\n\n                    // Store the new token in the collection of tokens\n                    mapSessionNamesTokens[sessionName].push(token);\n\n                    // Return the Token to the client\n                    res.status(200).send({\n                        0: token\n                    });\n                })\n                .catch(error =\n {\n                    console.error(error);\n                });\n        })\n        .catch(error =\n {\n            console.error(error);\n        });\n}\n\n\n\n\nWe are almost there! Now in \napp.js\n we can init a new Session and connect to it with \ntoken\n:\n\n\n// --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =\n {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =\n {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =\n {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nvar nickName = $(\n#nickName\n).val();\nsession.connect(token, { clientData: nickName })\n    .then(() =\n {\n\n        // --- 5) Set page layout for active call ---\n\n        var userName = $(\n#user\n).val();\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher(userName)) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =\n {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =\n {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });\n\n\n\n\nThe user will now see its own video on the page. The connection to the session has completed!\n\n\n\n\n3) Another user connects to the video-call\n\n\nThe process would be exactly the same as before until \nserver.js\n executes controller at \n/api-sessions/get-token\n. Now session 'TUTORIAL' already exists, so in the \nif-else\n statement the \nif\n branch would be the one executed:\n\n\nif (mapSessions[sessionName]) {\n    // Session already exists\n    console.log('Existing session ' + sessionName);\n\n    // Get the existing Session from the collection\n    var mySession = mapSessions[sessionName];\n\n    // Generate a new token asynchronously with the recently created tokenOptions\n    mySession.generateToken(tokenOptions)\n        .then(token =\n {\n\n            // Store the new token in the collection of tokens\n            mapSessionNamesTokens[sessionName].push(token);\n\n            // Return the token to the client\n            res.status(200).send({\n                0: token\n            });\n        })\n        .catch(error =\n {\n            console.error(error);\n        });\n}\n\n\n\n\nThe code executed in \napp.js\n would also be the same. After the \nSession.publish()\n method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.\n\n\n\n\n4) Users leave the video-call\n\n\nAfter a while both users decide to leave the session. Apart from calling \nleaveSession()\n (and therefore \nsession.disconnect()\n) to destroy the connection on OpenVidu Server, we need to run the last POST operation: we must let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens. To sum up, \nsession.disconnect()\n updates our OpenVidu Server and the POST operation updates our application's backend.\nFor the POST operation, in \napp.js\n we run:\n\n\nfunction removeUser() {\n    httpPostRequest(\n        'api-sessions/remove-user',\n        {sessionName: sessionName, token: token},\n        'User couldn\\'t be removed from session', \n        (response) =\n {\n            console.warn(\nYou have been removed from session \n + sessionName);\n        }\n    );\n}\n\n\n\n\nAnd in \nserver.js\n we update the collections in \n/api-sessions/remove-user\n:\n\n\n\napp.post('/api-sessions/remove-user', function (req, res) {\n\n    // ... check the user is logged with req.session and continue ...\n\n    // Retrieve params from POST body\n    var sessionName = req.body.sessionName;\n    var token = req.body.token;\n\n    // If the session exists\n    if (mapSessions[sessionName] \n mapSessionNamesTokens[sessionName]) {\n        var tokens = mapSessionNamesTokens[sessionName];\n        var index = tokens.indexOf(token);\n\n        // If the token exists\n        if (index !== -1) {\n            // Token removed\n            tokens.splice(index, 1);\n        } else {\n            res.status(500).send('Problems in the app server: the TOKEN wasn\\'t valid');\n        }\n        if (tokens.length == 0) {\n            // Last user left: session must be removed\n            delete mapSessions[sessionName];\n        }\n        res.status(200).send();\n    } else {\n        res.status(500).send('Problems in the app server: the SESSION does not exist');\n    }\n});\n\n\n\n\nWhen the last user leaves the session \ndelete mapSessions[sessionName]\n will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.\n\n\n\n\n\n\nAt this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches: \nyou can implement your frontend and your backend as you want\n.\n\n\nThe only actual requirements are getting a valid \ntoken\n from  \nopenvidu-server\n (by using \nopenvidu-java-client\n, \nopenvidu-node-client\n or the \nREST API\n) and use it in \nopenvidu-browser\n to connect your clients to the sessions with \nSession.connect(token)\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-js-node"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#openvidu-js-node", 
            "text": "Check it on GitHub  A secure OpenVidu sample app with a Node backend and a SPA frontend. It makes use of  openvidu-node-client  to connect to OpenVidu Server. With regard to the use of OpenVidu, it is identical to  openvidu-mvc-node . This tutorial is intended for developers who feel more comfortable with a SPA (Single Page Application) architecture for their frontends.", 
            "title": "openvidu-js-node"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the modules displayed on the image above.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-node-client : server SDK for Node. Quick alternative to REST API  openvidu-server : application to control Kurento Media Server  Kurento Media Server : handles low level operations of media flow transmissions", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need  node  to execute the app. You can install them with:  sudo curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs  3) Run the tutorial with the following commands. They will install the NPM dependencies and will execute  server.js  server passing two arguments: \"localhost:4443\" as the URL where  openvidu-server  will be listening and \"MY_SECRET\" as the secret share with it:  cd openvidu-tutorials/openvidu-js-node\nnpm install\nnode server.js localhost:4443 MY_SECRET  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  https://localhost:5000  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#understanding-the-code", 
            "text": "This is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Node backend with  express . OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive  express-session  API.    Backend : node server   server.js  : single file which handles all operations of server     Frontend : Plain JS/HTML/CSS files ( /public  folder)   openvidu-browser-VERSION.js  : openvidu-browser library. You don't have to manipulate this file.  app.js  : sample application main JavaScritp file, which makes use of  openvidu-browser-VERSION.js .   index.html  : HTML code for the form to login, the form to connect to a video-call and for the video-call itself. It has two links to both JavaScript files:  script src=\"openvidu-browser-VERSION.js\" /script  script src=\"app.js\" /script     style.css : some CSS classes to style  index.html .      Let's describe the code following this scenario: a user logs into the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#1-user-logs-in", 
            "text": "We have implemented a method for making HTTP POST requests to the backend, as we will need to make at least three of them: one for logging in, one for getting a token from openvidu-server and one for letting know our backend when any user leaves the video-call. The header of the method looks like this:  function httpPostRequest(url, body, errorMsg, callback)  Where  url  is the path of the POST operation,  body  the object to send as data,  errorMsg  the output error message if something goes wrong and  callback  the function to execute in case of success. As mentioned above, we need to call this method three times for each user that LOGS IN \ud83e\udc52 CONNECTS TO A VIDEO-CALL \ud83e\udc52 LEAVES THE VIDEO-CALL.  index.html  will first show a form to log in:  \n     app.js  sends a POST request to \"/api-login/login\" passing the username and the password retrieved from the HTML form whenever \"Log in\" button is clicked:  function logIn() {\n    var user = $( #user ).val(); // Username\n    var pass = $( #pass ).val(); // Password\n\n    httpPostRequest(\n        'api-login/login',\n        {user: user, pass: pass},\n        'Login WRONG',\n        (response) =  {\n            // HTML shows logged-in page ...\n        }\n    );\n}  server.js  at  /api-login/login  checks the params are correct and if so sets an active session for the newly logged user (adding a  loggedUser  property with its username in the  req.session  object):  app.post('/api-login/login', function (req, res) {\n\n    // Retrieve params from POST body\n    var user = req.body.user;\n    var pass = req.body.pass;\n\n    if (login(user, pass)) { // Correct user-pass\n        // Validate session and return OK\n        // Value stored in req.session allows us to identify the user in future requests\n        req.session.loggedUser = user;\n        res.status(200).send();\n    } else { // Wrong user-pass\n        // Invalidate session and return error\n        req.session.destroy();\n        res.status(401).send('User/Pass incorrect');\n    }\n});", 
            "title": "1) User logs in"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#2-user-connects-to-tutorial-video-call", 
            "text": "HTML will display now the user has logged a different form, asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field and press \"Join!\" button:  \n     app.js  will execute  joinSession()  method, which starts like this:  function joinSession() {\n    getToken((token) =  { ...  So the first thing to do here is to retrieve an OpenVidu  token  from our backend. Only when we have it available in the browser we will continue with the  join  operation. Let's see what  getToken()  looks like:  function getToken(callback) {\n    sessionName = $( #sessionName ).val(); // Video-call chosen by the user\n\n    httpPostRequest(\n        'api-sessions/get-token',\n        {sessionName: sessionName},\n        'Request of TOKEN gone WRONG:',\n        (response) =  {\n            token = response[0]; // Get token from response\n            console.warn('Request of TOKEN gone WELL (TOKEN:' + token + ')');\n            callback(token); // Continue the join operation\n        }\n    );\n}  Here is the second time we must call our  httpPostRequest()  method, sending the session we want to connect ( sessionName  parameter) and waiting to get a  token  as response. The interesting part here is in  server.js  controller at  /api-sessions/get-token . First of all there are some important attributes in this class we must mention:  // Environment variable: URL where our OpenVidu server is listening\nvar OPENVIDU_URL = process.argv[2];\n// Environment variable: secret shared with our OpenVidu server\nvar OPENVIDU_SECRET = process.argv[3];\n\n// Entrypoint to OpenVidu Node Client SDK\nvar OV = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\n\n// Collection to pair session names with OpenVidu Session objects\nvar mapSessions = {};\n// Collection to pair session names with tokens\nvar mapSessionNamesTokens = {};  Rest controller method begins retrieving the param send by the client, which in this case is the video-call name (\"TUTORIAL\"), as well as preparing a param we will need a little further on:  tokenOptions .  app.post('/api-sessions/get-token', function (req, res) {\n\n   // ... check the user is logged with req.session and continue ...\n\n    // The video-call to connect ( TUTORIAL )\n    var sessionName = req.body.sessionName;\n\n    // Role associated to this user\n    var role = users.find(u =  (u.user === req.session.loggedUser)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the req.session object on login\n    var serverData = JSON.stringify({serverData: req.session.loggedUser});\n\n    // Build tokenOptions object with the serverData and the role\n    var tokenOptions = {\n        data: serverData,\n        role: role\n    };  Just after that an  if-else  statement comes into play: does the session \"TUTORIAL\" already exist?  if (mapSessions[sessionName]) { ...  In this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the  else  branch:  else {\n    // New session\n    console.log('New session ' + sessionName);\n\n    // Create a new OpenVidu Session asynchronously\n    OV.createSession()\n        .then(session =  {\n            // Store the new Session in the collection of Sessions\n            mapSessions[sessionName] = session;\n            // Store a new empty array in the collection of tokens\n            mapSessionNamesTokens[sessionName] = [];\n\n            // Generate a new token asynchronously with the recently created tokenOptions\n            session.generateToken(tokenOptions)\n                .then(token =  {\n\n                    // Store the new token in the collection of tokens\n                    mapSessionNamesTokens[sessionName].push(token);\n\n                    // Return the Token to the client\n                    res.status(200).send({\n                        0: token\n                    });\n                })\n                .catch(error =  {\n                    console.error(error);\n                });\n        })\n        .catch(error =  {\n            console.error(error);\n        });\n}  We are almost there! Now in  app.js  we can init a new Session and connect to it with  token :  // --- 1) Get an OpenVidu object ---\n\nOV = new OpenVidu();\n\n// --- 2) Init a session ---\n\nsession = OV.initSession();\n\n// --- 3) Specify the actions when events take place in the session ---\n\n// On every new Stream received...\nsession.on('streamCreated', (event) =  {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', (event) =  {\n\n        // Add a new HTML element for the user's name and nickname over its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', (event) =  {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n// --- 4) Connect to the session passing the retrieved token and some more data from\n//        the client (in this case a JSON with the nickname chosen by the user) ---\n\nvar nickName = $( #nickName ).val();\nsession.connect(token, { clientData: nickName })\n    .then(() =  {\n\n        // --- 5) Set page layout for active call ---\n\n        var userName = $( #user ).val();\n        $('#session-title').text(sessionName);\n        $('#join').hide();\n        $('#session').show();\n\n\n        // Here we check somehow if the user has 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method is not recognized as 'PUBLIHSER' role by OpenVidu Server\n        if (isPublisher(userName)) {\n\n            // --- 6) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audioSource: undefined, // The source of audio. If undefined default microphone\n                videoSource: undefined, // The source of video. If undefined default webcam\n                publishAudio: true,     // Whether you want to start publishing with your audio unmuted or not\n                publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n                resolution: '640x480',  // The resolution of your video\n                frameRate: 30,          // The frame rate of your video\n                insertMode: 'APPEND',   // How the video is inserted in the target element 'video-container'\n                mirror: false           // Whether to mirror your local video or not\n            });\n\n            // --- 7) Specify the actions when events take place in our publisher ---\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', (event) =  {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 8) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    })\n    .catch(error =  {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    });  The user will now see its own video on the page. The connection to the session has completed!", 
            "title": "2) User connects to \"TUTORIAL\" video-call"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#3-another-user-connects-to-the-video-call", 
            "text": "The process would be exactly the same as before until  server.js  executes controller at  /api-sessions/get-token . Now session 'TUTORIAL' already exists, so in the  if-else  statement the  if  branch would be the one executed:  if (mapSessions[sessionName]) {\n    // Session already exists\n    console.log('Existing session ' + sessionName);\n\n    // Get the existing Session from the collection\n    var mySession = mapSessions[sessionName];\n\n    // Generate a new token asynchronously with the recently created tokenOptions\n    mySession.generateToken(tokenOptions)\n        .then(token =  {\n\n            // Store the new token in the collection of tokens\n            mapSessionNamesTokens[sessionName].push(token);\n\n            // Return the token to the client\n            res.status(200).send({\n                0: token\n            });\n        })\n        .catch(error =  {\n            console.error(error);\n        });\n}  The code executed in  app.js  would also be the same. After the  Session.publish()  method has been successful, both users will be seeing each other's video, as well as the username and nickname uppon it.", 
            "title": "3) Another user connects to the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-js-node/#4-users-leave-the-video-call", 
            "text": "After a while both users decide to leave the session. Apart from calling  leaveSession()  (and therefore  session.disconnect() ) to destroy the connection on OpenVidu Server, we need to run the last POST operation: we must let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens. To sum up,  session.disconnect()  updates our OpenVidu Server and the POST operation updates our application's backend.\nFor the POST operation, in  app.js  we run:  function removeUser() {\n    httpPostRequest(\n        'api-sessions/remove-user',\n        {sessionName: sessionName, token: token},\n        'User couldn\\'t be removed from session', \n        (response) =  {\n            console.warn( You have been removed from session   + sessionName);\n        }\n    );\n}  And in  server.js  we update the collections in  /api-sessions/remove-user :  \napp.post('/api-sessions/remove-user', function (req, res) {\n\n    // ... check the user is logged with req.session and continue ...\n\n    // Retrieve params from POST body\n    var sessionName = req.body.sessionName;\n    var token = req.body.token;\n\n    // If the session exists\n    if (mapSessions[sessionName]   mapSessionNamesTokens[sessionName]) {\n        var tokens = mapSessionNamesTokens[sessionName];\n        var index = tokens.indexOf(token);\n\n        // If the token exists\n        if (index !== -1) {\n            // Token removed\n            tokens.splice(index, 1);\n        } else {\n            res.status(500).send('Problems in the app server: the TOKEN wasn\\'t valid');\n        }\n        if (tokens.length == 0) {\n            // Last user left: session must be removed\n            delete mapSessions[sessionName];\n        }\n        res.status(200).send();\n    } else {\n        res.status(500).send('Problems in the app server: the SESSION does not exist');\n    }\n});  When the last user leaves the session  delete mapSessions[sessionName]  will be executed: this means the session is empty and that it has been closed in OpenVidu Server. All our Session objects and tokens associated to them will be invalidated.    At this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches:  you can implement your frontend and your backend as you want .  The only actual requirements are getting a valid  token  from   openvidu-server  (by using  openvidu-java-client ,  openvidu-node-client  or the  REST API ) and use it in  openvidu-browser  to connect your clients to the sessions with  Session.connect(token)     \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "4) Users leave the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/", 
            "text": "openvidu-mvc-node\n\n\n Check it on GitHub\n\n\nA secure OpenVidu sample app with a Node backend and a traditional MVC frontend. With regard to the use of OpenVidu, it is identical to \nopenvidu-js-node\n. This tutorial is intended for developers who feel more comfortable with MVC web architectures for their frontends. \nEmbedded JavaScript\n is the template engine of choice for this tutorial.\n\n\nUnderstanding this tutorial\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the modules displayed on the image above.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-node-client\n: server SDK for Node. Quick alternative to REST API\n\n\nopenvidu-server\n: application to control Kurento Media Server\n\n\nKurento Media Server\n: handles low level operations of media flow transmissions\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need \nnode\n and \nNPM\n to execute the app. You can install them with:\n\n\nsudo apt-get install nodejs\nsudo apt-get install npm\n\n\n\n\n3) Run the tutorial with the following commands. They will install the NPM dependencies and will execute \nserver.js\n server passing two arguments: \"localhost:4443\" as the URL where \nopenvidu-server\n will be listening and \"MY_SECRET\" as the secret share with it:\n\n\ncd openvidu-tutorials/openvidu-mvc-node\nnpm install\nnode server.js localhost:4443 MY_SECRET\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nhttps://localhost:5000\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Node backend built with \nexpress\n that serves HTML files with a MVC approach, building the templates with the help of \nEmbedded JavaScript\n.\n\n\nOpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive \nexpress-session\n API.\n\n\n\n\n\n\nBackend\n: node server\n\n\n\n\nserver.js\n : single file which handles all operations of server. It returns HTML templates as response to HTTP requests.\n\n\n\n\n\n\n\n\nFrontend templates\n: Pure JS/HTML/CSS files served by the backend, with \n.ejs\n extension to support Embedded JavaScript (\n/views\n folder)\n\n\n\n\nindex.ejs\n : template with the login form\n\n\ndashboard.ejs\n : template with the form to join a video-call\n\n\nsession.ejs\n : template of the video-call itself\n\n\n\n\n\n\n\n\nFrontend static files\n (\n/public\n folder)\n\n\n\n\nopenvidu-browser-VERSION.js\n : openvidu-browser library. You don't have to manipulate this file\n\n\nstyle.css\n : some CSS classes to style the templates\n\n\n\n\n\n\n\n\nLet's describe the code following this scenario: a user logs in to the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.\n\n\n\n\n1) User logs in\n\n\nAt path \n/\n a login form will be displayed:\n\n\n\n  \n\n\n\n\n\nThe form will execute a POST operation to path \n/dashboard\n whenever \"Log in\" button is clicked, passing the username and the password:\n\n\nform class=\nform-group jumbotron\n action=\n/dashboard\n method=\npost\n\n    \np\n\n        \nlabel\nUser\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\nuser\n required=\ntrue\n/input\n\n    \n/p\n\n    \np\n\n        \nlabel\nPass\n/label\n\n        \ninput class=\nform-control\n type=\npassword\n name=\npass\n required=\ntrue\n/input\n\n    \n/p\n\n    \np class=\ntext-center\n\n        \nbutton class=\nbtn btn-lg btn-info\n type=\nsubmit\nLog in\n/button\n\n    \n/p\n\n\n/form\n\n\n\n\n\nserver.js\n at \n/dashboard\n first checks if the user is already logged (maybe he has just refreshed \n/dashboard\n page), and if so it just redirects to the dashboard itself. If the user is actually logging in, the method checks that the params are correct and if so sets a new \nexpress-session\n for the newly logged user (adding a \nloggedUser\n property with its username in the \nreq.session\n object). Finally it returns \ndashboard.ejs\n template:\n\n\napp.post('/dashboard', dashboardController);\napp.get('/dashboard', dashboardController);\n\nfunction dashboardController(req, res) {\n\n    // Check if the user is already logged in\n    if (isLogged(req.session)) {\n        // User is already logged. Immediately return dashboard\n        user = req.session.loggedUser;\n        res.render('dashboard.ejs', {\n            user: user\n        });\n    } else {\n        // User wasn't logged and wants to\n\n        // Retrieve params from POST body\n        var user = req.body.user;\n        var pass = req.body.pass;\n\n        if (login(user, pass)) { // Correct user-pass\n            // Validate session and return OK \n            // Value stored in req.session allows us to identify the user in future requests\n            req.session.loggedUser = user;\n            res.render('dashboard.ejs', {\n                user: user\n            });\n        } else { // Wrong user-pass\n            // Invalidate session and return index template\n            req.session.destroy();\n            res.redirect('/');\n        }\n    }\n}\n\n\n\n\n\n\n2) User connects to \"TUTORIAL\" video-call\n\n\ndashboard.ejs\n template will display a form asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field:\n\n\n\n  \n\n\n\n\n\nThe form will execute a POST operation to path \n/session\n whenever \"Join!\" button is clicked, passing the nickname and the session name:\n\n\nform class=\nform-group\n action=\n/session\n method=\npost\n\n    \np\n\n        \nlabel\nParticipant\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\ndata\n required=\ntrue\n/input\n\n    \n/p\n\n    \np\n\n        \nlabel\nSession\n/label\n\n        \ninput class=\nform-control\n type=\ntext\n name=\nsessionname\n required=\ntrue\n/input\n\n    \n/p\n\n    \np class=\ntext-center\n\n        \nbutton class=\nbtn btn-lg btn-success\n type=\nsubmit\nJoin!\n/button\n\n    \n/p\n\n\n/form\n\n\n\n\n\nWhen \nserver.js\n receives a request at \n/session\n path is when things get interesting.\nFirst of all there are some important attributes in this class we must mention:\n\n\n// Environment variable: URL where our OpenVidu server is listening\nvar OPENVIDU_URL = process.argv[2];\n// Environment variable: secret shared with our OpenVidu server\nvar OPENVIDU_SECRET = process.argv[3];\n\n// OpenVidu object to ask openvidu-server for sessionId and token\nvar OV = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\n\n// Collection to pair session names and OpenVidu Session objects\nvar mapSessionNameSession = {};\n// Collection to pair sessionId's (identifiers of Session objects) and tokens\nvar mapSessionIdTokens = {};\n\n\n\n\nRest controller method receives both params sent by the client (whatever nickname the user has chosen and \"TUTORIAL\" as the sessionName). First it prepares a param we will need a little further on: \ntokenOptions\n.\n\n\napp.post('/session', (req, res) =\n {\n    // Check the user is logged ... \n\n    // The nickname sent by the client\n    var clientData = req.body.data;\n    // The video-call to connect (\nTUTORIAL\n)\n    var sessionName = req.body.sessionname;\n\n    // Role associated to this user\n    var role = users.find(u =\n (u.user === req.session.loggedUser)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the req.session object on login\n    var serverData = '{\nserverData\n: \n' + req.session.loggedUser + '\n}';\n\n    // Build tokenOptions object with the serverData and the role\n    var tokenOptions = new TokenOptions.Builder()\n        .data(serverData)\n        .role(role)\n        .build();\n\n\n\n\nJust after that an \nif-else\n statement comes into play: does the session \"TUTORIAL\" already exist? \n\n\nif (mapSessionNameSession[sessionName]) { ...\n\n\n\n\nIn this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the \nelse\n branch:\n\n\nelse { // New session: return a new sessionId and a new token\n\n    // Create a new OpenVidu Session\n    var mySession = OV.createSession();\n\n    // Get the sessionId asynchronously\n    mySession.getSessionId(function (sessionId) {\n\n        // Store the new Session in the collection of Sessions\n        mapSessionNameSession[sessionName] = mySession;\n        // Store a new empty array in the collection of tokens\n        mapSessionIdTokens[sessionId] = [];\n\n        // Generate a new token asynchronously with the recently created tokenOptions\n        mySession.generateToken(tokenOptions, function (token) {\n\n            // Store the new token in the collection of tokens\n            mapSessionIdTokens[sessionId].push(token);\n\n            // Return session template with all the needed attributes\n            res.render('session.ejs', {\n                sessionId: sessionId,\n                token: token,\n                nickName: clientData,\n                userName: req.session.loggedUser,\n                sessionName: sessionName\n            });\n        });\n    });\n}\n\n\n\n\nWe are almost there! Now in \nsession.ejs\n JavaScript code (preceded by a tag \nscript\n) we can init a new Session with \nsessionId\n and connect to it with \ntoken\n:\n\n\n// Get all the attributes from the template in EJS style\nvar sessionId = \n%- JSON.stringify(sessionId) %\n;\nvar token = \n%- JSON.stringify(token) %\n;\nvar nickName = \n%- JSON.stringify(nickName) %\n;\nvar userName = \n%- JSON.stringify(userName) %\n;\nvar sessionName = \n%- JSON.stringify(sessionName) %\n;\n\n\n\n\n// --- 1) Get an OpenVidu object and init a session with the retrieved sessionId ---\n\nvar OV = new OpenVidu();\nvar session = OV.initSession(sessionId);\n\n\n// --- 2) Specify the actions when events take place ---\n\n// On every new Stream received...\nsession.on('streamCreated', function (event) {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', function (event) {\n\n        // Add a new HTML element for the user's name and nickname just below its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', function (event) {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n\n// --- 3) Connect to the session passing the retrieved token and some more data from\n//         the client (in this case a JSON with the nickname chosen by the user) ---\n\nsession.connect(token, '{\nclientData\n: \n' + nickName + '\n}', function (error) {\n\n    // If the connection is successful, initialize a publisher and publish to the session\n    if (!err) {\n\n        // Here we check somehow if the user has at least 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method doesn't belong to a 'PUBLIHSER' role\n        if (isPublisher()) {\n\n            // --- 4) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audio: true,\n                video: true,\n                quality: 'MEDIUM'\n            });\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', function (event) {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 5) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    } else {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    }\n});\n\n\n\n\nThe user will now see its own video on the page. The connection to the session has completed!\n\n\n\n\n3) Another user connects to the video-call\n\n\nThe process would be exactly the same as before until \nserver.js\n executes controller at \n/api-sessions/get-sessionid-token\n. Now session 'TUTORIAL' already exists, so in the \nif-else\n statement the \nif\n branch would be the one executed:\n\n\nif (mapSessionNameSession[sessionName]) {\n    // Session already exists: return existing sessionId and a new token\n\n    // Get the existing Session from the collection\n    var mySession = mapSessionNameSession[sessionName];\n\n    // Generate a new token asynchronously with the recently created tokenOptions\n    mySession.generateToken(tokenOptions, function (token) {\n\n        // Get the existing sessionId\n        mySession.getSessionId(function (sessionId) {\n\n            // Store the new token in the collection of tokens\n            mapSessionIdTokens[sessionId].push(token);\n\n            // Return session template with all the needed attributes\n            res.render('session.ejs', {\n                sessionId: sessionId,\n                token: token,\n                nickName: clientData,\n                userName: req.session.loggedUser,\n                sessionName: sessionName\n            });\n        });\n    });\n}\n\n\n\n\nThe code executed in \nsession.ejs\n \n script \n tag would also be the same. After the \nSession.publish()\n method has been successful, both users will be seeing each other's video, as well as the username and the nickname below it.\n\n\n\n\n4) Users leave the video-call\n\n\nAfter a while both users decide to leave the session. Apart from calling \nsession.disconnect()\n (triggered in \nleaveSession()\n \nonclick\n method) to destroy the connection on openvidu-server, we need another POST operation to let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens.\n\n\nIn \nsession.ejs\n template the \"Leave session\" button actually performs a POST operation to path \n/leave-session\n with a hidden form. Notice that when the user clicks the submit button, a POST operation will be triggered but also the \nleaveSession()\n method. First updates our backend. Second updates our openvidu-server.\n\n\nform action=\n/leave-session\n method=\npost\n\n    \ninput style=\ndisplay:none\n name=\nsessionname\n value=\n%= sessionName %\n/input\n\n    \ninput style=\ndisplay:none\n name=\ntoken\n value=\n%= token %\n/input\n\n    \nbutton id=\nbuttonLeaveSession\n class=\nbtn btn-large btn-danger\n type=\nsubmit\n onclick=\nleaveSession()\n\n        Leave session\n/button\n\n\n/form\n\n\n\n\n\nIn \nserver.js\n we update the collections at \n/leave-session\n:\n\n\napp.post('/leave-session', function (req, res) {\n    // Check the user is logged ...\n\n    // Retrieve params from POST body\n    var sessionName = req.body.sessionname;\n    var token = req.body.token;\n\n    // If the session exists\n    var mySession = mapSessionNameSession[sessionName];\n    if (mySession) {\n        mySession.getSessionId(function (sessionId) {\n            var tokens = mapSessionIdTokens[sessionId];\n            if (tokens) {\n                var index = tokens.indexOf(token);\n\n                // If the token exists\n                if (index !== -1) {\n                    // Token removed!\n                    tokens.splice(index, 1);\n                } else {\n                    var msg = 'Problems in the app server: the TOKEN wasn\\'t valid';\n                    res.redirect('/dashboard');\n                }\n                if (mapSessionIdTokens[sessionId].length == 0) {\n                    // Last user left: session must be removed\n                    console.log(sessionName + ' empty!');\n                    delete mapSessionNameSession[sessionName];\n                }\n                res.redirect('/dashboard');\n            } else {\n                var msg = 'Problems in the app server: the SESSIONID wasn\\'t valid';\n                res.redirect('/dashboard');\n            }\n        });\n    } else {\n        var msg = 'Problems in the app server: the SESSION does not exist';\n        res.redirect('/dashboard');\n    }\n\n\n\n\nWhen the last user leaves the session \ndelete mapSessionNameSession[sessionName]\n will be executed: this means the session is empty and that it is going to be closed. The \nsessionId\n and all \ntoken\n params associated to it will be invalidated.\n\n\n\n\n\n\nAt this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches: \nyou can implement your frontend and your backend as you want\n. \n\n\nThe only actual requirements are getting \nsessionId\n and \ntoken\n params from  \nopenvidu-server\n (by using one of the available clients or with the REST API) and using them along with \nopenvidu-browser\n to connect your clients to the sessions.\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-mvc-node"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#openvidu-mvc-node", 
            "text": "Check it on GitHub  A secure OpenVidu sample app with a Node backend and a traditional MVC frontend. With regard to the use of OpenVidu, it is identical to  openvidu-js-node . This tutorial is intended for developers who feel more comfortable with MVC web architectures for their frontends.  Embedded JavaScript  is the template engine of choice for this tutorial.", 
            "title": "openvidu-mvc-node"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#understanding-this-tutorial", 
            "text": "OpenVidu is composed by the modules displayed on the image above.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-node-client : server SDK for Node. Quick alternative to REST API  openvidu-server : application to control Kurento Media Server  Kurento Media Server : handles low level operations of media flow transmissions", 
            "title": "Understanding this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need  node  and  NPM  to execute the app. You can install them with:  sudo apt-get install nodejs\nsudo apt-get install npm  3) Run the tutorial with the following commands. They will install the NPM dependencies and will execute  server.js  server passing two arguments: \"localhost:4443\" as the URL where  openvidu-server  will be listening and \"MY_SECRET\" as the secret share with it:  cd openvidu-tutorials/openvidu-mvc-node\nnpm install\nnode server.js localhost:4443 MY_SECRET  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  https://localhost:5000  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call. To test two users in the same computer, use a standard window and an incognito window.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#understanding-the-code", 
            "text": "This is a very basic web application with a pretty simple JS/HTML/CSS frontend and a straightforward Node backend built with  express  that serves HTML files with a MVC approach, building the templates with the help of  Embedded JavaScript .  OpenVidu assumes you can identify your users so you can tell which users can connect to which video-calls, and what role (and therefore what permissions) each one of them will have in the calls. You can do this as you prefer. Here our backend will manage the users and their sessions with the easy-to-use and non-intrusive  express-session  API.    Backend : node server   server.js  : single file which handles all operations of server. It returns HTML templates as response to HTTP requests.     Frontend templates : Pure JS/HTML/CSS files served by the backend, with  .ejs  extension to support Embedded JavaScript ( /views  folder)   index.ejs  : template with the login form  dashboard.ejs  : template with the form to join a video-call  session.ejs  : template of the video-call itself     Frontend static files  ( /public  folder)   openvidu-browser-VERSION.js  : openvidu-browser library. You don't have to manipulate this file  style.css  : some CSS classes to style the templates     Let's describe the code following this scenario: a user logs in to the app and connects to the video-call \"TUTORIAL\", where he publishes his webcam. A second user will connect to the same video-call just after that and publish its own webcam. Both of them will leave the call after a while.", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#1-user-logs-in", 
            "text": "At path  /  a login form will be displayed:  \n     The form will execute a POST operation to path  /dashboard  whenever \"Log in\" button is clicked, passing the username and the password:  form class= form-group jumbotron  action= /dashboard  method= post \n     p \n         label User /label \n         input class= form-control  type= text  name= user  required= true /input \n     /p \n     p \n         label Pass /label \n         input class= form-control  type= password  name= pass  required= true /input \n     /p \n     p class= text-center \n         button class= btn btn-lg btn-info  type= submit Log in /button \n     /p  /form   server.js  at  /dashboard  first checks if the user is already logged (maybe he has just refreshed  /dashboard  page), and if so it just redirects to the dashboard itself. If the user is actually logging in, the method checks that the params are correct and if so sets a new  express-session  for the newly logged user (adding a  loggedUser  property with its username in the  req.session  object). Finally it returns  dashboard.ejs  template:  app.post('/dashboard', dashboardController);\napp.get('/dashboard', dashboardController);\n\nfunction dashboardController(req, res) {\n\n    // Check if the user is already logged in\n    if (isLogged(req.session)) {\n        // User is already logged. Immediately return dashboard\n        user = req.session.loggedUser;\n        res.render('dashboard.ejs', {\n            user: user\n        });\n    } else {\n        // User wasn't logged and wants to\n\n        // Retrieve params from POST body\n        var user = req.body.user;\n        var pass = req.body.pass;\n\n        if (login(user, pass)) { // Correct user-pass\n            // Validate session and return OK \n            // Value stored in req.session allows us to identify the user in future requests\n            req.session.loggedUser = user;\n            res.render('dashboard.ejs', {\n                user: user\n            });\n        } else { // Wrong user-pass\n            // Invalidate session and return index template\n            req.session.destroy();\n            res.redirect('/');\n        }\n    }\n}", 
            "title": "1) User logs in"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#2-user-connects-to-tutorial-video-call", 
            "text": "dashboard.ejs  template will display a form asking for the video-call to connect and the nickname the user wants to have in it. So our 'publisher1' user would write TUTORIAL in \"Session\" field:  \n     The form will execute a POST operation to path  /session  whenever \"Join!\" button is clicked, passing the nickname and the session name:  form class= form-group  action= /session  method= post \n     p \n         label Participant /label \n         input class= form-control  type= text  name= data  required= true /input \n     /p \n     p \n         label Session /label \n         input class= form-control  type= text  name= sessionname  required= true /input \n     /p \n     p class= text-center \n         button class= btn btn-lg btn-success  type= submit Join! /button \n     /p  /form   When  server.js  receives a request at  /session  path is when things get interesting.\nFirst of all there are some important attributes in this class we must mention:  // Environment variable: URL where our OpenVidu server is listening\nvar OPENVIDU_URL = process.argv[2];\n// Environment variable: secret shared with our OpenVidu server\nvar OPENVIDU_SECRET = process.argv[3];\n\n// OpenVidu object to ask openvidu-server for sessionId and token\nvar OV = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\n\n// Collection to pair session names and OpenVidu Session objects\nvar mapSessionNameSession = {};\n// Collection to pair sessionId's (identifiers of Session objects) and tokens\nvar mapSessionIdTokens = {};  Rest controller method receives both params sent by the client (whatever nickname the user has chosen and \"TUTORIAL\" as the sessionName). First it prepares a param we will need a little further on:  tokenOptions .  app.post('/session', (req, res) =  {\n    // Check the user is logged ... \n\n    // The nickname sent by the client\n    var clientData = req.body.data;\n    // The video-call to connect ( TUTORIAL )\n    var sessionName = req.body.sessionname;\n\n    // Role associated to this user\n    var role = users.find(u =  (u.user === req.session.loggedUser)).role;\n\n    // Optional data to be passed to other users when this user connects to the video-call\n    // In this case, a JSON with the value we stored in the req.session object on login\n    var serverData = '{ serverData :  ' + req.session.loggedUser + ' }';\n\n    // Build tokenOptions object with the serverData and the role\n    var tokenOptions = new TokenOptions.Builder()\n        .data(serverData)\n        .role(role)\n        .build();  Just after that an  if-else  statement comes into play: does the session \"TUTORIAL\" already exist?   if (mapSessionNameSession[sessionName]) { ...  In this case it doesn't because 'publisher1' is the first user connecting to it. So we focus on the  else  branch:  else { // New session: return a new sessionId and a new token\n\n    // Create a new OpenVidu Session\n    var mySession = OV.createSession();\n\n    // Get the sessionId asynchronously\n    mySession.getSessionId(function (sessionId) {\n\n        // Store the new Session in the collection of Sessions\n        mapSessionNameSession[sessionName] = mySession;\n        // Store a new empty array in the collection of tokens\n        mapSessionIdTokens[sessionId] = [];\n\n        // Generate a new token asynchronously with the recently created tokenOptions\n        mySession.generateToken(tokenOptions, function (token) {\n\n            // Store the new token in the collection of tokens\n            mapSessionIdTokens[sessionId].push(token);\n\n            // Return session template with all the needed attributes\n            res.render('session.ejs', {\n                sessionId: sessionId,\n                token: token,\n                nickName: clientData,\n                userName: req.session.loggedUser,\n                sessionName: sessionName\n            });\n        });\n    });\n}  We are almost there! Now in  session.ejs  JavaScript code (preceded by a tag  script ) we can init a new Session with  sessionId  and connect to it with  token :  // Get all the attributes from the template in EJS style\nvar sessionId =  %- JSON.stringify(sessionId) % ;\nvar token =  %- JSON.stringify(token) % ;\nvar nickName =  %- JSON.stringify(nickName) % ;\nvar userName =  %- JSON.stringify(userName) % ;\nvar sessionName =  %- JSON.stringify(sessionName) % ;  // --- 1) Get an OpenVidu object and init a session with the retrieved sessionId ---\n\nvar OV = new OpenVidu();\nvar session = OV.initSession(sessionId);\n\n\n// --- 2) Specify the actions when events take place ---\n\n// On every new Stream received...\nsession.on('streamCreated', function (event) {\n\n    // Subscribe to the Stream to receive it\n    // HTML video will be appended to element with 'video-container' id\n    var subscriber = session.subscribe(event.stream, 'video-container');\n\n    // When the HTML video has been appended to DOM...\n    subscriber.on('videoElementCreated', function (event) {\n\n        // Add a new HTML element for the user's name and nickname just below its video\n        appendUserData(event.element, subscriber.stream.connection);\n    });\n});\n\n// On every Stream destroyed...\nsession.on('streamDestroyed', function (event) {\n    // Delete the HTML element with the user's name and nickname\n    removeUserData(event.stream.connection);\n});\n\n\n// --- 3) Connect to the session passing the retrieved token and some more data from\n//         the client (in this case a JSON with the nickname chosen by the user) ---\n\nsession.connect(token, '{ clientData :  ' + nickName + ' }', function (error) {\n\n    // If the connection is successful, initialize a publisher and publish to the session\n    if (!err) {\n\n        // Here we check somehow if the user has at least 'PUBLISHER' role before\n        // trying to publish its stream. Even if someone modified the client's code and\n        // published the stream, it wouldn't work if the token sent in Session.connect\n        // method doesn't belong to a 'PUBLIHSER' role\n        if (isPublisher()) {\n\n            // --- 4) Get your own camera stream ---\n\n            var publisher = OV.initPublisher('video-container', {\n                audio: true,\n                video: true,\n                quality: 'MEDIUM'\n            });\n\n            // When our HTML video has been added to DOM...\n            publisher.on('videoElementCreated', function (event) {\n                // Init the main video with ours and append our data\n                var userData = {\n                    nickName: nickName,\n                    userName: userName\n                };\n                initMainVideo(event.element, userData);\n                appendUserData(event.element, userData);\n                $(event.element).prop('muted', true); // Mute local video\n            });\n\n\n            // --- 5) Publish your stream ---\n\n            session.publish(publisher);\n\n        } else {\n            console.warn('You don\\'t have permissions to publish');\n            initMainVideoThumbnail(); // Show SUBSCRIBER message in main video\n        }\n    } else {\n        console.warn('There was an error connecting to the session:', error.code, error.message);\n    }\n});  The user will now see its own video on the page. The connection to the session has completed!", 
            "title": "2) User connects to \"TUTORIAL\" video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#3-another-user-connects-to-the-video-call", 
            "text": "The process would be exactly the same as before until  server.js  executes controller at  /api-sessions/get-sessionid-token . Now session 'TUTORIAL' already exists, so in the  if-else  statement the  if  branch would be the one executed:  if (mapSessionNameSession[sessionName]) {\n    // Session already exists: return existing sessionId and a new token\n\n    // Get the existing Session from the collection\n    var mySession = mapSessionNameSession[sessionName];\n\n    // Generate a new token asynchronously with the recently created tokenOptions\n    mySession.generateToken(tokenOptions, function (token) {\n\n        // Get the existing sessionId\n        mySession.getSessionId(function (sessionId) {\n\n            // Store the new token in the collection of tokens\n            mapSessionIdTokens[sessionId].push(token);\n\n            // Return session template with all the needed attributes\n            res.render('session.ejs', {\n                sessionId: sessionId,\n                token: token,\n                nickName: clientData,\n                userName: req.session.loggedUser,\n                sessionName: sessionName\n            });\n        });\n    });\n}  The code executed in  session.ejs    script   tag would also be the same. After the  Session.publish()  method has been successful, both users will be seeing each other's video, as well as the username and the nickname below it.", 
            "title": "3) Another user connects to the video-call"
        }, 
        {
            "location": "/tutorials/openvidu-mvc-node/#4-users-leave-the-video-call", 
            "text": "After a while both users decide to leave the session. Apart from calling  session.disconnect()  (triggered in  leaveSession()   onclick  method) to destroy the connection on openvidu-server, we need another POST operation to let the backend know that certain user has left the session so it can update the collections with the active sessions and tokens.  In  session.ejs  template the \"Leave session\" button actually performs a POST operation to path  /leave-session  with a hidden form. Notice that when the user clicks the submit button, a POST operation will be triggered but also the  leaveSession()  method. First updates our backend. Second updates our openvidu-server.  form action= /leave-session  method= post \n     input style= display:none  name= sessionname  value= %= sessionName % /input \n     input style= display:none  name= token  value= %= token % /input \n     button id= buttonLeaveSession  class= btn btn-large btn-danger  type= submit  onclick= leaveSession() \n        Leave session /button  /form   In  server.js  we update the collections at  /leave-session :  app.post('/leave-session', function (req, res) {\n    // Check the user is logged ...\n\n    // Retrieve params from POST body\n    var sessionName = req.body.sessionname;\n    var token = req.body.token;\n\n    // If the session exists\n    var mySession = mapSessionNameSession[sessionName];\n    if (mySession) {\n        mySession.getSessionId(function (sessionId) {\n            var tokens = mapSessionIdTokens[sessionId];\n            if (tokens) {\n                var index = tokens.indexOf(token);\n\n                // If the token exists\n                if (index !== -1) {\n                    // Token removed!\n                    tokens.splice(index, 1);\n                } else {\n                    var msg = 'Problems in the app server: the TOKEN wasn\\'t valid';\n                    res.redirect('/dashboard');\n                }\n                if (mapSessionIdTokens[sessionId].length == 0) {\n                    // Last user left: session must be removed\n                    console.log(sessionName + ' empty!');\n                    delete mapSessionNameSession[sessionName];\n                }\n                res.redirect('/dashboard');\n            } else {\n                var msg = 'Problems in the app server: the SESSIONID wasn\\'t valid';\n                res.redirect('/dashboard');\n            }\n        });\n    } else {\n        var msg = 'Problems in the app server: the SESSION does not exist';\n        res.redirect('/dashboard');\n    }  When the last user leaves the session  delete mapSessionNameSession[sessionName]  will be executed: this means the session is empty and that it is going to be closed. The  sessionId  and all  token  params associated to it will be invalidated.    At this point we have covered all the important code from the tutorial. With this scenario we have seen the most common use-case, but you can modify whatever you want to suit your needs. And remember that this is just one of the many possible approaches:  you can implement your frontend and your backend as you want .   The only actual requirements are getting  sessionId  and  token  params from   openvidu-server  (by using one of the available clients or with the REST API) and using them along with  openvidu-browser  to connect your clients to the sessions.     \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "4) Users leave the video-call"
        }, 
        {
            "location": "/demos/openvidu-getaroom/", 
            "text": "openvidu-getaroom\n\n\n Check it on GitHub\n\n\nOpenVidu-Getaroom demo, \nbuilt with Vanilla JS, \n allows users to connect to a room and share the link with others, so they can connect to it straight away just by visiting that link. It is a frontend-only application and it makes use of OpenVidu the same way \nopenvidu-insecure-js\n does.\n\n\n\n  \n\n\n\n\n\nOpenVidu is composed by the three modules displayed on the image above in its insecure version.\n\n\n\n\nopenvidu-browser\n: JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients\n\n\nopenvidu-server\n: Java application that controls Kurento Media Server\n\n\nKurento Media Server\n: server that handles low level operations of media flows transmission\n\n\n\n\nRunning this tutorial\n\n\n1) Clone the repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu-tutorials.git\n\n\n\n\n2) You will need an http web server installed in your development computer to execute the sample application. If you have \nnode.js\n installed, you can use \nhttp-server\n to serve application files. It can be installed with:\n\n\nnpm install -g http-server\n\n\n\n\n3) Run the tutorial:\n\n\nhttp-server openvidu-tutorials/openvidu-getaroom/web\n\n\n\n\n4) \nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n5) Go to \nlocalhost:8080\n to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of \nopenvidu-server\n when you first try to join a video-call.\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nUnderstanding the code\n\n\nThis application is very simple. It has only 4 files:\n\n\n\n\nopenvidu-browser-VERSION.js\n: openvidu-browser library. You don't have to manipulate this file. \n\n\napp.js\n: sample application main JavaScritp file, which makes use of \nopenvidu-browser-VERSION.js\n. You can manipulate this file to suit your needs.\n\n\n\n\nindex.html\n: HTML code for the welcome page to join a new room and for the room itself. You can manipulate this file to suit your needs. It has two links to both JavaScript files: \n\n\nscript src=\"openvidu-browser-VERSION.js.js\"\n/script\n\n\nscript src=\"app.js\"\n/script\n\n\n\n\n\n\n\n\nstyle.css\n: some CSS classes to style \nindex.html\n. You can manipulate this file to suit your needs. \nindex.html\n uses also Bootstrap as its main style framework.\n\n\n\n\n\n\nDown below we will describe the most important code snippets in \napp.js\n:\n\n\n\n\nDeclaration of variables\n\n\nWe will need some variables accesible from differents methods\n\n\nvar OV;                     // OpenVidu object to initialize a session\nvar session;                // Session object where the user will connect\nvar publisher;              // Publisher object which the user will publish\nvar sessionId;              // Unique identifier of the session\nvar audioEnabled = true;    // True if the audio track of publisher is active\nvar videoEnabled = true;    // True if the video track of publisher is active\nvar numOfVideos = 0;        // Keeps track of the number of videos that are being shown\n\n\n\n\n\n\nWindow callbacks\n\n\nOn \nload\n we will check if the user is connecting to an existing room or to a new one depending on the browser's location, on \nbeforeunload\n we will disconnect the user from the room\n\n\n// Check if the URL already has a room\nwindow.addEventListener('load', function () {\n    sessionId = window.location.hash.slice(1); // For 'https://myurl/#roomId', sessionId would be 'roomId'\n    if (sessionId) {\n        // The URL has a session id. Join the room right away\n        console.log(\nJoining to room \n + sessionId);\n        showSessionHideJoin();\n        joinRoom();\n    } else {\n        // The URL has not a session id. Show welcome page\n        showJoinHideSession();\n    }\n});\n\n// Disconnect participant on browser's window closed\nwindow.addEventListener('beforeunload', function () {\n    if (session) session.disconnect();\n});\n\n\n\n\n\n\njoinRoom\n method\n\n\nHere we initialize our session and set the events we need for the desired behaviuor. Then we connect to it and finally publish our own webcam to the session.\n\n\nfunction joinRoom() {\n\n    if (!sessionId) {\n        // If the user is joining to a new room\n        sessionId = randomString();\n    }\n\n    // --- 1) Get an OpenVidu object ---\n\n    OV = new OpenVidu();\n\n    // --- 2) Init a session ---\n\n    session = OV.initSession();\n\n\n    // --- 3) Specify the actions when events take place in the session ---\n\n    // On every new Stream received...\n    session.on('streamCreated', function (event) {\n        // Subscribe to the Stream to receive it. HTML video will be appended to element with 'subscriber' id\n        var subscriber = session.subscribe(event.stream, 'videos');\n        // When the new video is added to DOM, update the page layout to fit one more participant\n        subscriber.on('videoElementCreated', function (event) {\n            numOfVideos++;\n            updateLayout();\n        });\n    });\n\n    // On every new Stream destroyed...\n    session.on('streamDestroyed', function (event) {\n        // Update the page layout\n        numOfVideos--;\n        updateLayout();\n    });\n\n\n    // --- 4) Connect to the session with a valid user token ---\n\n    // 'getToken' method is simulating what your server-side should do.\n    // 'token' parameter should be retrieved and returned by your own backend\n    getToken(sessionId).then(token =\n {\n\n        // Connect with the token\n        session.connect(token)\n            .then(() =\n {\n\n                // --- 5) Set page layout for active call ---\n\n                // Update the URL shown in the browser's navigation bar to show the session id\n                var path = (location.pathname.slice(-1) == \n/\n ? location.pathname : location.pathname + \n/\n);\n                window.history.pushState(\n, \n, path + '#' + sessionId);\n\n                // Auxiliary methods to show the session's view\n                showSessionHideJoin();\n                initializeSessionView();\n\n                // --- 6) Get your own camera stream with the desired properties ---\n\n                publisher = OV.initPublisher('publisher', {\n                    audioSource: undefined, // The source of audio. If undefined default audio input\n                    videoSource: undefined, // The source of video. If undefined default video input\n                    publishAudio: true,     // Whether to start publishing with your audio unmuted or not\n                    publishVideo: true,     // Whether to start publishing with your video enabled or not\n                    resolution: '640x480',  // The resolution of your video\n                    frameRate: 30,          // The frame rate of your video\n                    insertMode: 'APPEND',   // How the video is inserted in target element 'video-container'\n                    mirror: true            // Whether to mirror your local video or not\n                });\n\n                // --- 7) Specify the actions when events take place in our publisher ---\n\n                // When our HTML video has been added to DOM...\n                publisher.on('videoElementCreated', function (event) {\n                    // When your own video is added to DOM, update the page layout to fit it\n                    numOfVideos++;\n                    updateLayout();\n                    $(event.element).prop('muted', true); // Mute local video to avoid feedback\n                });\n\n                // --- 8) Publish your stream ---\n\n                session.publish(publisher);\n            })\n            .catch(error =\n {\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    });\n}\n\n\n\n\n\n\nleaveRoom\n method\n\n\nfunction leaveRoom() {\n\n    // --- 9) Leave the session by calling 'disconnect' method over the Session object ---\n\n    session.disconnect();\n\n    // Back to welcome page\n    window.location.href = window.location.origin + window.location.pathname;\n}\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-getaroom"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#openvidu-getaroom", 
            "text": "Check it on GitHub  OpenVidu-Getaroom demo,  built with Vanilla JS,   allows users to connect to a room and share the link with others, so they can connect to it straight away just by visiting that link. It is a frontend-only application and it makes use of OpenVidu the same way  openvidu-insecure-js  does.  \n     OpenVidu is composed by the three modules displayed on the image above in its insecure version.   openvidu-browser : JavaScript library for the browser. It allows you to manage your video-calls straight away from your clients  openvidu-server : Java application that controls Kurento Media Server  Kurento Media Server : server that handles low level operations of media flows transmission", 
            "title": "openvidu-getaroom"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#running-this-tutorial", 
            "text": "1) Clone the repo:  git clone https://github.com/OpenVidu/openvidu-tutorials.git  2) You will need an http web server installed in your development computer to execute the sample application. If you have  node.js  installed, you can use  http-server  to serve application files. It can be installed with:  npm install -g http-server  3) Run the tutorial:  http-server openvidu-tutorials/openvidu-getaroom/web  4)  openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  5) Go to  localhost:8080  to test the app once the server is running. The first time you use the docker container, an alert message will suggest you accept the self-signed certificate of  openvidu-server  when you first try to join a video-call.    If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ", 
            "title": "Running this tutorial"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#understanding-the-code", 
            "text": "This application is very simple. It has only 4 files:   openvidu-browser-VERSION.js : openvidu-browser library. You don't have to manipulate this file.   app.js : sample application main JavaScritp file, which makes use of  openvidu-browser-VERSION.js . You can manipulate this file to suit your needs.   index.html : HTML code for the welcome page to join a new room and for the room itself. You can manipulate this file to suit your needs. It has two links to both JavaScript files:   script src=\"openvidu-browser-VERSION.js.js\" /script  script src=\"app.js\" /script     style.css : some CSS classes to style  index.html . You can manipulate this file to suit your needs.  index.html  uses also Bootstrap as its main style framework.    Down below we will describe the most important code snippets in  app.js :", 
            "title": "Understanding the code"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#declaration-of-variables", 
            "text": "We will need some variables accesible from differents methods  var OV;                     // OpenVidu object to initialize a session\nvar session;                // Session object where the user will connect\nvar publisher;              // Publisher object which the user will publish\nvar sessionId;              // Unique identifier of the session\nvar audioEnabled = true;    // True if the audio track of publisher is active\nvar videoEnabled = true;    // True if the video track of publisher is active\nvar numOfVideos = 0;        // Keeps track of the number of videos that are being shown", 
            "title": "Declaration of variables"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#window-callbacks", 
            "text": "On  load  we will check if the user is connecting to an existing room or to a new one depending on the browser's location, on  beforeunload  we will disconnect the user from the room  // Check if the URL already has a room\nwindow.addEventListener('load', function () {\n    sessionId = window.location.hash.slice(1); // For 'https://myurl/#roomId', sessionId would be 'roomId'\n    if (sessionId) {\n        // The URL has a session id. Join the room right away\n        console.log( Joining to room   + sessionId);\n        showSessionHideJoin();\n        joinRoom();\n    } else {\n        // The URL has not a session id. Show welcome page\n        showJoinHideSession();\n    }\n});\n\n// Disconnect participant on browser's window closed\nwindow.addEventListener('beforeunload', function () {\n    if (session) session.disconnect();\n});", 
            "title": "Window callbacks"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#joinroom-method", 
            "text": "Here we initialize our session and set the events we need for the desired behaviuor. Then we connect to it and finally publish our own webcam to the session.  function joinRoom() {\n\n    if (!sessionId) {\n        // If the user is joining to a new room\n        sessionId = randomString();\n    }\n\n    // --- 1) Get an OpenVidu object ---\n\n    OV = new OpenVidu();\n\n    // --- 2) Init a session ---\n\n    session = OV.initSession();\n\n\n    // --- 3) Specify the actions when events take place in the session ---\n\n    // On every new Stream received...\n    session.on('streamCreated', function (event) {\n        // Subscribe to the Stream to receive it. HTML video will be appended to element with 'subscriber' id\n        var subscriber = session.subscribe(event.stream, 'videos');\n        // When the new video is added to DOM, update the page layout to fit one more participant\n        subscriber.on('videoElementCreated', function (event) {\n            numOfVideos++;\n            updateLayout();\n        });\n    });\n\n    // On every new Stream destroyed...\n    session.on('streamDestroyed', function (event) {\n        // Update the page layout\n        numOfVideos--;\n        updateLayout();\n    });\n\n\n    // --- 4) Connect to the session with a valid user token ---\n\n    // 'getToken' method is simulating what your server-side should do.\n    // 'token' parameter should be retrieved and returned by your own backend\n    getToken(sessionId).then(token =  {\n\n        // Connect with the token\n        session.connect(token)\n            .then(() =  {\n\n                // --- 5) Set page layout for active call ---\n\n                // Update the URL shown in the browser's navigation bar to show the session id\n                var path = (location.pathname.slice(-1) ==  /  ? location.pathname : location.pathname +  / );\n                window.history.pushState( ,  , path + '#' + sessionId);\n\n                // Auxiliary methods to show the session's view\n                showSessionHideJoin();\n                initializeSessionView();\n\n                // --- 6) Get your own camera stream with the desired properties ---\n\n                publisher = OV.initPublisher('publisher', {\n                    audioSource: undefined, // The source of audio. If undefined default audio input\n                    videoSource: undefined, // The source of video. If undefined default video input\n                    publishAudio: true,     // Whether to start publishing with your audio unmuted or not\n                    publishVideo: true,     // Whether to start publishing with your video enabled or not\n                    resolution: '640x480',  // The resolution of your video\n                    frameRate: 30,          // The frame rate of your video\n                    insertMode: 'APPEND',   // How the video is inserted in target element 'video-container'\n                    mirror: true            // Whether to mirror your local video or not\n                });\n\n                // --- 7) Specify the actions when events take place in our publisher ---\n\n                // When our HTML video has been added to DOM...\n                publisher.on('videoElementCreated', function (event) {\n                    // When your own video is added to DOM, update the page layout to fit it\n                    numOfVideos++;\n                    updateLayout();\n                    $(event.element).prop('muted', true); // Mute local video to avoid feedback\n                });\n\n                // --- 8) Publish your stream ---\n\n                session.publish(publisher);\n            })\n            .catch(error =  {\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    });\n}", 
            "title": "joinRoom method"
        }, 
        {
            "location": "/demos/openvidu-getaroom/#leaveroom-method", 
            "text": "function leaveRoom() {\n\n    // --- 9) Leave the session by calling 'disconnect' method over the Session object ---\n\n    session.disconnect();\n\n    // Back to welcome page\n    window.location.href = window.location.origin + window.location.pathname;\n}    \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "leaveRoom method"
        }, 
        {
            "location": "/demos/openvidu-call/", 
            "text": "openvidu-call\n\n\nOpenVidu Call demo,\n built with Angular 6\n,  is allows users to make videoconferences of the easiest way, only sharing the room name with others. It is a frontend-only application and it makes use of OpenVidu the same way \nopenvidu-insecure-js\n does.\n\n\nOpenVidu-Call is composed by four components displayed on the image below.\n\n\n\n\n\n  \n\n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \nLogin Component\n\n        \nThis component allows you to set the video room name and login in that room. That room name can be shared with whomever the user wants to join the videoconference.\n\n    \n\n\n\n\n\n\n\n    \n\n        \nVideo-room Component\n\n        \nThis is the main component of \nOpenVidu-Call\n  due to it allows you to establish a connection with your video roommates. The Video-room Component would not be able to establish this connection without the help of OpenVidu Service. This component allows the user to mute the microphone, unpublish the webcam, share the screen, open the chat and leave the session.\n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\n\n    \n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \nChat Component\n\n        \nThis component provides to Video-room Component a chatting system for allow to users to type each others.\n        TThe OpenVidu chat is the most intuitive system for the user will can communicate with other users.\n        \n\n    \n\n\n\n\n\n\n\n    \n\n        \nStream Component\n\n        \n With OpenVidu Layout, this component is the responsible of display the video stream of each user on the nice way. On the right, we can see four streams displayed in a same videoconference.\n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n\nRunning this demo\n\n\n\n\n\n\nIf you are using \nWindows\n, read this \nFAQ\n to properly run the tutorial\n\n\nTo learn \nsome tips\n to develop with OpenVidu, check this \nFAQ\n\n\n\n\n\n\nClone the repo:\n\n\n\n\ngit clone https://github.com/OpenVidu/openvidu-call.git\n\n\n\n\n\n\nYou will need node, NPM and angular-cli to execute the app. You can install them with:\n\n\n\n\nsudo apt-get update\nsudo curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -\nsudo apt-get install -y nodejs\nsudo npm install -g @angular/cli\n\n\n\n\n\n\nopenvidu-server\n and \nKurento Media Server\n must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need \nDocker CE\n):\n\n\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\n\n\n\nInstall NPM dependencies of frontend:\n\n\n\n\ncd openvidu-call/front/openvidu-call\nnpm install\n\n\n\n\n\n\nLaunch the server:\n\n\n\n\nng serve --open\n\n\n\n\n\n\n\n\n\n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "openvidu-call"
        }, 
        {
            "location": "/demos/openvidu-call/#openvidu-call", 
            "text": "OpenVidu Call demo,  built with Angular 6 ,  is allows users to make videoconferences of the easiest way, only sharing the room name with others. It is a frontend-only application and it makes use of OpenVidu the same way  openvidu-insecure-js  does.  OpenVidu-Call is composed by four components displayed on the image below.   \n      \n     \n         \n             \n         \n     \n     \n         Login Component \n         This component allows you to set the video room name and login in that room. That room name can be shared with whomever the user wants to join the videoconference. \n        \n     \n         Video-room Component \n         This is the main component of  OpenVidu-Call   due to it allows you to establish a connection with your video roommates. The Video-room Component would not be able to establish this connection without the help of OpenVidu Service. This component allows the user to mute the microphone, unpublish the webcam, share the screen, open the chat and leave the session. \n     \n     \n         \n             \n         \n        \n     \n         \n             \n         \n     \n     \n         Chat Component \n         This component provides to Video-room Component a chatting system for allow to users to type each others.\n        TThe OpenVidu chat is the most intuitive system for the user will can communicate with other users.\n         \n        \n     \n         Stream Component \n          With OpenVidu Layout, this component is the responsible of display the video stream of each user on the nice way. On the right, we can see four streams displayed in a same videoconference.", 
            "title": "openvidu-call"
        }, 
        {
            "location": "/demos/openvidu-call/#running-this-demo", 
            "text": "If you are using  Windows , read this  FAQ  to properly run the tutorial  To learn  some tips  to develop with OpenVidu, check this  FAQ    Clone the repo:   git clone https://github.com/OpenVidu/openvidu-call.git   You will need node, NPM and angular-cli to execute the app. You can install them with:   sudo apt-get update\nsudo curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -\nsudo apt-get install -y nodejs\nsudo npm install -g @angular/cli   openvidu-server  and  Kurento Media Server  must be up and running in your development machine. The easiest way is running this Docker container which wraps both of them (you will need  Docker CE ):   docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms   Install NPM dependencies of frontend:   cd openvidu-call/front/openvidu-call\nnpm install   Launch the server:   ng serve --open    \n  $().fancybox({\n    selector : '[data-fancybox=\"gallery\"]',\n    infobar : true,\n    arrows : false,\n    loop: true,\n    protect: true,\n    transitionEffect: 'slide',\n    buttons : [\n        'close'\n    ],\n    clickOutside : 'close',\n    clickSlide   : 'close',\n  });", 
            "title": "Running this demo"
        }, 
        {
            "location": "/how-do-i/create-session/", 
            "text": "Create a session\n\n\nYou must get an \nOpenVidu\n object and call \ninitSession\n method:\n\n\nvar OV = new OpenVidu();\nvar session = OV.initSession();", 
            "title": "Create a session"
        }, 
        {
            "location": "/how-do-i/create-session/#create-a-session", 
            "text": "You must get an  OpenVidu  object and call  initSession  method:  var OV = new OpenVidu();\nvar session = OV.initSession();", 
            "title": "Create a session"
        }, 
        {
            "location": "/how-do-i/join-session/", 
            "text": "Join a session\n\n\nBy calling \nsession.connect\n method you can join a properly initialized session.\n\n\nsession.connect(token)\n    .then( ... )\n    .catch( ... );\n\n\n\n\n\nYou must ask OpenVidu Server for a user token. To do so:\n\n\n\n\n\n\nInitialize a Session in OpenVidu Server\n\n\n\n\nAPI REST\n\n\nopenvidu-java-client\n\n\nopenvidu-node-client\n\n\n\n\n\n\n\n\nGenerate a token for this session in OpenVidu Server\n\n\n\n\nAPI REST\n\n\nopenvidu-java-client\n\n\nopenvidu-node-client\n\n\n\n\n\n\n\n\nReturn this token to your client-side to use it on \nSession.connect()\n\n\n\n\n\n\nYou can add an optional second parameter to pass some user metadata that will be recieved by every other user connected to the same session (check \nShare data between users\n to learn more).\n\n\nsession.connect(token, DATA)\n    .then( ... )\n    .catch( ... );", 
            "title": "Join a session"
        }, 
        {
            "location": "/how-do-i/join-session/#join-a-session", 
            "text": "By calling  session.connect  method you can join a properly initialized session.  session.connect(token)\n    .then( ... )\n    .catch( ... );  \nYou must ask OpenVidu Server for a user token. To do so:    Initialize a Session in OpenVidu Server   API REST  openvidu-java-client  openvidu-node-client     Generate a token for this session in OpenVidu Server   API REST  openvidu-java-client  openvidu-node-client     Return this token to your client-side to use it on  Session.connect()    You can add an optional second parameter to pass some user metadata that will be recieved by every other user connected to the same session (check  Share data between users  to learn more).  session.connect(token, DATA)\n    .then( ... )\n    .catch( ... );", 
            "title": "Join a session"
        }, 
        {
            "location": "/how-do-i/leave-session/", 
            "text": "Leave a session\n\n\nBy calling \nsession.disconnect\n method you can leave the session.\n\n\nsession.disconnect();\n\n\n\n\nThis action will trigger the following events:\n\n\n\n\nsessionDisconnected\n: dispatched by \nSession\n object of the local user that is leaving. Automatically cleans all remote videos.\n\n\nstreamDestroyed\n: dispatched by \nPublisher\n object of the local user that is leaving (only if publishing). Automatically cleans the local video.\n\n\nstreamDestroyed\n: dispatched by \nSession\n object of every other remote user connected to the session. Autoamtically cleans the remote video.\n\n\nconnectionDestroyed\n: dispatched by \nSession\n object of every other remote user connected to the session.", 
            "title": "Leave a session"
        }, 
        {
            "location": "/how-do-i/leave-session/#leave-a-session", 
            "text": "By calling  session.disconnect  method you can leave the session.  session.disconnect();  This action will trigger the following events:   sessionDisconnected : dispatched by  Session  object of the local user that is leaving. Automatically cleans all remote videos.  streamDestroyed : dispatched by  Publisher  object of the local user that is leaving (only if publishing). Automatically cleans the local video.  streamDestroyed : dispatched by  Session  object of every other remote user connected to the session. Autoamtically cleans the remote video.  connectionDestroyed : dispatched by  Session  object of every other remote user connected to the session.", 
            "title": "Leave a session"
        }, 
        {
            "location": "/how-do-i/subscribe-unsubscribe/", 
            "text": "Subscribe/Unsubscribe from other user's stream\n\n\nTo receive the stream of a publisher of the session:\n\n\nvar subscriber;\n\nsession.on('streamCreated', (event) =\n {\n    subscriber = session.subscribe(event.stream, targetElement);\n});\n\n\n\n\nA new HTML video element will be appended to DOM inside the element \ntargetElement\n. It can be an \nHTMLElement\n or its \nid\n attribute, and you can also indicate how to insert the video according to it (see \nSubscriberProperties.insertMode\n).\n\n\nTo cancel the subscription and stop receiving media:\n\n\nsession.unsubscribe(subscriber);\n\n\n\n\nAs long as you have the Subscriber object available, you can alternately call \nSession.subscribe\n and \nSession.unsubscribe\n as many times as you want.", 
            "title": "Subscribe/Unsubscribe from a stream"
        }, 
        {
            "location": "/how-do-i/subscribe-unsubscribe/#subscribeunsubscribe-from-other-users-stream", 
            "text": "To receive the stream of a publisher of the session:  var subscriber;\n\nsession.on('streamCreated', (event) =  {\n    subscriber = session.subscribe(event.stream, targetElement);\n});  A new HTML video element will be appended to DOM inside the element  targetElement . It can be an  HTMLElement  or its  id  attribute, and you can also indicate how to insert the video according to it (see  SubscriberProperties.insertMode ).  To cancel the subscription and stop receiving media:  session.unsubscribe(subscriber);  As long as you have the Subscriber object available, you can alternately call  Session.subscribe  and  Session.unsubscribe  as many times as you want.", 
            "title": "Subscribe/Unsubscribe from other user's stream"
        }, 
        {
            "location": "/how-do-i/publish-unpublish/", 
            "text": "Publish/Unpublish a stream\n\n\nYou can publish a stream after joining a session: get a \nPublisher\n object through OpenVidu object (\nOpenVidu.initPublisher\n) and publish it with \nSession\n object.\n\n\n// After joining a session...\n\nvar publisher = OV.initPublisher(targetElement);\n// Register all the events you want with 'publisher.on(...)'\nsession.publish(publisher);\n\n\n\n\n\n\n\n\nOpenVidu.initPublisher\n method will insert into DOM a new HTML video element inside the element \ntargetElement\n, showing your camera. This target element can be an \nHTMLElement\n or its \nid\n attribute, and you can also indicate how to insert the video according to it (see \nPublisherProperties.insertMode\n). You can then publish it to the session whenever you want (perhaps you want the user to confirm that the camera is working well before publishing it).\n\n\n\n\n\n\nSession.publish\n method will make \nPublisher\n object trigger \nstreamCreated\n event in the local user that is publishing and will make \nSession\n object trigger \nstreamCreated\n event in every other remote user connected to the session. \n\n\n\n\n\n\nYou can add two more parameters to \ninitPublisher\n method: an object with properties about your publisher stream and a callback function to be executed just after the method finishes and before the publisher object dispatches \naccessAllowed\n or \naccessDenied\n event:\n\n\nOV.initPublisher(\n    targetElement,\n    {\n        audioSource: undefined, // The source of audio. If undefined default audio input\n        videoSource: undefined, // The source of video. If undefined default video input\n        publishAudio: true,     // Whether you want to start the publishing with audio unmuted or muted\n        publishVideo: true,     // Whether you want to start the publishing with video enabled or disabled\n        resolution: '640x480',  // The resolution of your video\n        frameRate: 30,          // The frame rate of your video\n        insertMode: 'APPEND',   // How the video will be inserted according to targetElement\n        mirror: false           // Whether to mirror your local video or not\n    },\n    (error) =\n {                // Function to be executed when the method finishes\n        if (error) {\n            console.error('Error while initializing publisher: ', error);\n        } else {\n            console.log('Publisher successfully initialized');\n        }\n    }\n);\n\n\n\n\nTo unpublish the stream:\n\n\nsession.unpublish(publisher);\n\n\n\n\nAs long as you have the Publisher object available, you can alternately call \nSession.publish\n and \nSession.unpublish\n as many times as you want. It is also possible to change the Publisher dynamically (for example if you want to stop transmitting your webcam and start sharing your screen, all of it without leaving the session). To do so:\n\n\nsession.unpublish(oldPubliser);\nnewPublisher = OV.initPublisher(newOptions);\n// Register all the events you want with 'newPublisher.on(...)'\nsession.publish(newPublisher);\n\n\n\n\n\n\n\n\nNOTE\n: only users with Role \nPUBLISHER\n or \nMODERATOR\n can call \nSession.publish\n method. You can check \nOpenViduRole\n section of OpenVidu Node Client for a complete description", 
            "title": "Publish/Unpublish a stream"
        }, 
        {
            "location": "/how-do-i/publish-unpublish/#publishunpublish-a-stream", 
            "text": "You can publish a stream after joining a session: get a  Publisher  object through OpenVidu object ( OpenVidu.initPublisher ) and publish it with  Session  object.  // After joining a session...\n\nvar publisher = OV.initPublisher(targetElement);\n// Register all the events you want with 'publisher.on(...)'\nsession.publish(publisher);    OpenVidu.initPublisher  method will insert into DOM a new HTML video element inside the element  targetElement , showing your camera. This target element can be an  HTMLElement  or its  id  attribute, and you can also indicate how to insert the video according to it (see  PublisherProperties.insertMode ). You can then publish it to the session whenever you want (perhaps you want the user to confirm that the camera is working well before publishing it).    Session.publish  method will make  Publisher  object trigger  streamCreated  event in the local user that is publishing and will make  Session  object trigger  streamCreated  event in every other remote user connected to the session.     You can add two more parameters to  initPublisher  method: an object with properties about your publisher stream and a callback function to be executed just after the method finishes and before the publisher object dispatches  accessAllowed  or  accessDenied  event:  OV.initPublisher(\n    targetElement,\n    {\n        audioSource: undefined, // The source of audio. If undefined default audio input\n        videoSource: undefined, // The source of video. If undefined default video input\n        publishAudio: true,     // Whether you want to start the publishing with audio unmuted or muted\n        publishVideo: true,     // Whether you want to start the publishing with video enabled or disabled\n        resolution: '640x480',  // The resolution of your video\n        frameRate: 30,          // The frame rate of your video\n        insertMode: 'APPEND',   // How the video will be inserted according to targetElement\n        mirror: false           // Whether to mirror your local video or not\n    },\n    (error) =  {                // Function to be executed when the method finishes\n        if (error) {\n            console.error('Error while initializing publisher: ', error);\n        } else {\n            console.log('Publisher successfully initialized');\n        }\n    }\n);  To unpublish the stream:  session.unpublish(publisher);  As long as you have the Publisher object available, you can alternately call  Session.publish  and  Session.unpublish  as many times as you want. It is also possible to change the Publisher dynamically (for example if you want to stop transmitting your webcam and start sharing your screen, all of it without leaving the session). To do so:  session.unpublish(oldPubliser);\nnewPublisher = OV.initPublisher(newOptions);\n// Register all the events you want with 'newPublisher.on(...)'\nsession.publish(newPublisher);    NOTE : only users with Role  PUBLISHER  or  MODERATOR  can call  Session.publish  method. You can check  OpenViduRole  section of OpenVidu Node Client for a complete description", 
            "title": "Publish/Unpublish a stream"
        }, 
        {
            "location": "/how-do-i/mute-audio-video/", 
            "text": "Mute/Unmute audio and video\n\n\nBy calling \nPublisher.publishAudio()\n or \nPublisher.publishVideo()\n method you can toggle audio and video of your Publisher object. Every user subscribed to its stream will stop receiving audio or video.\n\n\npublisher.publishAudio(audioEnabled);   // true to unmute the audio track, false to mute it\npublisher.publishVideo(videoEnabled);   // true to enable the video track, false to disable it\n\n\n\n\nBy calling \nSubscriber.subscribeToAudio()\n or \nSubscriber.subscribeToVideo()\n method you can toggle audio and video of any Subscriber object. You will stop receiving audio or video from it (only affects the client calling the method).\n\n\nsubscriber.subscribeToAudio(audioEnabled);  // true to unmute the audio track, false to mute it\nsubscriber.subscribeToVideo(videoEnabled);  // true to enable the video, false to disable it", 
            "title": "Mute/Unmute audio and video"
        }, 
        {
            "location": "/how-do-i/mute-audio-video/#muteunmute-audio-and-video", 
            "text": "By calling  Publisher.publishAudio()  or  Publisher.publishVideo()  method you can toggle audio and video of your Publisher object. Every user subscribed to its stream will stop receiving audio or video.  publisher.publishAudio(audioEnabled);   // true to unmute the audio track, false to mute it\npublisher.publishVideo(videoEnabled);   // true to enable the video track, false to disable it  By calling  Subscriber.subscribeToAudio()  or  Subscriber.subscribeToVideo()  method you can toggle audio and video of any Subscriber object. You will stop receiving audio or video from it (only affects the client calling the method).  subscriber.subscribeToAudio(audioEnabled);  // true to unmute the audio track, false to mute it\nsubscriber.subscribeToVideo(videoEnabled);  // true to enable the video, false to disable it", 
            "title": "Mute/Unmute audio and video"
        }, 
        {
            "location": "/how-do-i/manage-videos/", 
            "text": "Manage videos\n\n\nOpenVidu makes very easy the management of the video players. You can let OpenVidu take care of their lifecycle or you can use your own HTML video elements.\nEvery Publisher and Subscriber object can display a media stream in as many video players as you want.\n\n\nLet OpenVidu take care of the video players\n\n\n\n\nA) Publisher videos\n\n\n\n\n\n\nWhen initalizing a Publisher object, you can insert a video player by passing a valid \ntargetElement\n in method \nOpenVidu.initPublisher\n (can be an HTMLElement or its \nid\n attribute). Second parameter allows you to customize the publisher's stream, including how OpenVidu must insert the video player according to targetElement (more info in \nOpenVidu Browser Docs\n):\n\n\nvar publisher = OV.initPublisher(targetElement, {insertMode: 'APPEND'});\n\n\n\n\n\n\n\nAfter getting the Publisher object, you can create more video players to display its media stream just by calling \nPublisher.createVideoElement\n. Pass a valid \ntargetElement\n and the \ninsertMode\n:\n\n\npublisher.createVideoElement(targetElement, 'APPEND');\n\n\n\n\n\n\n\n\n\nB) Subscriber videos\n\n\n\n\n\n\nWhen subscribing to a Stream, you can insert a video player by passing a valid \ntargetElement\n in method \nSession.subscribe\n (can be an HTMLElement or its \nid\n attribute). Third parameter allows you to customize the subscriber's stream, including how OpenVidu must insert the video player according to targetElement (more info in \nOpenVidu Browser Docs\n):\n\n\nvar subscriber;\nsession.on('streamCreated', event =\n {\n    subscriber = session.subscribe(event.stream, targetElement, {insertMode: 'APPEND'});\n});\n\n\n\n\n\n\n\nAfter getting the Subscriber object, you can create more video players to display its media stream just by calling \nSubscriber.createVideoElement\n. Pass a valid \ntargetElement\n and the \ninsertMode\n:\n\n\nsubscriber.createVideoElement(targetElement, 'APPEND');\n\n\n\n\n\n\n\n\n\n\n\nPublisher and Subscriber objects will dispatch a \nvideoElementCreated\n event for every video inserted into DOM by these methods.\nAlso these videos will be automatically removed from DOM when required and Publisher and Subscriber objects will dispatch a\n\nvideoElementDestroyed\n event for every one of them\n\n\n\n\nYou take care of the video players\n\n\n\n\nA) Publisher videos\n\n\n\n\nPass \nundefined\n as \ntargetElement\n when initializing your Publisher and when you have it available just call method \nPublisher.addVideoElement\n, passing an already existing HTML video element of the DOM:\nvar publisher = OV.initPublisher(undefined, publisherProperties);\npublisher.addVideoElement(videoElement);\n\n\n\n\n\n\n\n\n\nB) Subscriber videos\n\n\n\n\nPass \nundefined\n as \ntargetElement\n when subscribing to a Stream and when you have Subscriber object available just call method \nSubscriber.addVideoElement\n, passing an already existing HTML video element of the DOM:\nvar subscriber;\nsession.on('streamCreated', event =\n {\n    subscriber = session.subscribe(event.stream, undefined);\n    subscriber.addVideoElement(videoElement);\n});\n\n\n\n\n\n\n\n\n\n\n\nThis way of managing the video players is very useful when developing your application with some frontend declarative framework such as \nAngular\n,\n\nReact\n or \nVue.js\n. It allows you to add to the proper \nPublisher\n or \nSubscriber\n any video element managed by the framework. Besides, it is possible to\ntreat both Publishers and Subscribers the same way regarding their rendering in the page, as they both inherit from the parent class \nStreamManager\n. If you are\ninterested in these concepts, you can check out our super simple \nAngular tutorial\n.", 
            "title": "Manage video players"
        }, 
        {
            "location": "/how-do-i/manage-videos/#manage-videos", 
            "text": "OpenVidu makes very easy the management of the video players. You can let OpenVidu take care of their lifecycle or you can use your own HTML video elements.\nEvery Publisher and Subscriber object can display a media stream in as many video players as you want.", 
            "title": "Manage videos"
        }, 
        {
            "location": "/how-do-i/manage-videos/#let-openvidu-take-care-of-the-video-players", 
            "text": "", 
            "title": "Let OpenVidu take care of the video players"
        }, 
        {
            "location": "/how-do-i/manage-videos/#a-publisher-videos", 
            "text": "When initalizing a Publisher object, you can insert a video player by passing a valid  targetElement  in method  OpenVidu.initPublisher  (can be an HTMLElement or its  id  attribute). Second parameter allows you to customize the publisher's stream, including how OpenVidu must insert the video player according to targetElement (more info in  OpenVidu Browser Docs ):  var publisher = OV.initPublisher(targetElement, {insertMode: 'APPEND'});    After getting the Publisher object, you can create more video players to display its media stream just by calling  Publisher.createVideoElement . Pass a valid  targetElement  and the  insertMode :  publisher.createVideoElement(targetElement, 'APPEND');", 
            "title": "A) Publisher videos"
        }, 
        {
            "location": "/how-do-i/manage-videos/#b-subscriber-videos", 
            "text": "When subscribing to a Stream, you can insert a video player by passing a valid  targetElement  in method  Session.subscribe  (can be an HTMLElement or its  id  attribute). Third parameter allows you to customize the subscriber's stream, including how OpenVidu must insert the video player according to targetElement (more info in  OpenVidu Browser Docs ):  var subscriber;\nsession.on('streamCreated', event =  {\n    subscriber = session.subscribe(event.stream, targetElement, {insertMode: 'APPEND'});\n});    After getting the Subscriber object, you can create more video players to display its media stream just by calling  Subscriber.createVideoElement . Pass a valid  targetElement  and the  insertMode :  subscriber.createVideoElement(targetElement, 'APPEND');      Publisher and Subscriber objects will dispatch a  videoElementCreated  event for every video inserted into DOM by these methods.\nAlso these videos will be automatically removed from DOM when required and Publisher and Subscriber objects will dispatch a videoElementDestroyed  event for every one of them", 
            "title": "B) Subscriber videos"
        }, 
        {
            "location": "/how-do-i/manage-videos/#you-take-care-of-the-video-players", 
            "text": "", 
            "title": "You take care of the video players"
        }, 
        {
            "location": "/how-do-i/manage-videos/#a-publisher-videos_1", 
            "text": "Pass  undefined  as  targetElement  when initializing your Publisher and when you have it available just call method  Publisher.addVideoElement , passing an already existing HTML video element of the DOM: var publisher = OV.initPublisher(undefined, publisherProperties);\npublisher.addVideoElement(videoElement);", 
            "title": "A) Publisher videos"
        }, 
        {
            "location": "/how-do-i/manage-videos/#b-subscriber-videos_1", 
            "text": "Pass  undefined  as  targetElement  when subscribing to a Stream and when you have Subscriber object available just call method  Subscriber.addVideoElement , passing an already existing HTML video element of the DOM: var subscriber;\nsession.on('streamCreated', event =  {\n    subscriber = session.subscribe(event.stream, undefined);\n    subscriber.addVideoElement(videoElement);\n});      This way of managing the video players is very useful when developing your application with some frontend declarative framework such as  Angular , React  or  Vue.js . It allows you to add to the proper  Publisher  or  Subscriber  any video element managed by the framework. Besides, it is possible to\ntreat both Publishers and Subscribers the same way regarding their rendering in the page, as they both inherit from the parent class  StreamManager . If you are\ninterested in these concepts, you can check out our super simple  Angular tutorial .", 
            "title": "B) Subscriber videos"
        }, 
        {
            "location": "/how-do-i/share-data/", 
            "text": "Share data between users\n\n\nWhatever app you are developing, chances are you will need to pass some data for each user, at least a nickname. You can do it in two different places:\n\n\n\n\nClient-Side\n: when calling \nSession.connect\n method in openvidu-browser:\n\n\n\n\nsession.connect(token, \nUSER_DATA\n)\n    .then( ... )\n    .catch( ... );\n\n\n\n\n\n\n\n\nServer-Side\n: when generating a token\n\n\n\n\nAPI REST\n: add body parameter \n\"data\"\n to the POST operation\n\n\nopenvidu-java-client\n: construct TokenOptions with \nTokenOptions.Builder().data(\"USER_DATA\").build()\n\n\nopenvidu-node-client\n: construct TokenOptions with \n{data: \"USER_DATA\"}\n \n\n\n\n\n\n\n\n\nThe result will be that in all clients, \nConnection\n objects will have in their \ndata\n property the pertinent value you have provided for each user. So, an easy way to get the data associated to any user would be:\n\n\nsession.on(\nstreamCreated\n, function (event) {\n    session.subscribe(event.stream, \nsubscriber\n);\n    console.log(\nUSER DATA: \n + event.stream.connection.data);\n});\n\n\n\n\n\nSome clarifications:\n\n\n\n\nUsing only first option is not secure, as clients could modify the value of the second parameter. It is intended for development environments or non critical data. If you want total control over shared data, please use the server-side way.\n\n\nConnection.data\n will be a simple string if you have provided data only with one of the methods, and will be a string with the following format if you provide data both from openvidu-browser and your backend: \n\"CLIENT_SIDE_DATA%/%SERVER_SIDE_DATA\"\n (both separated by string \n%/%\n).\n\n\nYou can choose whatever format you like for the data string, but if you are planning to share more than a simple field, maybe a standard format as JSON would be a wise choice. Method \nSession.connect\n in Openvidu Browser directly admits as data parameter a standard object (it will be finally stringified).", 
            "title": "Share data between users"
        }, 
        {
            "location": "/how-do-i/share-data/#share-data-between-users", 
            "text": "Whatever app you are developing, chances are you will need to pass some data for each user, at least a nickname. You can do it in two different places:   Client-Side : when calling  Session.connect  method in openvidu-browser:   session.connect(token,  USER_DATA )\n    .then( ... )\n    .catch( ... );    Server-Side : when generating a token   API REST : add body parameter  \"data\"  to the POST operation  openvidu-java-client : construct TokenOptions with  TokenOptions.Builder().data(\"USER_DATA\").build()  openvidu-node-client : construct TokenOptions with  {data: \"USER_DATA\"}       The result will be that in all clients,  Connection  objects will have in their  data  property the pertinent value you have provided for each user. So, an easy way to get the data associated to any user would be:  session.on( streamCreated , function (event) {\n    session.subscribe(event.stream,  subscriber );\n    console.log( USER DATA:   + event.stream.connection.data);\n});  \nSome clarifications:   Using only first option is not secure, as clients could modify the value of the second parameter. It is intended for development environments or non critical data. If you want total control over shared data, please use the server-side way.  Connection.data  will be a simple string if you have provided data only with one of the methods, and will be a string with the following format if you provide data both from openvidu-browser and your backend:  \"CLIENT_SIDE_DATA%/%SERVER_SIDE_DATA\"  (both separated by string  %/% ).  You can choose whatever format you like for the data string, but if you are planning to share more than a simple field, maybe a standard format as JSON would be a wise choice. Method  Session.connect  in Openvidu Browser directly admits as data parameter a standard object (it will be finally stringified).", 
            "title": "Share data between users"
        }, 
        {
            "location": "/how-do-i/send-messages/", 
            "text": "Send text messages between users\n\n\nAny user connected to a session can send messages to every other participant of the session, as a broadcast message for everyone or to one or more specific participants. To do so:\n\n\n// Sender of the message (after 'session.connect')\n\nsession.signal({\n      data: 'My custom message',  // Any string (optional)\n      to: [],                     // Array of Connection objects (optional. Broadcast to everyone if empty)\n      type: 'my-chat'             // The type of message (optional)\n    })\n    .then(() =\n {\n        console.log('Message successfully sent');\n    })\n    .catch(error =\n {\n        console.error(error);\n    });\n\n\n\n\nAny user subscribed to that \ntype\n will receive the message:\n\n\n// Receiver of the message (usually before calling 'session.connect')\n\nsession.on('signal:my-chat', (event) =\n {\n    console.log(event.data); // Message\n    console.log(event.from); // Connection object of the sender\n    console.log(event.type); // The type of message (\nmy-chat\n)\n});\n\n\n\n\nYou can subscribe to \nall signals\n just by calling:\n\n\n// Receiver of all messages (usually before calling 'session.connect')\n\nsession.on('signal', (event) =\n {\n    console.log(event.data); // Message\n    console.log(event.from); // Connection object of the sender\n    console.log(event.type); // The type of message\n});\n\n\n\n\nYou can send messages to specific users adding to \nto\n array the proper Connection objects:\n\n\n// Sender of the adressed message (after calling 'session.connect')\n\nsession.signal({\n    data: 'My private custom message',\n    to: [connection1, connection2],\n    type: 'my-private-chat'\n});\n\n\n\n\nIn this last case, only participants represented by \nconnection1\n and \nconnection2\n objects will receive the signal event (only if they are subscribed to it!). You can get Connection objects by subscribing to \nconnectionCreated\n event before connecting to a session:\n\n\nthis.session.on('connectionCreated', (event) =\n {\n    console.log(event.connection);\n});", 
            "title": "Send text messages"
        }, 
        {
            "location": "/how-do-i/send-messages/#send-text-messages-between-users", 
            "text": "Any user connected to a session can send messages to every other participant of the session, as a broadcast message for everyone or to one or more specific participants. To do so:  // Sender of the message (after 'session.connect')\n\nsession.signal({\n      data: 'My custom message',  // Any string (optional)\n      to: [],                     // Array of Connection objects (optional. Broadcast to everyone if empty)\n      type: 'my-chat'             // The type of message (optional)\n    })\n    .then(() =  {\n        console.log('Message successfully sent');\n    })\n    .catch(error =  {\n        console.error(error);\n    });  Any user subscribed to that  type  will receive the message:  // Receiver of the message (usually before calling 'session.connect')\n\nsession.on('signal:my-chat', (event) =  {\n    console.log(event.data); // Message\n    console.log(event.from); // Connection object of the sender\n    console.log(event.type); // The type of message ( my-chat )\n});  You can subscribe to  all signals  just by calling:  // Receiver of all messages (usually before calling 'session.connect')\n\nsession.on('signal', (event) =  {\n    console.log(event.data); // Message\n    console.log(event.from); // Connection object of the sender\n    console.log(event.type); // The type of message\n});  You can send messages to specific users adding to  to  array the proper Connection objects:  // Sender of the adressed message (after calling 'session.connect')\n\nsession.signal({\n    data: 'My private custom message',\n    to: [connection1, connection2],\n    type: 'my-private-chat'\n});  In this last case, only participants represented by  connection1  and  connection2  objects will receive the signal event (only if they are subscribed to it!). You can get Connection objects by subscribing to  connectionCreated  event before connecting to a session:  this.session.on('connectionCreated', (event) =  {\n    console.log(event.connection);\n});", 
            "title": "Send text messages between users"
        }, 
        {
            "location": "/advanced-features/recording/", 
            "text": "Recording\n\n\nOpenVidu Server can be configured to record sessions. In the current version, every publisher stream is composed in the same video file in a grid layout, generating a unique MP4 file when the recording stops.\n\n\nFor example, in a session with two publishers the video file will look like this:\n\n\n\n    \n\n\n\n\n\n\n    \n\n\n\n    This type of grid recording is a pretty heavy consuming process. In order to record sessions and achieve good quality in the resulting videos it is strongly recommended to launch OpenVidu Server in a host with generous computing resources (Multicore >= 1GHz, 16GB of RAM)\n\n\n\n\n\n\n\n\nTo start OpenVidu Server properly configured to allow session recording it is necessary to:\n\n\n1. Have Docker CE installed in the host machine\n\n\nOpenVidu recording module consists of a Docker image that needs to be downloaded from the cloud. The process is \n100% automatic\n, but you will need \nDocker CE\n installed in your server. If you enable OpenVidu recording service but there's no Docker installed, OpenVidu Server will fail to init, throwing the following exception:\n\n\nException connecting to Docker daemon: you need Docker installed in this machine to enable OpenVidu recorder service\n\n\n\n\n\n\nOpenVidu CloudFormation\n already includes the Docker image for recording service. You don't need to install anything or wait during the first execution if you use this type of deployment for OpenVidu Server\n\n\n\n\n\n\n2. Launch OpenVidu Server with new environment variables\n\n\n(Only variables related with OpenVidu recording service are stated below. To see a complete list of available environment variables, visit \nOpenVidu Server configuration\n)\n\n\nFor OpenVidu Server JAR\n\n\njava -jar \\\n    -Dopenvidu.recording=true \\\n    -Dopenvidu.recording.path=/path/to/video/files \\\n    -Dopenvidu.recording.public-access=true \\\nopenvidu-server.jar\n\n\n\n\n\n\nopenvidu.recording\n: if \ntrue\n OpenVidu recording service is enabled and sessions can be configured to be recorded. During the first execution of \nopenvidu-server.jar\n, a Docker image (\nopenvidu/openvidu-recording\n) will be downloaded.\n\n\nopenvidu.recording.path\n: where to store the recorded video files on the host machine.\n\n\nopenvidu.recording.public-access\n: if \ntrue\n any client can connect to\nhttps://OPENVIDU_SERVER_IP:OPENVIDU_PORT/recordings/any_session_file.mp4\n and access any recorded video file. If \nfalse\n this path will be secured with \nopenvidu.secret\n param just as OpenVidu Server dashboard at \nhttps://OPENVIDU_SERVER_IP:OPENVIDU_PORT\n\n\n\n\nFor OpenVidu Server Docker image\n\n\nopenvidu/openvidu-server-kms\n\n\ndocker run -p 4443:4443 --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording=true \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.public-access=true \\\nopenvidu/openvidu-server-kms\n\n\n\n\nopenvidu/openvidu-server\n (KMS up and running in the host machine)\n\n\ndocker run --net=\nhost\n --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording=true \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.public-access=true \\\nopenvidu/openvidu-server\n\n\n\n\n\n\nopenvidu.recording\n: \nsame as in OpenVidu Server JAR\n\n\nopenvidu.recording.path\n: \nsame as in OpenVidu Server JAR\n\n\nopenvidu.recording.public-access\n: \nsame as in OpenVidu Server JAR\n\n\n\n\nIt is also necessary to mount 2 volumes and pass \nMY_UID\n variable:\n\n\n\n\n-v /var/run/docker.sock:/var/run/docker.sock\n: gives openvidu-server container access to the local Docker daemon\n\n\n-v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES\n: gives access to the recorded video files through the container\n\n\n-e MY_UID=$(id -u $USER)\n: for permission reasons\n\n\n\n\n\n\n\n\nIMPORTANT!\n \n/PATH/TO/VIDEO/FILES\n must be the same in property \nopenvidu.recording.path=/PATH/TO/VIDEO/FILES\n and in both sides of flag \n-v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES\n\n\n\n\n\n\n3. Configure your Sessions to be recorded\n\n\nSetting property \nopenvidu.recording\n to \ntrue\n only automatically enables recordings for insecure sessions (those directly created from the client side. See \nthis FAQ\n).\n\n\nIn order to record a regular securized session, it is necessary to explicitly configure it through the \nREST API\n or any of the server clients (\nopenvidu-java-client\n, \nopenvidu-node-client\n).\n\n\nRecording can be configured in two ways: \nautomatic recording\n or \nmanual recording\n:\n\n\n\n\nAutomatic recording\n: your sessions will be recorded from the moment the first participant starts publishing media until the last participant leaves the session.\n\n\nManual recording\n: you will have to tell openvidu-server to start and to stop the recording. The recording will never be automatically stopped even though all participants leave the session (in fact the session will not be closed until the recording stops).\n\n\n\n\nAPI REST\n\n\n\n\nInitialize your sessions with this POST method: \nPOST /api/sessions\n. For sessions configured for automatic recording no more steps are needed\n\n\nIf you have configured your session for manual recording\n\n\nStart the recording with this POST method: \nPOST /api/recordings/start\n\n\nStop the recording with this POST method: \nPOST /api/recordings/stop\n\n\n\n\n\n\n\n\nopenvidu-java-client\n\n\nCall \nOpenVidu.createSession()\n passing as optional parameter a \nSessionProperties\n object properly configured:\n\n\nOpenVidu openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nSessionProperties properties = new SessionProperties.Builder()\n    .recordingMode(RecordingMode.MANUAL) // RecordingMode.ALWAYS for automatic recording\n    .defaultRecordingLayout(RecordingLayout.BEST_FIT)\n    .mediaMode(MediaMode.ROUTED)\n    .build();\nSession session = openVidu.createSession(properties);\n\n\n\n\nIf Session is configured with \nRecordingMode.MANUAL\n:\n\n\nRecording recording = openVidu.startRecording(session.getSessionId()); // Starts recording\nrecording = openVidu.stopRecording(recording.getId()); // Stops recording\n\n\n\n\nopenvidu-node-client\n\n\nCall \nOpenVidu.createSession()\n passing as optional parameter a \nSessionProperties\n object properly configured:\n\n\nvar openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nvar properties = new SessionProperties.Builder()\n    .recordingMode(RecordingMode.MANUAL) // RecordingMode.ALWAYS for automatic recording\n    .defaultRecordingLayout(RecordingLayout.BEST_FIT)\n    .mediaMode(MediaMode.ROUTED)\n    .build();\nvar mySession = openvidu.createSession(properties);\n\n\n\n\nIf Session is configured with \nRecordingMode.MANUAL\n:\n\n\nvar recording;\n\nopenvidu.startRecording(sessionId) // Starts recording\n.then(response =\n {\n    recording = response;\n})\n.catch(error =\n console.error(error));\n\nopenvidu.stopRecording(recording.getId()) // Stops recording\n.then(response =\n {\n    recording = response\n})\n.catch(error =\n console.error(error));\n\n\n\n\n\n\n\n\nCustom recording layouts\n\n\nYou can create your own layouts for the session recording process. They are implemented with HTML/CSS/JS files, just as your OpenVidu application client-side.\n\n\n1. Create your layout with HTML/CSS/JS files\n\n\nPut them in a path accessible to openvidu-server. There must be an \nindex.html\n file as entrypoint for your custom layout:\n\n\n\n\n\n\n\n\nWHAT SHOULD YOUR JS CODE DO\n: by making use of \nopenvidu-browser.js\n library, you need to connect a \nrecorder\n participant to the session. This means:\n\n\n1) Your layout must connect to the session using a \ntoken\n like this:\n\n\n'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + '\nsecret=' + SECRET + '\nrecorder=true';\n\n\n\nBeing \nSESSION_ID\n and \nSECRET\n two parameters that will be url-encoded under ids \nsessionId\n and \nsecret\n respectively. So, for example:\n\n\nvar url = new URL(window.location.href);\nvar SESSION_ID = url.searchParams.get(\"sessionId\");\nvar SECRET = url.searchParams.get(\"secret\");\nvar TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + '\nsecret=' + SECRET + '\nrecorder=true';\nvar session = OV.initSession();\nsession.connect(TOKEN);\n\n\n\n2) You will need to subscribe to, at least, one event:\n \nstreamCreated\n of Session object. That way you can subscribe your recorder to every stream when any user starts publishing (by default, the video element will be automatically removed on every \nstreamDestroyed\n event). To sum up, this would be the simplest code you need to properly start your recorder participant:\n\n\nvar OV = new OpenVidu();\n\nvar url = new URL(window.location.href);\nvar SESSION_ID = url.searchParams.get(\"sessionId\");\nvar SECRET = url.searchParams.get(\"secret\");\nvar TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + '\nsecret=' + SECRET + '\nrecorder=true';\nvar session = OV.initSession();\n\nsession.on(\"streamCreated\", (event) =\n {\n    session.subscribe(event.stream, 'html-id-where-insert-video');\n});\n\nsession.connect(TOKEN);\n\n\n\n\n\n\n\n\n\n\n\nHOW TO IDENTIFY YOUR USERS\n: you can identify them by making use of property \nStream.connection.data\n of the Stream object retrieved in Session event \"streamCreated\". That way you may know which particular user should be displayed in which particular HTML element of your layout. For example:\nsession.on(\"streamCreated\", (event) =\n {\n    var stream = event.stream;\n    if (stream.connection.data === 'userBigVideo') {\n        session.subscribe(stream, 'big-video-div');\n    } else if (stream.connection.data === 'userSmallVideo') {\n        session.subscribe(stream, 'small-video-div');\n    }\n});\n\n\n\n\n\n\n\n\n\n2. Add new properties when launching openvidu-server\n\n\nOn the one hand a new property \nopenvidu.recording.custom-layout\n and on the other hand, if using Docker images, a new \n-v\n option:\n\n\nopenvidu-server.jar\n\n\njava -jar \\\n    -Dopenvidu.recording=true \\\n    -Dopenvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -Dopenvidu.recording.public-access=true \\\n    -Dopenvidu.recording.custom-layout: /PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu-server.jar\n\n\n\n\nopenvidu/openvidu-server-kms\n\n\ndocker run -p 4443:4443 --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -v /PATH/TO/INDEX/CUSTOM/LAYOUT:/PATH/TO/INDEX/CUSTOM/LAYOUT \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording=true \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.custom-layout=/PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu/openvidu-server-kms\n\n\n\n\nopenvidu/openvidu-server\n (KMS up and running in the host machine)\n\n\ndocker run --net=\nhost\n --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -v /PATH/TO/INDEX/CUSTOM/LAYOUT:/PATH/TO/INDEX/CUSTOM/LAYOUT \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording=true \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.custom-layout=/PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu/openvidu-server-kms\n\n\n\n\n\n\n3. Configure your sessions to use your custom layout\n\n\nDo exactly the same process explained \nhere\n, but changing \nrecordingLayout\n from \nBEST_FIT\n to \nCUSTOM\n.\n\n\n\n\nIf you are using the \nAPI REST\n, just change json body parameter \n\"recordingLayout\":\"BEST_FIT\"\n to \n\"recordingLayout\":\"CUSTOM\"\n.\n\n\n\n\nIf you are using \nopenvidu-java-client\n or \nopenvidu-node-client\n, change\n\n\nSessionProperties.Builder().recordingLayout(RecordingLayout.BEST_FIT)\n\n\nto\n\n\nSessionProperties.Builder().recordingLayout(RecordingLayout.CUSTOM)\n\n\n\n\n\n\n\n\n\n\nConfiguring multiple custom layouts\n\n\nYou can implement as many custom recording layouts as you want. Simply store each one of them (each one with its own \nindex.html\n entrypoint file) in a subfolder under path \n/PATH/TO/INDEX/CUSTOM/LAYOUT\n. Then, when configuring your sessions as stated above in point 3, just add a new parameter besides changing \nrecordingLayout\n property:\n\n\n\n\nIf you are using the \nAPI REST\n, add an additional field to json body: \n\"recordingLayout\":\"CUSTOM\", \"customLayout\":\"RELATIVE/PATH/TO/INDEX\"\n\n\nIf you are using \nopenvidu-java-client\n or \nopenvidu-node-client\n, create SessionProperties object with a new step: \nnew SessionProperties.Builder().recordingLayout(RecordingLayout.CUSTOM).customLayout(\"RELATIVE/PATH/TO/INDEX\").build())\n\n\n\n\n\nPath \nRELATIVE/PATH/TO/INDEX\n is the path from openvidu-server configuration property \nopenvidu.recording.custom-layout\n to the specific \nindex.html\n you want to use for a particular session recording. So, if you have the following folder tree structure:\n\n\n/opt\n+-- /openvidu\n|   +-- /my_custom_layouts\n|       +-- index.html\n|       +-- /layout1\n|           +-- index.html\n|       +-- /layout2\n|           +-- index.html\n/etc\n    ...\n\n\n\n\nYou should start openvidu-server with property \nopenvidu.recording.custom-layout=/opt/openvidu/my_custom_layouts\n and you can use any of the 3 \nindex.html\n files for recording any of your sessions. To use the outer layout, just configure \nrecordingLayout\n to \nCUSTOM\n. To use any of the inner layouts, also configure \ncustomLayout\n to \nlayout1\n or \nlayout2\n.\n\n\n\n\nSample custom layout\n\n\nThis is literally the simplest HTML for a custom recording layout. Use it as a template for building more complex ones.\n\n\nhtml\n\n\n\nhead\nscript src=\nopenvidu-browser-2.0.0.min.js\n/script\n/head\n\n\n\nbody\n\n    \ndiv id=\nvideos\n/div\n\n\n/body\n\n\n\nscript\n\n    var url = new URL(window.location.href);\n    var SESSION_ID = url.searchParams.get(\nsessionId\n);\n    var SECRET = url.searchParams.get(\nsecret\n);\n    var TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + '\nsecret=' + SECRET + '\nrecorder=true';\n\n    var OV = new OpenVidu();\n    var session = OV.initSession();\n\n    session.on(\nstreamCreated\n, (event) =\n {\n        session.subscribe(event.stream, 'videos');\n    });\n    session.connect(TOKEN)\n        .then(() =\n { console.log('Recorder participant connected') })\n        .catch(error =\n { console.error(error) });\n\n/script\n\n\n\n/html\n\n\n\n\n\n\n\n\nLocal recording\n\n\nOpenVidu Browser offers an extremely simple API to record Streams directly in the client's browser. Check it out \nhere\n.", 
            "title": "Recording"
        }, 
        {
            "location": "/advanced-features/recording/#recording", 
            "text": "OpenVidu Server can be configured to record sessions. In the current version, every publisher stream is composed in the same video file in a grid layout, generating a unique MP4 file when the recording stops.  For example, in a session with two publishers the video file will look like this:  \n       \n      \n    This type of grid recording is a pretty heavy consuming process. In order to record sessions and achieve good quality in the resulting videos it is strongly recommended to launch OpenVidu Server in a host with generous computing resources (Multicore >= 1GHz, 16GB of RAM)    To start OpenVidu Server properly configured to allow session recording it is necessary to:", 
            "title": "Recording"
        }, 
        {
            "location": "/advanced-features/recording/#1-have-docker-ce-installed-in-the-host-machine", 
            "text": "OpenVidu recording module consists of a Docker image that needs to be downloaded from the cloud. The process is  100% automatic , but you will need  Docker CE  installed in your server. If you enable OpenVidu recording service but there's no Docker installed, OpenVidu Server will fail to init, throwing the following exception:  Exception connecting to Docker daemon: you need Docker installed in this machine to enable OpenVidu recorder service    OpenVidu CloudFormation  already includes the Docker image for recording service. You don't need to install anything or wait during the first execution if you use this type of deployment for OpenVidu Server", 
            "title": "1. Have Docker CE installed in the host machine"
        }, 
        {
            "location": "/advanced-features/recording/#2-launch-openvidu-server-with-new-environment-variables", 
            "text": "(Only variables related with OpenVidu recording service are stated below. To see a complete list of available environment variables, visit  OpenVidu Server configuration )", 
            "title": "2. Launch OpenVidu Server with new environment variables"
        }, 
        {
            "location": "/advanced-features/recording/#for-openvidu-server-jar", 
            "text": "java -jar \\\n    -Dopenvidu.recording=true \\\n    -Dopenvidu.recording.path=/path/to/video/files \\\n    -Dopenvidu.recording.public-access=true \\\nopenvidu-server.jar   openvidu.recording : if  true  OpenVidu recording service is enabled and sessions can be configured to be recorded. During the first execution of  openvidu-server.jar , a Docker image ( openvidu/openvidu-recording ) will be downloaded.  openvidu.recording.path : where to store the recorded video files on the host machine.  openvidu.recording.public-access : if  true  any client can connect to https://OPENVIDU_SERVER_IP:OPENVIDU_PORT/recordings/any_session_file.mp4  and access any recorded video file. If  false  this path will be secured with  openvidu.secret  param just as OpenVidu Server dashboard at  https://OPENVIDU_SERVER_IP:OPENVIDU_PORT", 
            "title": "For OpenVidu Server JAR"
        }, 
        {
            "location": "/advanced-features/recording/#for-openvidu-server-docker-image", 
            "text": "openvidu/openvidu-server-kms  docker run -p 4443:4443 --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording=true \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.public-access=true \\\nopenvidu/openvidu-server-kms  openvidu/openvidu-server  (KMS up and running in the host machine)  docker run --net= host  --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording=true \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.public-access=true \\\nopenvidu/openvidu-server   openvidu.recording :  same as in OpenVidu Server JAR  openvidu.recording.path :  same as in OpenVidu Server JAR  openvidu.recording.public-access :  same as in OpenVidu Server JAR   It is also necessary to mount 2 volumes and pass  MY_UID  variable:   -v /var/run/docker.sock:/var/run/docker.sock : gives openvidu-server container access to the local Docker daemon  -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES : gives access to the recorded video files through the container  -e MY_UID=$(id -u $USER) : for permission reasons     IMPORTANT!   /PATH/TO/VIDEO/FILES  must be the same in property  openvidu.recording.path=/PATH/TO/VIDEO/FILES  and in both sides of flag  -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES", 
            "title": "For OpenVidu Server Docker image"
        }, 
        {
            "location": "/advanced-features/recording/#3-configure-your-sessions-to-be-recorded", 
            "text": "Setting property  openvidu.recording  to  true  only automatically enables recordings for insecure sessions (those directly created from the client side. See  this FAQ ).  In order to record a regular securized session, it is necessary to explicitly configure it through the  REST API  or any of the server clients ( openvidu-java-client ,  openvidu-node-client ).  Recording can be configured in two ways:  automatic recording  or  manual recording :   Automatic recording : your sessions will be recorded from the moment the first participant starts publishing media until the last participant leaves the session.  Manual recording : you will have to tell openvidu-server to start and to stop the recording. The recording will never be automatically stopped even though all participants leave the session (in fact the session will not be closed until the recording stops).", 
            "title": "3. Configure your Sessions to be recorded"
        }, 
        {
            "location": "/advanced-features/recording/#api-rest", 
            "text": "Initialize your sessions with this POST method:  POST /api/sessions . For sessions configured for automatic recording no more steps are needed  If you have configured your session for manual recording  Start the recording with this POST method:  POST /api/recordings/start  Stop the recording with this POST method:  POST /api/recordings/stop", 
            "title": "API REST"
        }, 
        {
            "location": "/advanced-features/recording/#openvidu-java-client", 
            "text": "Call  OpenVidu.createSession()  passing as optional parameter a  SessionProperties  object properly configured:  OpenVidu openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nSessionProperties properties = new SessionProperties.Builder()\n    .recordingMode(RecordingMode.MANUAL) // RecordingMode.ALWAYS for automatic recording\n    .defaultRecordingLayout(RecordingLayout.BEST_FIT)\n    .mediaMode(MediaMode.ROUTED)\n    .build();\nSession session = openVidu.createSession(properties);  If Session is configured with  RecordingMode.MANUAL :  Recording recording = openVidu.startRecording(session.getSessionId()); // Starts recording\nrecording = openVidu.stopRecording(recording.getId()); // Stops recording", 
            "title": "openvidu-java-client"
        }, 
        {
            "location": "/advanced-features/recording/#openvidu-node-client", 
            "text": "Call  OpenVidu.createSession()  passing as optional parameter a  SessionProperties  object properly configured:  var openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nvar properties = new SessionProperties.Builder()\n    .recordingMode(RecordingMode.MANUAL) // RecordingMode.ALWAYS for automatic recording\n    .defaultRecordingLayout(RecordingLayout.BEST_FIT)\n    .mediaMode(MediaMode.ROUTED)\n    .build();\nvar mySession = openvidu.createSession(properties);  If Session is configured with  RecordingMode.MANUAL :  var recording;\n\nopenvidu.startRecording(sessionId) // Starts recording\n.then(response =  {\n    recording = response;\n})\n.catch(error =  console.error(error));\n\nopenvidu.stopRecording(recording.getId()) // Stops recording\n.then(response =  {\n    recording = response\n})\n.catch(error =  console.error(error));", 
            "title": "openvidu-node-client"
        }, 
        {
            "location": "/advanced-features/recording/#custom-recording-layouts", 
            "text": "You can create your own layouts for the session recording process. They are implemented with HTML/CSS/JS files, just as your OpenVidu application client-side.", 
            "title": "Custom recording layouts"
        }, 
        {
            "location": "/advanced-features/recording/#1-create-your-layout-with-htmlcssjs-files", 
            "text": "Put them in a path accessible to openvidu-server. There must be an  index.html  file as entrypoint for your custom layout:     WHAT SHOULD YOUR JS CODE DO : by making use of  openvidu-browser.js  library, you need to connect a  recorder  participant to the session. This means:  1) Your layout must connect to the session using a  token  like this:  'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + ' secret=' + SECRET + ' recorder=true';  Being  SESSION_ID  and  SECRET  two parameters that will be url-encoded under ids  sessionId  and  secret  respectively. So, for example:  var url = new URL(window.location.href);\nvar SESSION_ID = url.searchParams.get(\"sessionId\");\nvar SECRET = url.searchParams.get(\"secret\");\nvar TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + ' secret=' + SECRET + ' recorder=true';\nvar session = OV.initSession();\nsession.connect(TOKEN);  2) You will need to subscribe to, at least, one event:   streamCreated  of Session object. That way you can subscribe your recorder to every stream when any user starts publishing (by default, the video element will be automatically removed on every  streamDestroyed  event). To sum up, this would be the simplest code you need to properly start your recorder participant:  var OV = new OpenVidu();\n\nvar url = new URL(window.location.href);\nvar SESSION_ID = url.searchParams.get(\"sessionId\");\nvar SECRET = url.searchParams.get(\"secret\");\nvar TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + ' secret=' + SECRET + ' recorder=true';\nvar session = OV.initSession();\n\nsession.on(\"streamCreated\", (event) =  {\n    session.subscribe(event.stream, 'html-id-where-insert-video');\n});\n\nsession.connect(TOKEN);      HOW TO IDENTIFY YOUR USERS : you can identify them by making use of property  Stream.connection.data  of the Stream object retrieved in Session event \"streamCreated\". That way you may know which particular user should be displayed in which particular HTML element of your layout. For example: session.on(\"streamCreated\", (event) =  {\n    var stream = event.stream;\n    if (stream.connection.data === 'userBigVideo') {\n        session.subscribe(stream, 'big-video-div');\n    } else if (stream.connection.data === 'userSmallVideo') {\n        session.subscribe(stream, 'small-video-div');\n    }\n});", 
            "title": "1. Create your layout with HTML/CSS/JS files"
        }, 
        {
            "location": "/advanced-features/recording/#2-add-new-properties-when-launching-openvidu-server", 
            "text": "On the one hand a new property  openvidu.recording.custom-layout  and on the other hand, if using Docker images, a new  -v  option:  openvidu-server.jar  java -jar \\\n    -Dopenvidu.recording=true \\\n    -Dopenvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -Dopenvidu.recording.public-access=true \\\n    -Dopenvidu.recording.custom-layout: /PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu-server.jar  openvidu/openvidu-server-kms  docker run -p 4443:4443 --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -v /PATH/TO/INDEX/CUSTOM/LAYOUT:/PATH/TO/INDEX/CUSTOM/LAYOUT \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording=true \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.custom-layout=/PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu/openvidu-server-kms  openvidu/openvidu-server  (KMS up and running in the host machine)  docker run --net= host  --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /PATH/TO/VIDEO/FILES:/PATH/TO/VIDEO/FILES \\\n    -v /PATH/TO/INDEX/CUSTOM/LAYOUT:/PATH/TO/INDEX/CUSTOM/LAYOUT \\\n    -e MY_UID=$(id -u $USER) \\\n    -e openvidu.recording=true \\\n    -e openvidu.recording.path=/PATH/TO/VIDEO/FILES \\\n    -e openvidu.recording.custom-layout=/PATH/TO/INDEX/CUSTOM/LAYOUT \\\nopenvidu/openvidu-server-kms", 
            "title": "2. Add new properties when launching openvidu-server"
        }, 
        {
            "location": "/advanced-features/recording/#3-configure-your-sessions-to-use-your-custom-layout", 
            "text": "Do exactly the same process explained  here , but changing  recordingLayout  from  BEST_FIT  to  CUSTOM .   If you are using the  API REST , just change json body parameter  \"recordingLayout\":\"BEST_FIT\"  to  \"recordingLayout\":\"CUSTOM\" .   If you are using  openvidu-java-client  or  openvidu-node-client , change  SessionProperties.Builder().recordingLayout(RecordingLayout.BEST_FIT)  to  SessionProperties.Builder().recordingLayout(RecordingLayout.CUSTOM)", 
            "title": "3. Configure your sessions to use your custom layout"
        }, 
        {
            "location": "/advanced-features/recording/#configuring-multiple-custom-layouts", 
            "text": "You can implement as many custom recording layouts as you want. Simply store each one of them (each one with its own  index.html  entrypoint file) in a subfolder under path  /PATH/TO/INDEX/CUSTOM/LAYOUT . Then, when configuring your sessions as stated above in point 3, just add a new parameter besides changing  recordingLayout  property:   If you are using the  API REST , add an additional field to json body:  \"recordingLayout\":\"CUSTOM\", \"customLayout\":\"RELATIVE/PATH/TO/INDEX\"  If you are using  openvidu-java-client  or  openvidu-node-client , create SessionProperties object with a new step:  new SessionProperties.Builder().recordingLayout(RecordingLayout.CUSTOM).customLayout(\"RELATIVE/PATH/TO/INDEX\").build())   \nPath  RELATIVE/PATH/TO/INDEX  is the path from openvidu-server configuration property  openvidu.recording.custom-layout  to the specific  index.html  you want to use for a particular session recording. So, if you have the following folder tree structure:  /opt\n+-- /openvidu\n|   +-- /my_custom_layouts\n|       +-- index.html\n|       +-- /layout1\n|           +-- index.html\n|       +-- /layout2\n|           +-- index.html\n/etc\n    ...  You should start openvidu-server with property  openvidu.recording.custom-layout=/opt/openvidu/my_custom_layouts  and you can use any of the 3  index.html  files for recording any of your sessions. To use the outer layout, just configure  recordingLayout  to  CUSTOM . To use any of the inner layouts, also configure  customLayout  to  layout1  or  layout2 .", 
            "title": "Configuring multiple custom layouts"
        }, 
        {
            "location": "/advanced-features/recording/#sample-custom-layout", 
            "text": "This is literally the simplest HTML for a custom recording layout. Use it as a template for building more complex ones.  html  head script src= openvidu-browser-2.0.0.min.js /script /head  body \n     div id= videos /div  /body  script \n    var url = new URL(window.location.href);\n    var SESSION_ID = url.searchParams.get( sessionId );\n    var SECRET = url.searchParams.get( secret );\n    var TOKEN = 'wss://' + location.hostname + ':4443?sessionId=' + SESSION_ID + ' secret=' + SECRET + ' recorder=true';\n\n    var OV = new OpenVidu();\n    var session = OV.initSession();\n\n    session.on( streamCreated , (event) =  {\n        session.subscribe(event.stream, 'videos');\n    });\n    session.connect(TOKEN)\n        .then(() =  { console.log('Recorder participant connected') })\n        .catch(error =  { console.error(error) }); /script  /html", 
            "title": "Sample custom layout"
        }, 
        {
            "location": "/advanced-features/recording/#local-recording", 
            "text": "OpenVidu Browser offers an extremely simple API to record Streams directly in the client's browser. Check it out  here .", 
            "title": "Local recording"
        }, 
        {
            "location": "/advanced-features/screen-share/", 
            "text": "Screen share\n\n\nTo share your screen instead of your webcam, the process is exactly the same as stated in \nPublish a stream\n section, but setting to \n\"screen\"\n \nvideoSource\n property when initializing a Publisher object:\n\n\nOV.initPublisher(\nhtml-element-id\n, { videoSource: \nscreen\n });\n\n\n\n\nBoth \nChrome\n and \nFirefox\n support screen sharing. Chrome needs an extension and Firefox supports native screen sharing since version 52. An OpenViduError object may be returned with the following \nOpenViduError.name\n property in the callback function:\n\n\n\n\nSCREEN_SHARING_NOT_SUPPORTED\n: if the browser does not support screen sharing.\n\n\nSCREEN_EXTENSION_NOT_INSTALLED\n: Chrome needs an extension to allow screen sharing. \nerror.message\n has the URL of Chrome Web Store where to install the extension.\n\n\nSCREEN_EXTENSION_DISABLED\n: if Chrome's screen extension is installed but disabled\n\n\nSCREEN_CAPTURE_DENIED\n: if the user doesn't grant permissions to capture the screen when the browser asks to.\n\n\n\n\nOV.initPublisher('html-element-id', { screen: true }, function(error) {\n    if (error.name == 'SCREEN_EXTENSION_NOT_INSTALLED') {\n        showWarning(error.message);\n\n        // showWarning could show a button with href 'error.message',\n        // so the user can navigate to install the extension.\n        // A browser refresh is also needed after installation\n\n    } else if (error.name == 'SCREEN_SHARING_NOT_SUPPORTED') {\n        alert('Your browser does not support screen sharing');\n    } else if (error.name == 'SCREEN_EXTENSION_DISABLED') {\n        alert('You need to enable screen sharing extension');\n    } else if (error.name == 'SCREEN_CAPTURE_DENIED') {\n        alert('You need to choose a window or application to share');\n    }\n});\n\n\n\n\n\n\n\n\nCustom Screen Sharing extension for Chrome\n\n\n\nWe provide a default extension that will work on any domain, but you can create your own Chrome extension always based on ours (\nOpenVidu Screen Sharing extension\n). This way your extension may have your own icon, name, description and custom valid domains.\n\n\nTo use your extension, just configure OpenVidu object like this after initializing it:\n\n\nvar OV = new OpenVidu();\nOV.setAdvancedConfiguration(\n    { screenShareChromeExtension: \nhttps://chrome.google.com/webstore/detail/EXTENSION_NAME/EXTENSION_ID\n }\n);\n\n\n\n\nCheck the \nGitHub README\n for further information.", 
            "title": "Screen share"
        }, 
        {
            "location": "/advanced-features/screen-share/#screen-share", 
            "text": "To share your screen instead of your webcam, the process is exactly the same as stated in  Publish a stream  section, but setting to  \"screen\"   videoSource  property when initializing a Publisher object:  OV.initPublisher( html-element-id , { videoSource:  screen  });  Both  Chrome  and  Firefox  support screen sharing. Chrome needs an extension and Firefox supports native screen sharing since version 52. An OpenViduError object may be returned with the following  OpenViduError.name  property in the callback function:   SCREEN_SHARING_NOT_SUPPORTED : if the browser does not support screen sharing.  SCREEN_EXTENSION_NOT_INSTALLED : Chrome needs an extension to allow screen sharing.  error.message  has the URL of Chrome Web Store where to install the extension.  SCREEN_EXTENSION_DISABLED : if Chrome's screen extension is installed but disabled  SCREEN_CAPTURE_DENIED : if the user doesn't grant permissions to capture the screen when the browser asks to.   OV.initPublisher('html-element-id', { screen: true }, function(error) {\n    if (error.name == 'SCREEN_EXTENSION_NOT_INSTALLED') {\n        showWarning(error.message);\n\n        // showWarning could show a button with href 'error.message',\n        // so the user can navigate to install the extension.\n        // A browser refresh is also needed after installation\n\n    } else if (error.name == 'SCREEN_SHARING_NOT_SUPPORTED') {\n        alert('Your browser does not support screen sharing');\n    } else if (error.name == 'SCREEN_EXTENSION_DISABLED') {\n        alert('You need to enable screen sharing extension');\n    } else if (error.name == 'SCREEN_CAPTURE_DENIED') {\n        alert('You need to choose a window or application to share');\n    }\n});", 
            "title": "Screen share"
        }, 
        {
            "location": "/advanced-features/screen-share/#custom-screen-sharing-extension-for-chrome", 
            "text": "We provide a default extension that will work on any domain, but you can create your own Chrome extension always based on ours ( OpenVidu Screen Sharing extension ). This way your extension may have your own icon, name, description and custom valid domains.  To use your extension, just configure OpenVidu object like this after initializing it:  var OV = new OpenVidu();\nOV.setAdvancedConfiguration(\n    { screenShareChromeExtension:  https://chrome.google.com/webstore/detail/EXTENSION_NAME/EXTENSION_ID  }\n);  Check the  GitHub README  for further information.", 
            "title": "Custom Screen Sharing extension for Chrome"
        }, 
        {
            "location": "/advanced-features/speech-detection/", 
            "text": "Speech detection\n\n\nA pretty common requested event is one that allows you to detect when a publisher starts and stops speaking. OpenVidu offers this ability through \nPublisherSpeakingEvents\n that can be configured for \nSession\n objects:\n\n\nsession.on('publisherStartSpeaking', (event) =\n {\n    console.log('Publisher ' + event.connection.connectionId + ' start speaking');\n});\n\nsession.on('publisherStopSpeaking', (event) =\n {\n    console.log('Publisher ' + event.connection.connectionId + ' stop speaking');\n});\n\n\n\n\nEvent \npublisherStopSpeaking\n for certain \nConnection\n object can only be triggered after \npublisherStartSpeaking\n has been called for that specific Connection object. In other words, none of these events can be triggered twice in a row for one Connection: they are always launched alternately.\n\n\nYou can further configure the behaviour of these two events by using \nOpenVidu.setAdvancedConfiguration\n method:\n\n\nvar OV = new OpenVidu();\nOV.setAdvancedConfiguration({\n    publisherSpeakingEventsOptions: {\n        interval: 50,   // Frequency of the polling of audio streams in ms\n        threshold: -50  // Threshold volume in dB\n    }\n});\n\n\n\n\nWith these events it is really easy to build a layout that can make the main speaker video the bigger one, and alternate the main view between the participants of a session as they take the floor.", 
            "title": "Speech detection"
        }, 
        {
            "location": "/advanced-features/speech-detection/#speech-detection", 
            "text": "A pretty common requested event is one that allows you to detect when a publisher starts and stops speaking. OpenVidu offers this ability through  PublisherSpeakingEvents  that can be configured for  Session  objects:  session.on('publisherStartSpeaking', (event) =  {\n    console.log('Publisher ' + event.connection.connectionId + ' start speaking');\n});\n\nsession.on('publisherStopSpeaking', (event) =  {\n    console.log('Publisher ' + event.connection.connectionId + ' stop speaking');\n});  Event  publisherStopSpeaking  for certain  Connection  object can only be triggered after  publisherStartSpeaking  has been called for that specific Connection object. In other words, none of these events can be triggered twice in a row for one Connection: they are always launched alternately.  You can further configure the behaviour of these two events by using  OpenVidu.setAdvancedConfiguration  method:  var OV = new OpenVidu();\nOV.setAdvancedConfiguration({\n    publisherSpeakingEventsOptions: {\n        interval: 50,   // Frequency of the polling of audio streams in ms\n        threshold: -50  // Threshold volume in dB\n    }\n});  With these events it is really easy to build a layout that can make the main speaker video the bigger one, and alternate the main view between the participants of a session as they take the floor.", 
            "title": "Speech detection"
        }, 
        {
            "location": "/reference-docs/openvidu-browser/", 
            "text": "openvidu-browser API\n\n\n\n\n\n\nCheck \nTypeDoc documentation", 
            "title": "openvidu-browser API"
        }, 
        {
            "location": "/reference-docs/openvidu-java-client/", 
            "text": "openvidu-java-client API\n\n\n\n\n\n\nCheck \nJavaDoc documentation\n\n\n\n\n\n\nCode samples\n\n\nCreate a session\n\n\nOpenVidu openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nSessionProperties properties = new SessionProperties.Builder().build();\nSession session = openVidu.createSession(properties);\n\n\n\n\nGenerate a token\n\n\nTokenOptions tokenOptions = new TokenOptions.Builder()\n    .role(OpenViduRole.PUBLISHER)\n    .data(\nuser_data\n)\n    .build();\nString token = session.generateToken(tokenOptions);\n\n\n\n\nManage recordings\n\n\n// Start recording\nString sessionId = session.getSessionId();\nRecordingProperties properties = new RecordingProperties.Builder().build();\nRecording recordingStarted = openVidu.startRecording(sessionId, properties);\n\n// Stop recording\nString recordingId = recordingStarted.getId();\nRecording recordingStopped = openvidu.stopRecording(recordingId);\n\n// Get recording\nRecording recordingRetrieved = openvidu.getRecording(recordingId);\n\n// List recordings\nList\nRecording\n recordingList = openVidu.listRecordings();\n\n// Delete recording\nopenVidu.deleteRecording(recordingId);", 
            "title": "openvidu-java-client API"
        }, 
        {
            "location": "/reference-docs/openvidu-java-client/#code-samples", 
            "text": "", 
            "title": "Code samples"
        }, 
        {
            "location": "/reference-docs/openvidu-java-client/#create-a-session", 
            "text": "OpenVidu openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nSessionProperties properties = new SessionProperties.Builder().build();\nSession session = openVidu.createSession(properties);", 
            "title": "Create a session"
        }, 
        {
            "location": "/reference-docs/openvidu-java-client/#generate-a-token", 
            "text": "TokenOptions tokenOptions = new TokenOptions.Builder()\n    .role(OpenViduRole.PUBLISHER)\n    .data( user_data )\n    .build();\nString token = session.generateToken(tokenOptions);", 
            "title": "Generate a token"
        }, 
        {
            "location": "/reference-docs/openvidu-java-client/#manage-recordings", 
            "text": "// Start recording\nString sessionId = session.getSessionId();\nRecordingProperties properties = new RecordingProperties.Builder().build();\nRecording recordingStarted = openVidu.startRecording(sessionId, properties);\n\n// Stop recording\nString recordingId = recordingStarted.getId();\nRecording recordingStopped = openvidu.stopRecording(recordingId);\n\n// Get recording\nRecording recordingRetrieved = openvidu.getRecording(recordingId);\n\n// List recordings\nList Recording  recordingList = openVidu.listRecordings();\n\n// Delete recording\nopenVidu.deleteRecording(recordingId);", 
            "title": "Manage recordings"
        }, 
        {
            "location": "/reference-docs/openvidu-node-client/", 
            "text": "openvidu-node-client API\n\n\n\n\n\n\nCheck \nTypeDoc documentation\n\n\n\n\n\n\nCode samples\n\n\nCreate a session\n\n\nvar openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nvar properties = {};\nopenVidu.createSession(properties).then(session =\n { ... });\n\n\n\n\nGenerate a token\n\n\nvar tokenOptions = {\n    role: \nPUBLISHER\n,\n    data: \nuser_data\n\n};\nsession.generateToken(tokenOptions).then(token =\n { ... });\n\n\n\n\nManage recordings\n\n\n// Start recording\nvar sessionId = session.getSessionId();\nopenVidu.startRecording(sessionId).then(recordingStarted =\n ... );\n\n// Stop recording\nvar recordingId = recordingStarted.id;\nopenvidu.stopRecording(recordingId).then(recordingStopped =\n ... );\n\n// Get recording\nopenvidu.getRecording(recordingId).then(recordingRetrieved =\n ... );\n\n// List recordings\nopenVidu.listRecordings().then(recordingList =\n ... );\n\n// Delete recording\nopenVidu.deleteRecording(recordingId);", 
            "title": "openvidu-node-client API"
        }, 
        {
            "location": "/reference-docs/openvidu-node-client/#code-samples", 
            "text": "", 
            "title": "Code samples"
        }, 
        {
            "location": "/reference-docs/openvidu-node-client/#create-a-session", 
            "text": "var openvidu = new OpenVidu(OPENVIDU_URL, OPENVIDU_SECRET);\nvar properties = {};\nopenVidu.createSession(properties).then(session =  { ... });", 
            "title": "Create a session"
        }, 
        {
            "location": "/reference-docs/openvidu-node-client/#generate-a-token", 
            "text": "var tokenOptions = {\n    role:  PUBLISHER ,\n    data:  user_data \n};\nsession.generateToken(tokenOptions).then(token =  { ... });", 
            "title": "Generate a token"
        }, 
        {
            "location": "/reference-docs/openvidu-node-client/#manage-recordings", 
            "text": "// Start recording\nvar sessionId = session.getSessionId();\nopenVidu.startRecording(sessionId).then(recordingStarted =  ... );\n\n// Stop recording\nvar recordingId = recordingStarted.id;\nopenvidu.stopRecording(recordingId).then(recordingStopped =  ... );\n\n// Get recording\nopenvidu.getRecording(recordingId).then(recordingRetrieved =  ... );\n\n// List recordings\nopenVidu.listRecordings().then(recordingList =  ... );\n\n// Delete recording\nopenVidu.deleteRecording(recordingId);", 
            "title": "Manage recordings"
        }, 
        {
            "location": "/reference-docs/REST-API/", 
            "text": "REST API\n\n\n\n\n\n\nAll REST operations have in common the header referred to authorization. It is implemented via Basic Auth, and it is as simple as applying Base64 encoding to the username (always \"OPENVIDUAPP\") and the password (your \nsecret\n shared with openvidu-server). An example is shown below:\n\n\nFor secret \"MY_SECRET\", the final HTTP header would be\n\n\n\n\nAuthorization: Basic T1BFTlZJRFVBUFA6TVlfU0VDUkVU\n\n\n\n\nPOST \n/api/sessions\n\n\n\n\n\n\n\n\nNEW SESSIONID\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/sessions\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/json\n\n\n\n\n\n\nBody\n\n\n{\"mediaMode\": \"MEDIA_MODE\", \"recordingMode\": \"RECORDING_MODE\", \"defaultRecordingLayout\": \"RECORDING_LAYOUT\", \"defaultCustomLayout\": \"CUSTOM_LAYOUT\", \"customSessionId\": \"CUSTOM_SESSION_ID\"}\n\n\n\n\n\n\nSample return\n\n\n{\"id\": \"wss://localhost:4443/jpifeuzfati5qaj8\"}\n\n\n\n\n\n\n\n\n\n\nBody parameters\n\n\n\n\n\n\nmediaMode\n \n(optional)\n\n\nROUTED\n \n(default)\n : Media streams will be routed through OpenVidu Server. This Media Mode is mandatory for session recording\n\n\nNot available yet: \nRELAYED\n\n\n\n\n\n\nrecordingMode\n \n(optional)\n\n\nALWAYS\n: Automatic recording from the first user publishing until the last participant leaves the session\n\n\nMANUAL\n \n(default)\n : If you want to manage when start and stop the recording\n\n\n\n\n\n\ndefaultRecordingLayout\n \n(optional)\n\n\nBEST_FIT\n(default)\n : A grid layout where all the videos are evenly distributed\n\n\nCUSTOM\n: Use your own custom layout. See \nCustom recording layouts\n section to learn how\n\n\nNot available yet: \nPICTURE_IN_PICTURE\n, \nVERTICAL_PRESENTATION\n, \nHORIZONTAL_PRESENTATION\n\n\n\n\n\n\ndefaultCustomLayout\n \n(optional)\n\n\nA relative path indicating the custom recording layout to be used if more than one is available. Only applies if \ndefaultRecordingLayout\n is set to \nCUSTOM\n. Default to empty string (if so custom layout expected under path set with \nopenvidu-server configuration\n property \nopenvidu.recording.custom-layout\n)\n\n\n\n\n\n\ncustomSessionId\n \n(optional)\n\n\nYou can fix the \nsessionId\n that will be assigned to the session with this parameter. If you make another request with the exact same \ncustomSessionId\n while previous session already exists, no session will be created and a \n409\n http response will be returned. If this parameter is an empty string or not sent at all, OpenVidu Server will generate a random sessionId for you.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\nid\n: session identifier. Store it for generating tokens and starting session's recording. It is actually the URL where the client will connect to access the session\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: session successfully created and sessionId ready to be used\n\n\n400\n: problem with body parameters\n\n\n409\n: parameter \ncustomSessionId\n corresponds to an existing session. There has been no change at all in the state of OpenVidu Server\n\n\n\n\n\n\n\n\nPOST \n/api/tokens\n\n\n\n\n\n\n\n\nNEW TOKEN\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/tokens\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/json\n\n\n\n\n\n\nBody\n\n\n{\"session\": \"SESSION_ID\", \"role\": \"ROLE\", \"data\": \"DATA\"}\n\n\n\n\n\n\nSample return\n\n\n{\"token\": \"tjyqiq2dw1j4fxjr\", \"session\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"role\": \"PUBLISHER\", \"data\": \"secure_user_data\", \"id\": \"tjyqiq2dw1j4fxjr\"}\n\n\n\n\n\n\n\n\n\n\nBody parameters\n\n\n\n\n\n\nsession\n: the sessionId for which the token should be associated\n\n\nrole\n \n(optional. Check \nOpenViduRole\n section of OpenVidu Node Client for a complete description)\n\n\nSUBSCRIBER\n\n\nPUBLISHER\n \n(default)\n\n\nMODERATOR\n\n\n\n\n\n\ndata\n \n(optional)\n : an optional string to associate any metadata to this token (usually participant's information). Maximum 1000 chars\n\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\ntoken\n: token value. Send it to one client to pass it as a parameter in openvidu-browser method \nSession.connect()\n\n\nsession\n: same as in the body request\n\n\nrole\n: same as in the body request\n\n\ndata\n: same as in the body request\n\n\nid\n: same value as \ntoken\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: token successfully created and ready to be used by one client to connec to the associated session\n\n\n400\n: problem with body parameters\n\n\n\n\n\n\n\n\nPOST \n/api/recordings/start\n\n\n\n\n\n\n\n\nSTART SESSION RECORDING\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/recordings/start\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/json\n\n\n\n\n\n\nBody\n\n\n{\"session\": \"SESSION_ID\", \"name\": \"NAME\", \"recordingLayout\": \"RECORDING_LAYOUT\"}\n\n\n\n\n\n\nSample return\n\n\n{\"createdAt\": 1521196095981, \"duration\": 0, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 0, \"status\": \"started\", \"url\": null}\n\n\n\n\n\n\n\n\n\n\nBody parameters\n\n\n\n\n\n\nsession\n: the sessionId belonging to the session you want to start recording\n\n\nname\n \n(optional)\n : the name you want to give to the video file. You can access this same property in openvidu-browser on recordingEvents. If no name is provided, the video file will be named after \nid\n property of the recording\n\n\nrecordingLayout\n \n(optional)\n : you can override the \ndefaultRecordingLayout\n property set on \nPOST /api/sessions\n. This allows you to use different layouts if you start and stop recording the same session more than once\n\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\ncreatedAt\n: time when the recording started in UTC milliseconds\n\n\nduration\n: duration of the video file in seconds (0 until stop operation is called)\n\n\nhasAudio\n: true if the recording has an audio track, false otherwise (currently fixed to \ntrue\n)\n\n\nhasVideo\n: true if the recording has a video track, false otherwise (currently fixed to \ntrue\n)\n\n\nid\n: recording identifier. Store it to perform other operations such as stop, get or delete the recording\n\n\nrecordingLayout\n: the recording layout that is being used\n\n\nname\n: name of the recording (currently same as \nid\n)\n\n\nsessionId\n: session associated to the recording (same value as \nsession\n in the body request)\n\n\nsize\n: size in bytes of the video file (0 until stop operation is called)\n\n\nstatus\n: set to \n\"started\"\n\n\nurl\n: set to \nnull\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: the session has started to be recorded. The moment this response is retrieved, it means that the video file is already created and contains proper data, and that the recording can be stopped with guarantees\n\n\n404\n: no session exists for the passed sessionId\n\n\n400\n: the session has no connected participants\n\n\n409\n: the session is not configured for using MediaMode \nROUTED\n or it is already being recorded\n\n\n501\n: OpenVidu Server recording module is disabled (\nopenvidu.recording\n property set to \nfalse\n)\n\n\n\n\n\n\n\n\nPOST \n/api/recordings/stop/\nRECORDING_ID\n\n\n\n\n\n\n\n\nSTOP SESSION RECORDING\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/recordings/stop/\nRECORDING_ID\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\nSample return\n\n\n{\"createdAt\": 1521196095981, \"duration\": 20.88, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 3766979, \"status\": \"stopped\", \"url\": null}\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\ncreatedAt\n: time when the recording started in UTC milliseconds\n\n\nduration\n: duration of the video file in seconds\n\n\nhasAudio\n: true if the recording has an audio track, false otherwise (currently fixed to \ntrue\n)\n\n\nhasVideo\n: true if the recording has a video track, false otherwise (currently fixed to \ntrue\n)\n\n\nid\n: recording identifier\n\n\nrecordingLayout\n: the recording layout that is being used\n\n\nname\n: name of the recording (currently same as \nid\n)\n\n\nsessionId\n: session associated to the recording\n\n\nsize\n: size in bytes of the video file\n\n\nstatus\n: set to \n\"stopped\"\n or \n\"available\"\n depending on whether openvidu-server property \nopenvidu.recording.public-access\n is false or true\n\n\nurl\n: set to \nnull\n or \n\"https://YOUR_OPENVIDU_SERVER_IP/recordings/\nRECORDING_ID\n.mp4\"\n depending on whether openvidu-server property \nopenvidu.recording.public-access\n is false or true\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: the session has successfully stopped from being recorded. The video file is ready to be reproduced\n\n\n400\n: RECORDING_ID parameter not found in form url-encoded\n\n\n404\n: no recording exists for the passed recording id\n\n\n406\n: recording has \nstarting\n status. Wait until \nstarted\n status before stopping the recording\n\n\n\n\n\n\n\n\nGET \n/api/recordings/\nRECORDING_ID\n\n\n\n\n\n\n\n\nGET RECORDING INFO\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nGET\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/recordings/\nRECORDING_ID\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\nSample return\n\n\n{\"createdAt\": 1521196095981, \"duration\": 20.88, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 3766979, \"status\": \"stopped\", \"url\": null}\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\ncreatedAt\n: time when the recording started in UTC milliseconds\n\n\nduration\n: duration of the video file in seconds (0 until stop operation is called)\n\n\nhasAudio\n: true if the recording has an audio track, false otherwise (currently fixed to \ntrue\n)\n\n\nhasVideo\n: true if the recording has a video track, false otherwise (currently fixed to \ntrue\n)\n\n\nid\n: recording identifier. Store it to perform other operations such as stop, get or delete the recording\n\n\nrecordingLayout\n: the recording layout that is being used\n\n\nname\n: name of the recording (currently same as \nid\n)\n\n\nsessionId\n: session associated to the recording (same value as \nsession\n in the body request)\n\n\nsize\n: size in bytes of the video file (0 until stop operation is called)\n\n\nstatus\n: status of the recording (\n\"starting\"\n, \n\"started\"\n, \n\"stopped\"\n, \n\"available\"\n, \n\"failed\"\n)\n\n\nurl\n: set to \nnull\n until stop operation is called. Then can be \nnull\n or \n\"https://YOUR_OPENVIDU_SERVER_IP/recordings/\nRECORDING_ID\n.mp4\"\n depending on whether openvidu-server property \nopenvidu.recording.public-access\n is false or true\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: the recording information has been successfully retrieved\n\n\n404\n: no recording exists for the passed recording id\n\n\n\n\n\n\n\n\nGET \n/api/recordings\n\n\n\n\n\n\n\n\nLIST RECORDINGS INFO\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nGET\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/recordings\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\n\n\n\n\n\n\nSample return\n\n\n{\"count\": 2, \"items\": [{\"duration\": 132.08, \"hasVideo\": true, \"createdAt\": 1521202349460, \"hasAudio\": true, \"size\": 22887561, \"recordingLayout\": \"BEST_FIT\", \"name\": \"n0kcws1evvn3esmo\", \"id\": \"n0kcws1evvn3esmo\", \"sessionId\": \"wss://localhost:4443/n0kcws1evvn3esmo\", \"url\": \"https://localhost:4443/recordings/n0kcws1evvn3esmo.mp4\", \"status\": \"available\"}, {\"duration\": 20.88, \"hasVideo\": true, \"createdAt\": 1521200592175, \"hasAudio\": true, \"size\": 3766979, \"recordingLayout\": \"BEST_FIT\", \"name\": \"gm0hdsv6n8asjgcs\", \"id\": \"gm0hdsv6n8asjgcs\", \"sessionId\": \"wss://localhost:4443/gm0hdsv6n8asjgcs\", \"url\": \"https://localhost:4443/recordings/gm0hdsv6n8asjgcs.mp4\", \"status\": \"available\"}]}\n\n\n\n\n\n\n\n\n\n\nReturned JSON\n\n\n\n\ncount\n: number of total recordings\n\n\nitems\n: array of recording information in JSON format. Each item has the same properties as stated in the return value of method \nGET /api/recordings/\n\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n200\n: all of the available recording information has been successfully retrieved\n\n\n\n\n\n\n\n\nDELETE \n/api/recordings/\nRECORDING_ID\n\n\n\n\n\n\n\n\nDELETE RECORDING\n\n\nPARAMETERS\n\n\n\n\n\n\n\n\n\n\nOperation\n\n\nDELETE\n\n\n\n\n\n\nURL\n\n\nhttps://\nYOUR_OPENVIDUSERVER_IP\n/api/recordings/\nRECORDING_ID\n\n\n\n\n\n\nHeaders\n\n\nAuthorization: Basic \nEncodeBase64(OPENVIDUAPP:\nYOUR_SECRET\n)\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\nSample return\n\n\nReturns nothing\n\n\n\n\n\n\n\n\n\n\nHTTP responses\n\n\n\n\n204\n: the video file and all of its metadata has been successfully deleted from the host\n\n\n404\n: no recording exists for the passed recording id\n\n\n409\n: the recording has \n\"started\"\n status. Stop it before deletion", 
            "title": "REST  API"
        }, 
        {
            "location": "/reference-docs/REST-API/#post-apisessions", 
            "text": "NEW SESSIONID  PARAMETERS      Operation  POST    URL  https:// YOUR_OPENVIDUSERVER_IP /api/sessions    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/json    Body  {\"mediaMode\": \"MEDIA_MODE\", \"recordingMode\": \"RECORDING_MODE\", \"defaultRecordingLayout\": \"RECORDING_LAYOUT\", \"defaultCustomLayout\": \"CUSTOM_LAYOUT\", \"customSessionId\": \"CUSTOM_SESSION_ID\"}    Sample return  {\"id\": \"wss://localhost:4443/jpifeuzfati5qaj8\"}      Body parameters    mediaMode   (optional)  ROUTED   (default)  : Media streams will be routed through OpenVidu Server. This Media Mode is mandatory for session recording  Not available yet:  RELAYED    recordingMode   (optional)  ALWAYS : Automatic recording from the first user publishing until the last participant leaves the session  MANUAL   (default)  : If you want to manage when start and stop the recording    defaultRecordingLayout   (optional)  BEST_FIT (default)  : A grid layout where all the videos are evenly distributed  CUSTOM : Use your own custom layout. See  Custom recording layouts  section to learn how  Not available yet:  PICTURE_IN_PICTURE ,  VERTICAL_PRESENTATION ,  HORIZONTAL_PRESENTATION    defaultCustomLayout   (optional)  A relative path indicating the custom recording layout to be used if more than one is available. Only applies if  defaultRecordingLayout  is set to  CUSTOM . Default to empty string (if so custom layout expected under path set with  openvidu-server configuration  property  openvidu.recording.custom-layout )    customSessionId   (optional)  You can fix the  sessionId  that will be assigned to the session with this parameter. If you make another request with the exact same  customSessionId  while previous session already exists, no session will be created and a  409  http response will be returned. If this parameter is an empty string or not sent at all, OpenVidu Server will generate a random sessionId for you.        Returned JSON   id : session identifier. Store it for generating tokens and starting session's recording. It is actually the URL where the client will connect to access the session      HTTP responses   200 : session successfully created and sessionId ready to be used  400 : problem with body parameters  409 : parameter  customSessionId  corresponds to an existing session. There has been no change at all in the state of OpenVidu Server", 
            "title": "POST /api/sessions"
        }, 
        {
            "location": "/reference-docs/REST-API/#post-apitokens", 
            "text": "NEW TOKEN  PARAMETERS      Operation  POST    URL  https:// YOUR_OPENVIDUSERVER_IP /api/tokens    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/json    Body  {\"session\": \"SESSION_ID\", \"role\": \"ROLE\", \"data\": \"DATA\"}    Sample return  {\"token\": \"tjyqiq2dw1j4fxjr\", \"session\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"role\": \"PUBLISHER\", \"data\": \"secure_user_data\", \"id\": \"tjyqiq2dw1j4fxjr\"}      Body parameters    session : the sessionId for which the token should be associated  role   (optional. Check  OpenViduRole  section of OpenVidu Node Client for a complete description)  SUBSCRIBER  PUBLISHER   (default)  MODERATOR    data   (optional)  : an optional string to associate any metadata to this token (usually participant's information). Maximum 1000 chars      Returned JSON   token : token value. Send it to one client to pass it as a parameter in openvidu-browser method  Session.connect()  session : same as in the body request  role : same as in the body request  data : same as in the body request  id : same value as  token      HTTP responses   200 : token successfully created and ready to be used by one client to connec to the associated session  400 : problem with body parameters", 
            "title": "POST /api/tokens"
        }, 
        {
            "location": "/reference-docs/REST-API/#post-apirecordingsstart", 
            "text": "START SESSION RECORDING  PARAMETERS      Operation  POST    URL  https:// YOUR_OPENVIDUSERVER_IP /api/recordings/start    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/json    Body  {\"session\": \"SESSION_ID\", \"name\": \"NAME\", \"recordingLayout\": \"RECORDING_LAYOUT\"}    Sample return  {\"createdAt\": 1521196095981, \"duration\": 0, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 0, \"status\": \"started\", \"url\": null}      Body parameters    session : the sessionId belonging to the session you want to start recording  name   (optional)  : the name you want to give to the video file. You can access this same property in openvidu-browser on recordingEvents. If no name is provided, the video file will be named after  id  property of the recording  recordingLayout   (optional)  : you can override the  defaultRecordingLayout  property set on  POST /api/sessions . This allows you to use different layouts if you start and stop recording the same session more than once      Returned JSON   createdAt : time when the recording started in UTC milliseconds  duration : duration of the video file in seconds (0 until stop operation is called)  hasAudio : true if the recording has an audio track, false otherwise (currently fixed to  true )  hasVideo : true if the recording has a video track, false otherwise (currently fixed to  true )  id : recording identifier. Store it to perform other operations such as stop, get or delete the recording  recordingLayout : the recording layout that is being used  name : name of the recording (currently same as  id )  sessionId : session associated to the recording (same value as  session  in the body request)  size : size in bytes of the video file (0 until stop operation is called)  status : set to  \"started\"  url : set to  null      HTTP responses   200 : the session has started to be recorded. The moment this response is retrieved, it means that the video file is already created and contains proper data, and that the recording can be stopped with guarantees  404 : no session exists for the passed sessionId  400 : the session has no connected participants  409 : the session is not configured for using MediaMode  ROUTED  or it is already being recorded  501 : OpenVidu Server recording module is disabled ( openvidu.recording  property set to  false )", 
            "title": "POST /api/recordings/start"
        }, 
        {
            "location": "/reference-docs/REST-API/#post-apirecordingsstoprecording_id", 
            "text": "STOP SESSION RECORDING  PARAMETERS      Operation  POST    URL  https:// YOUR_OPENVIDUSERVER_IP /api/recordings/stop/ RECORDING_ID    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/x-www-form-urlencoded    Sample return  {\"createdAt\": 1521196095981, \"duration\": 20.88, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 3766979, \"status\": \"stopped\", \"url\": null}      Returned JSON   createdAt : time when the recording started in UTC milliseconds  duration : duration of the video file in seconds  hasAudio : true if the recording has an audio track, false otherwise (currently fixed to  true )  hasVideo : true if the recording has a video track, false otherwise (currently fixed to  true )  id : recording identifier  recordingLayout : the recording layout that is being used  name : name of the recording (currently same as  id )  sessionId : session associated to the recording  size : size in bytes of the video file  status : set to  \"stopped\"  or  \"available\"  depending on whether openvidu-server property  openvidu.recording.public-access  is false or true  url : set to  null  or  \"https://YOUR_OPENVIDU_SERVER_IP/recordings/ RECORDING_ID .mp4\"  depending on whether openvidu-server property  openvidu.recording.public-access  is false or true      HTTP responses   200 : the session has successfully stopped from being recorded. The video file is ready to be reproduced  400 : RECORDING_ID parameter not found in form url-encoded  404 : no recording exists for the passed recording id  406 : recording has  starting  status. Wait until  started  status before stopping the recording", 
            "title": "POST /api/recordings/stop/&lt;RECORDING_ID&gt;"
        }, 
        {
            "location": "/reference-docs/REST-API/#get-apirecordingsrecording_id", 
            "text": "GET RECORDING INFO  PARAMETERS      Operation  GET    URL  https:// YOUR_OPENVIDUSERVER_IP /api/recordings/ RECORDING_ID    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/x-www-form-urlencoded    Sample return  {\"createdAt\": 1521196095981, \"duration\": 20.88, \"hasAudio\": true, \"hasVideo\": true, \"id\": \"jpifeuzfati5qaj8\", \"recordingLayout\": \"BEST_FIT\", \"name\": \"jpifeuzfati5qaj8\", \"sessionId\": \"wss://localhost:4443/jpifeuzfati5qaj8\", \"size\": 3766979, \"status\": \"stopped\", \"url\": null}      Returned JSON   createdAt : time when the recording started in UTC milliseconds  duration : duration of the video file in seconds (0 until stop operation is called)  hasAudio : true if the recording has an audio track, false otherwise (currently fixed to  true )  hasVideo : true if the recording has a video track, false otherwise (currently fixed to  true )  id : recording identifier. Store it to perform other operations such as stop, get or delete the recording  recordingLayout : the recording layout that is being used  name : name of the recording (currently same as  id )  sessionId : session associated to the recording (same value as  session  in the body request)  size : size in bytes of the video file (0 until stop operation is called)  status : status of the recording ( \"starting\" ,  \"started\" ,  \"stopped\" ,  \"available\" ,  \"failed\" )  url : set to  null  until stop operation is called. Then can be  null  or  \"https://YOUR_OPENVIDU_SERVER_IP/recordings/ RECORDING_ID .mp4\"  depending on whether openvidu-server property  openvidu.recording.public-access  is false or true      HTTP responses   200 : the recording information has been successfully retrieved  404 : no recording exists for the passed recording id", 
            "title": "GET /api/recordings/&lt;RECORDING_ID&gt;"
        }, 
        {
            "location": "/reference-docs/REST-API/#get-apirecordings", 
            "text": "LIST RECORDINGS INFO  PARAMETERS      Operation  GET    URL  https:// YOUR_OPENVIDUSERVER_IP /api/recordings    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET )    Sample return  {\"count\": 2, \"items\": [{\"duration\": 132.08, \"hasVideo\": true, \"createdAt\": 1521202349460, \"hasAudio\": true, \"size\": 22887561, \"recordingLayout\": \"BEST_FIT\", \"name\": \"n0kcws1evvn3esmo\", \"id\": \"n0kcws1evvn3esmo\", \"sessionId\": \"wss://localhost:4443/n0kcws1evvn3esmo\", \"url\": \"https://localhost:4443/recordings/n0kcws1evvn3esmo.mp4\", \"status\": \"available\"}, {\"duration\": 20.88, \"hasVideo\": true, \"createdAt\": 1521200592175, \"hasAudio\": true, \"size\": 3766979, \"recordingLayout\": \"BEST_FIT\", \"name\": \"gm0hdsv6n8asjgcs\", \"id\": \"gm0hdsv6n8asjgcs\", \"sessionId\": \"wss://localhost:4443/gm0hdsv6n8asjgcs\", \"url\": \"https://localhost:4443/recordings/gm0hdsv6n8asjgcs.mp4\", \"status\": \"available\"}]}      Returned JSON   count : number of total recordings  items : array of recording information in JSON format. Each item has the same properties as stated in the return value of method  GET /api/recordings/      HTTP responses   200 : all of the available recording information has been successfully retrieved", 
            "title": "GET /api/recordings"
        }, 
        {
            "location": "/reference-docs/REST-API/#delete-apirecordingsrecording_id", 
            "text": "DELETE RECORDING  PARAMETERS      Operation  DELETE    URL  https:// YOUR_OPENVIDUSERVER_IP /api/recordings/ RECORDING_ID    Headers  Authorization: Basic  EncodeBase64(OPENVIDUAPP: YOUR_SECRET ) Content-Type: application/x-www-form-urlencoded    Sample return  Returns nothing      HTTP responses   204 : the video file and all of its metadata has been successfully deleted from the host  404 : no recording exists for the passed recording id  409 : the recording has  \"started\"  status. Stop it before deletion", 
            "title": "DELETE /api/recordings/&lt;RECORDING_ID&gt;"
        }, 
        {
            "location": "/reference-docs/openvidu-server-params/", 
            "text": "OpenVidu Server configuration parameters\n\n\n\n\n\n\nList of configuration parameters when launching openvidu-server\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nserver.port\n\n\nPort where OpenVidu Server will listen to client's connections\n\n\n4443\n\n\n\n\n\n\nkms.uris\n\n\nKMS URL's to which OpenVidu Server will try to connect. They are tested in order until a valid one is found\n\n\n[\\\"ws://localhost:8888/kurento\\\"]\n(default value for a KMS running in the same machine as OpenVidu Server)\n\n\n\n\n\n\nopenvidu.secret\n\n\nSecret used to connect to OpenVidu Server. This value is required when using the \nREST API\n or any server client (\nopenvidu-java-client\n, \nopenvidu-node-client\n), as well as when connecting to openvidu-server dashboard\n\n\nMY_SECRET\n\n\n\n\n\n\nopenvidu.publicurl\n\n\nURL to connect clients to OpenVidu Server. This can be the full IP (protocol, host and port) or just a domain name if you have configured it. For example:\n\u2022 \nhttps://my.openvidu.server.com\n\u2022 \nhttps://12.34.56.78:4443/\n\n\nlocal\n(with default value \nlocal\n this parameter will be set to \nlocalhost:PORT\n, being \nPORT\n the param \nserver.port\n)\n\n\n\n\n\n\nopenvidu.cdr\n\n\nWhether to enable Call Detail Record or not (check \nCall Detail Record\n)\n\n\nfalse\n\n\n\n\n\n\nopenvidu.recording\n\n\nWhether to enable recording module or not (check \nRecording\n)\n\n\nfalse\n\n\n\n\n\n\nopenvidu.recording.path\n\n\nSystem path where to store the video files of recorded sessions\n\n\n/opt/openvidu/recordings\n\n\n\n\n\n\nopenvidu.recording.public-access\n\n\nWhether to allow free http access to recorded sessions or not.\nIf \ntrue\n path \nhttps://OPENVIDU_SERVER_IP:[server.port]/[openvidu.recording.path]\n will be publicly accessible through \nhttps://OPENVIDU_SERVER_IP:[server.port]/recordings\n path.\nFor example, for OpenVidu Server launched in \nmy-domain.com\n and configured with \nserver.port=5000\n, \nopenvidu.recording=true\n, \nopenvidu.recording-path=/my/path\n and \nopenvidu.recording.public-access=true\n : A session with id \nfoo\n that has been recorded will generate a video file locally stored under \n/my/path/foo.mp4\n and accesible by any client connecting to \nhttps://my-domain.com:5000/recordings/foo.mp4\n.\nIf \nfalse\n HTTP basic authentication will be required to access any video file stored under that route (as requested when connecting to OpenVidu dashboard on \nhttps://OPENVIDU_SERVER_IP:[server.port]\n)\n\n\nfalse\n\n\n\n\n\n\nopenvidu.recording.notification\n\n\nWhich users should receive the recording events in the client side (\nrecordingStarted\n, \nrecordingStopped\n). Can be \nall\n (every user connected to the session), \npublisher_moderator\n (users with role 'PUBLISHER' or 'MODERATOR') or \nnone\n (no user will receive these events)\n\n\npublisher_moderator\n\n\n\n\n\n\nopenvidu.recording.custom-layout\n\n\nWhere should OpenVidu Server look for custom recording layouts\n\n\n/opt/openvidu/custom-layout\n\n\n\n\n\n\nserver.ssl.key-store\n\n\nPath for using custom JKS certificate\n\n\n(selfsigned OpenVidu key-store)\n\n\n\n\n\n\nserver.ssl.key-store-password\n\n\nPassword for the custom JKS\n\n\n(selfsigned OpenVidu password)\n\n\n\n\n\n\nserver.ssl.key-alias\n\n\nAlias for the custom JKS\n\n\n(selfsigned OpenVidu alias)\n\n\n\n\n\n\n\n\nExamples:\n\n\njava -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://my.openvidu.server.ip:3333 -Dopenvidu.cdr=true -Dserver.port=3333 -Dkms.uris=[\\\nws://my.kms.ip:8888/kurento\\\n] -jar openvidu-server.jar\n\n\n\n\ndocker run -d -p 3333:3333 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://my.openvidu.server.ip:3333 -e openvidu.cdr=true -e server.port=3333 -e kms.uris=[\\\nws://my.kms.ip:8888/kurento\\\n] openvidu/openvidu-server\n\n\n\n\n\n\nList of additional configuration parameters when launching \nopenvidu-server-kms\n Docker container\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nSample value\n\n\n\n\n\n\n\n\n\n\nKMS_STUN_IP\n\n\nIP of STUN server used by KMS\n\n\nstun.l.google.com\n (free STUN server from Google)\n\n\n\n\n\n\nKMS_STUN_PORT\n\n\nPORT of STUN server used by KMS\n\n\n19302\n (free STUN server from Google)\n\n\n\n\n\n\nKMS_TURN_URL\n\n\nConfiguration for TURN server used by KMS\n\n\nuser:pass@turn_public_ip:turn_port\n (\nuser\n and \npass\n of the TURN server, \nturn_public_ip\n its publicly accessible url and \nturn_port\n the port the TURN server listens to\n\n\n\n\n\n\n\n\nExample:\n\n\ndocker run -d -p 3333:3333 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://my.openvidu.server.ip:3333 -e openvidu.cdr=true -e server.port=3333 -e KMS_STUN_IP=stun.l.google.com -e KMS_STUN_PORT=19302 -e KMS_TURN_URL=myuser:mypass@54.54.54.54:3478 openvidu/openvidu-server-kms", 
            "title": "OpenVidu Server configuration"
        }, 
        {
            "location": "/reference-docs/openvidu-server-params/#list-of-configuration-parameters-when-launching-openvidu-server", 
            "text": "Parameter  Description  Default value      server.port  Port where OpenVidu Server will listen to client's connections  4443    kms.uris  KMS URL's to which OpenVidu Server will try to connect. They are tested in order until a valid one is found  [\\\"ws://localhost:8888/kurento\\\"] (default value for a KMS running in the same machine as OpenVidu Server)    openvidu.secret  Secret used to connect to OpenVidu Server. This value is required when using the  REST API  or any server client ( openvidu-java-client ,  openvidu-node-client ), as well as when connecting to openvidu-server dashboard  MY_SECRET    openvidu.publicurl  URL to connect clients to OpenVidu Server. This can be the full IP (protocol, host and port) or just a domain name if you have configured it. For example: \u2022  https://my.openvidu.server.com \u2022  https://12.34.56.78:4443/  local (with default value  local  this parameter will be set to  localhost:PORT , being  PORT  the param  server.port )    openvidu.cdr  Whether to enable Call Detail Record or not (check  Call Detail Record )  false    openvidu.recording  Whether to enable recording module or not (check  Recording )  false    openvidu.recording.path  System path where to store the video files of recorded sessions  /opt/openvidu/recordings    openvidu.recording.public-access  Whether to allow free http access to recorded sessions or not. If  true  path  https://OPENVIDU_SERVER_IP:[server.port]/[openvidu.recording.path]  will be publicly accessible through  https://OPENVIDU_SERVER_IP:[server.port]/recordings  path. For example, for OpenVidu Server launched in  my-domain.com  and configured with  server.port=5000 ,  openvidu.recording=true ,  openvidu.recording-path=/my/path  and  openvidu.recording.public-access=true  : A session with id  foo  that has been recorded will generate a video file locally stored under  /my/path/foo.mp4  and accesible by any client connecting to  https://my-domain.com:5000/recordings/foo.mp4 . If  false  HTTP basic authentication will be required to access any video file stored under that route (as requested when connecting to OpenVidu dashboard on  https://OPENVIDU_SERVER_IP:[server.port] )  false    openvidu.recording.notification  Which users should receive the recording events in the client side ( recordingStarted ,  recordingStopped ). Can be  all  (every user connected to the session),  publisher_moderator  (users with role 'PUBLISHER' or 'MODERATOR') or  none  (no user will receive these events)  publisher_moderator    openvidu.recording.custom-layout  Where should OpenVidu Server look for custom recording layouts  /opt/openvidu/custom-layout    server.ssl.key-store  Path for using custom JKS certificate  (selfsigned OpenVidu key-store)    server.ssl.key-store-password  Password for the custom JKS  (selfsigned OpenVidu password)    server.ssl.key-alias  Alias for the custom JKS  (selfsigned OpenVidu alias)     Examples:  java -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://my.openvidu.server.ip:3333 -Dopenvidu.cdr=true -Dserver.port=3333 -Dkms.uris=[\\ ws://my.kms.ip:8888/kurento\\ ] -jar openvidu-server.jar  docker run -d -p 3333:3333 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://my.openvidu.server.ip:3333 -e openvidu.cdr=true -e server.port=3333 -e kms.uris=[\\ ws://my.kms.ip:8888/kurento\\ ] openvidu/openvidu-server", 
            "title": "List of configuration parameters when launching openvidu-server"
        }, 
        {
            "location": "/reference-docs/openvidu-server-params/#list-of-additional-configuration-parameters-when-launching-openvidu-server-kms-docker-container", 
            "text": "Parameter  Description  Sample value      KMS_STUN_IP  IP of STUN server used by KMS  stun.l.google.com  (free STUN server from Google)    KMS_STUN_PORT  PORT of STUN server used by KMS  19302  (free STUN server from Google)    KMS_TURN_URL  Configuration for TURN server used by KMS  user:pass@turn_public_ip:turn_port  ( user  and  pass  of the TURN server,  turn_public_ip  its publicly accessible url and  turn_port  the port the TURN server listens to     Example:  docker run -d -p 3333:3333 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://my.openvidu.server.ip:3333 -e openvidu.cdr=true -e server.port=3333 -e KMS_STUN_IP=stun.l.google.com -e KMS_STUN_PORT=19302 -e KMS_TURN_URL=myuser:mypass@54.54.54.54:3478 openvidu/openvidu-server-kms", 
            "title": "List of additional configuration parameters when launching openvidu-server-kms Docker container"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/", 
            "text": "OpenVidu Server Call Detail Record\n\n\n\n\n\n\nOpenVidu Server offers a CDR logging system, so you can easily keep record of every session, every user connecting to them and every media connection established by each one of the users (sending or receiving). To start OpenVidu Server with CDR enabled, launch it with option \nopenvidu.cdr=true\n. The CDR file will be located under \nlog/\n folder in the same path as your Java executable.\n\n\nThe record is a plain text file containing one standard JSON entry for each line. All JSON entries have the following structure:\n\n\n{\"EVENT_NAME\": {\"sessionId\": \"SESSION_ID\", \"timestamp\": TIMESTAMP, \"PROP_1\": \"VALUE_1\",\"PROP_2\": \"VALUE_2\", ... }}\n\n\nSo every entry is a JSON object identified by a specific event name, and all of them have as properties the \nsessionId\n identifying the video-session for which this event was registered and the \ntimestamp\n. Besides this two common properties, there are custom properties for every specific event with useful information. The complete list of possible JSON entries is available below:\n\n\n\n\n\nsessionCreated\n\n\nRecorded when a new session has been created.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nsessionCreated\n:{\nsessionId\n:\nfds4e07mdug1ga3h\n,\ntimestamp\n:1516292370848}}\n\n\n\n\n\n\n\nsessionDestroyed\n\n\nRecorded when a session has finished.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nstartTime\n\n\nTime when the session started\n\n\nUTC milliseconds\n\n\n\n\n\n\nendTime\n\n\nTime when the session finished\n\n\nUTC milliseconds\n\n\n\n\n\n\nduration\n\n\nTotal duration of the session\n\n\nSeconds\n\n\n\n\n\n\nreason\n\n\nWhy the session was destroyed\n\n\n[\n\"lastParticipantLeft\"\n,\n\"openviduServerStopped\"\n]\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nsessionDestroyed\n:{\nduration\n:9,\nreason\n:\nlastParticipantLeft\n,\nstartTime\n:1523971683579,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nendTime\n:1523971692891,\ntimestamp\n:1523971692891}}\n\n\n\n\n\n\n\nparticipantJoined\n\n\nRecorded when a user has connected to a session.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nparticipantId\n\n\nIdentifier of the participant\n\n\nA string with the participant unique identifier\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nparticipantJoined\n:{\nparticipantId\n:\n6ptvp0in09fhbroy\n,\nsessionId\n:\nfds4e07mdug1ga3h\n,\ntimestamp\n:1523971683629}}\n\n\n\n\n\n\n\nparticipantLeft\n\n\nRecorded when a user has left a session.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nparticipantId\n\n\nIdentifier of the participant\n\n\nA string with the participant unique identifier\n\n\n\n\n\n\nstartTime\n\n\nTime when the participant joined the session\n\n\nUTC milliseconds\n\n\n\n\n\n\nendTime\n\n\nTime when the participant left the session\n\n\nUTC milliseconds\n\n\n\n\n\n\nduration\n\n\nTotal duration of the participant's connection to the session\n\n\nSeconds\n\n\n\n\n\n\nreason\n\n\nHow the participant left the session\n\n\n[\n\"unsubscribe\"\n,\n\"unpublish\"\n,\n\"disconnect\"\n,\n\"networkDisconnect\"\n,\n\"openviduServerStopped\"\n]\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nparticipantLeft\n:{\nparticipantId\n:\n6ptvp0in09fhbroy\n,\nduration\n:9,\nreason\n:\ndisconnect\n,\nstartTime\n:1523971683629,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nendTime\n:1523971692866,\ntimestamp\n:1523971692866}}\n\n\n\n\n\n\n\nwebrtcConnectionCreated\n\n\nRecorded when a new media stream has been established. Can be an \"INBOUND\" connection (the user is receiving a stream from a publisher of the session) or an \"OUTBOUND\" connection (the user is a publishing a stream to the session).\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nparticipantId\n\n\nIdentifier of the participant\n\n\nA string with the participant unique identifier\n\n\n\n\n\n\nconnection\n\n\nWhether the media connection is an inbound connection (the participant is receiving media from OpenVidu) or an outbound connection (the participant is sending media to OpenVidu)\n\n\n[\n\"INBOUND\"\n,\n\"OUTBOUND\"\n]\n\n\n\n\n\n\nreceivingFrom\n\n\nIf \nconnection\n is \n\"INBOUND\"\n, the participant from whom the media stream is being received\n\n\nA string with the participant (sender) unique identifier\n\n\n\n\n\n\naudioEnabled\n\n\nWhether the media connection is sending audio or not\n\n\n[\ntrue\n,\nfalse\n]\n\n\n\n\n\n\nvideoEnabled\n\n\nWhether the media connection is sending video or not\n\n\n[\ntrue\n,\nfalse\n]\n\n\n\n\n\n\nvideoSource\n\n\nIf \nvideoEnabled\n is \ntrue\n, the type of video that is being transmitted\n\n\n[\n\"CAMERA\"\n,\n\"SCREEN\"\n]\n\n\n\n\n\n\nvideoFramerate\n\n\nIf \nvideoEnabled\n is \ntrue\n, the framerate of the transmitted video\n\n\nNumber of fps\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nwebrtcConnectionCreated\n:{\nparticipantId\n:\n6ptvp0in09fhbroy\n,\nvideoSource\n:\nCAMERA\n,\nconnection\n:\nINBOUND\n,\naudioEnabled\n:true,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nvideoEnabled\n:true,\nreceivingFrom\n:\needki0mookh577mx\n,\ntimestamp\n:1523971686215,\nvideoFramerate\n:30}}\n\n\n\n\n\n\n\nwebrtcConnectionDestroyed\n\n\nRecorded when any media stream connection is closed.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nparticipantId\n\n\nIdentifier of the participant\n\n\nA string with the participant unique identifier\n\n\n\n\n\n\nconnection\n\n\nWhether the media connection is an inbound connection (the participant is receiving media from OpenVidu) or an outbound connection (the participant is sending media to OpenVidu)\n\n\n[\n\"INBOUND\"\n,\n\"OUTBOUND\"\n]\n\n\n\n\n\n\nreceivingFrom\n\n\nIf \nconnection\n is \n\"INBOUND\"\n, the participant from whom the media stream is being received\n\n\nA string with the participant (sender) unique identifier\n\n\n\n\n\n\naudioEnabled\n\n\nWhether the media connection is sending audio or not\n\n\n[\ntrue\n,\nfalse\n]\n\n\n\n\n\n\nvideoEnabled\n\n\nWhether the media connection is sending video or not\n\n\n[\ntrue\n,\nfalse\n]\n\n\n\n\n\n\nvideoSource\n\n\nIf \nvideoEnabled\n is \ntrue\n, the type of video that is being transmitted\n\n\n[\n\"CAMERA\"\n,\n\"SCREEN\"\n]\n\n\n\n\n\n\nvideoFramerate\n\n\nIf \nvideoEnabled\n is \ntrue\n, the framerate of the transmitted video\n\n\nNumber of fps\n\n\n\n\n\n\nstartTime\n\n\nTime when the media connection was established\n\n\nUTC milliseconds\n\n\n\n\n\n\nendTime\n\n\nTime when the media connection was disposed\n\n\nUTC milliseconds\n\n\n\n\n\n\nduration\n\n\nTotal duration of the media connection\n\n\nSeconds\n\n\n\n\n\n\nreason\n\n\nHow the WebRTC connection was destroyed\n\n\n[\n\"unsubscribe\"\n,\n\"unpublish\"\n,\n\"disconnect\"\n,\n\"networkDisconnect\"\n,\n\"openviduServerStopped\"\n]\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nwebrtcConnectionDestroyed\n:{\nreason\n:\ndisconnect\n,\naudioEnabled\n:true,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nvideoEnabled\n:true,\nreceivingFrom\n:\needki0mookh577mx\n,\nparticipantId\n:\n6ptvp0in09fhbroy\n,\nduration\n:6,\nvideoSource\n:\nCAMERA\n,\nconnection\n:\nINBOUND\n,\nstartTime\n:1523971686215,\nendTime\n:1523971692831,\ntimestamp\n:1523971692831,\nvideoFramerate\n:30}}\n\n\n\n\n\n\n\nrecordingStarted\n\n\nRecorded when a new session has started to be recorded\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nid\n\n\nUnique identifier of the recording\n\n\nA string with the recording unique identifier\n\n\n\n\n\n\nrecordingLayout\n\n\nThe type of layout used in the recording\n\n\nA \nRecordingLayout\n value (BEST_FIT, PICTURE_IN_PICTURE, CUSTOM ...)\n\n\n\n\n\n\nhasAudio\n\n\nWheter the recording file has audio or not\n\n\n[\ntrue\n,\nfalse\n] (current version always \ntrue\n)\n\n\n\n\n\n\nhasVideo\n\n\nWheter the recording file has video or not\n\n\n[\ntrue\n,\nfalse\n] (current version always \ntrue\n)\n\n\n\n\n\n\nsize\n\n\nThe size of the video file\n\n\n0\n\n\n\n\n\n\nduration\n\n\nDuration of the video file\n\n\n0\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nrecordingStarted\n:{\nduration\n:0,\nhasVideo\n:true,\nhasAudio\n:true,\nsize\n:0,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nid\n:\nfds4e07mdug1ga3h\n,\nlayout\n:\nBEST_FIT\n,\ntimestamp\n:1523973259519}}\n\n\n\n\n\n\n\nrecordingStopped\n\n\nRecorded when a new session has stopped being recorded\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nsessionId\n\n\nSession for which the event was triggered\n\n\nA string with the session unique identifier\n\n\n\n\n\n\ntimestamp\n\n\nTime when the event was triggered\n\n\nUTC milliseconds\n\n\n\n\n\n\nid\n\n\nUnique identifier of the recording\n\n\nA string with the recording unique identifier\n\n\n\n\n\n\nrecordingLayout\n\n\nThe type of layout used in the recording\n\n\nA \nRecordingLayout\n value (BEST_FIT, PICTURE_IN_PICTURE, CUSTOM ...)\n\n\n\n\n\n\nhasAudio\n\n\nWheter the recording file has audio or not\n\n\n[\ntrue\n,\nfalse\n] (current version always \ntrue\n)\n\n\n\n\n\n\nhasVideo\n\n\nWheter the recording file has video or not\n\n\n[\ntrue\n,\nfalse\n] (current version always \ntrue\n)\n\n\n\n\n\n\nsize\n\n\nThe size of the video file\n\n\nBytes\n\n\n\n\n\n\nduration\n\n\nDuration of the video file\n\n\nSeconds\n\n\n\n\n\n\n\n\nExample:\n\n\n{\nrecordingStopped\n:{\nduration\n:4,\nhasVideo\n:true,\nhasAudio\n:true,\nsize\n:4919937,\nsessionId\n:\nfds4e07mdug1ga3h\n,\nid\n:\nfds4e07mdug1ga3h\n,\nlayout\n:\nBEST_FIT\n,\ntimestamp\n:1523973286992}}", 
            "title": "OpenVidu Server CDR"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#sessioncreated", 
            "text": "Recorded when a new session has been created.     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds     Example:  { sessionCreated :{ sessionId : fds4e07mdug1ga3h , timestamp :1516292370848}}", 
            "title": "sessionCreated"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#sessiondestroyed", 
            "text": "Recorded when a session has finished.     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    startTime  Time when the session started  UTC milliseconds    endTime  Time when the session finished  UTC milliseconds    duration  Total duration of the session  Seconds    reason  Why the session was destroyed  [ \"lastParticipantLeft\" , \"openviduServerStopped\" ]     Example:  { sessionDestroyed :{ duration :9, reason : lastParticipantLeft , startTime :1523971683579, sessionId : fds4e07mdug1ga3h , endTime :1523971692891, timestamp :1523971692891}}", 
            "title": "sessionDestroyed"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#participantjoined", 
            "text": "Recorded when a user has connected to a session.     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    participantId  Identifier of the participant  A string with the participant unique identifier     Example:  { participantJoined :{ participantId : 6ptvp0in09fhbroy , sessionId : fds4e07mdug1ga3h , timestamp :1523971683629}}", 
            "title": "participantJoined"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#participantleft", 
            "text": "Recorded when a user has left a session.     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    participantId  Identifier of the participant  A string with the participant unique identifier    startTime  Time when the participant joined the session  UTC milliseconds    endTime  Time when the participant left the session  UTC milliseconds    duration  Total duration of the participant's connection to the session  Seconds    reason  How the participant left the session  [ \"unsubscribe\" , \"unpublish\" , \"disconnect\" , \"networkDisconnect\" , \"openviduServerStopped\" ]     Example:  { participantLeft :{ participantId : 6ptvp0in09fhbroy , duration :9, reason : disconnect , startTime :1523971683629, sessionId : fds4e07mdug1ga3h , endTime :1523971692866, timestamp :1523971692866}}", 
            "title": "participantLeft"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#webrtcconnectioncreated", 
            "text": "Recorded when a new media stream has been established. Can be an \"INBOUND\" connection (the user is receiving a stream from a publisher of the session) or an \"OUTBOUND\" connection (the user is a publishing a stream to the session).     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    participantId  Identifier of the participant  A string with the participant unique identifier    connection  Whether the media connection is an inbound connection (the participant is receiving media from OpenVidu) or an outbound connection (the participant is sending media to OpenVidu)  [ \"INBOUND\" , \"OUTBOUND\" ]    receivingFrom  If  connection  is  \"INBOUND\" , the participant from whom the media stream is being received  A string with the participant (sender) unique identifier    audioEnabled  Whether the media connection is sending audio or not  [ true , false ]    videoEnabled  Whether the media connection is sending video or not  [ true , false ]    videoSource  If  videoEnabled  is  true , the type of video that is being transmitted  [ \"CAMERA\" , \"SCREEN\" ]    videoFramerate  If  videoEnabled  is  true , the framerate of the transmitted video  Number of fps     Example:  { webrtcConnectionCreated :{ participantId : 6ptvp0in09fhbroy , videoSource : CAMERA , connection : INBOUND , audioEnabled :true, sessionId : fds4e07mdug1ga3h , videoEnabled :true, receivingFrom : eedki0mookh577mx , timestamp :1523971686215, videoFramerate :30}}", 
            "title": "webrtcConnectionCreated"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#webrtcconnectiondestroyed", 
            "text": "Recorded when any media stream connection is closed.     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    participantId  Identifier of the participant  A string with the participant unique identifier    connection  Whether the media connection is an inbound connection (the participant is receiving media from OpenVidu) or an outbound connection (the participant is sending media to OpenVidu)  [ \"INBOUND\" , \"OUTBOUND\" ]    receivingFrom  If  connection  is  \"INBOUND\" , the participant from whom the media stream is being received  A string with the participant (sender) unique identifier    audioEnabled  Whether the media connection is sending audio or not  [ true , false ]    videoEnabled  Whether the media connection is sending video or not  [ true , false ]    videoSource  If  videoEnabled  is  true , the type of video that is being transmitted  [ \"CAMERA\" , \"SCREEN\" ]    videoFramerate  If  videoEnabled  is  true , the framerate of the transmitted video  Number of fps    startTime  Time when the media connection was established  UTC milliseconds    endTime  Time when the media connection was disposed  UTC milliseconds    duration  Total duration of the media connection  Seconds    reason  How the WebRTC connection was destroyed  [ \"unsubscribe\" , \"unpublish\" , \"disconnect\" , \"networkDisconnect\" , \"openviduServerStopped\" ]     Example:  { webrtcConnectionDestroyed :{ reason : disconnect , audioEnabled :true, sessionId : fds4e07mdug1ga3h , videoEnabled :true, receivingFrom : eedki0mookh577mx , participantId : 6ptvp0in09fhbroy , duration :6, videoSource : CAMERA , connection : INBOUND , startTime :1523971686215, endTime :1523971692831, timestamp :1523971692831, videoFramerate :30}}", 
            "title": "webrtcConnectionDestroyed"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#recordingstarted", 
            "text": "Recorded when a new session has started to be recorded     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    id  Unique identifier of the recording  A string with the recording unique identifier    recordingLayout  The type of layout used in the recording  A  RecordingLayout  value (BEST_FIT, PICTURE_IN_PICTURE, CUSTOM ...)    hasAudio  Wheter the recording file has audio or not  [ true , false ] (current version always  true )    hasVideo  Wheter the recording file has video or not  [ true , false ] (current version always  true )    size  The size of the video file  0    duration  Duration of the video file  0     Example:  { recordingStarted :{ duration :0, hasVideo :true, hasAudio :true, size :0, sessionId : fds4e07mdug1ga3h , id : fds4e07mdug1ga3h , layout : BEST_FIT , timestamp :1523973259519}}", 
            "title": "recordingStarted"
        }, 
        {
            "location": "/reference-docs/openvidu-server-cdr/#recordingstopped", 
            "text": "Recorded when a new session has stopped being recorded     Property  Description  Value      sessionId  Session for which the event was triggered  A string with the session unique identifier    timestamp  Time when the event was triggered  UTC milliseconds    id  Unique identifier of the recording  A string with the recording unique identifier    recordingLayout  The type of layout used in the recording  A  RecordingLayout  value (BEST_FIT, PICTURE_IN_PICTURE, CUSTOM ...)    hasAudio  Wheter the recording file has audio or not  [ true , false ] (current version always  true )    hasVideo  Wheter the recording file has video or not  [ true , false ] (current version always  true )    size  The size of the video file  Bytes    duration  Duration of the video file  Seconds     Example:  { recordingStopped :{ duration :4, hasVideo :true, hasAudio :true, size :4919937, sessionId : fds4e07mdug1ga3h , id : fds4e07mdug1ga3h , layout : BEST_FIT , timestamp :1523973286992}}", 
            "title": "recordingStopped"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/", 
            "text": "Deploying OpenVidu Demos on AWS (TUTORIAL)\n\n\n\n\n\n\nDeploying on AWS with Cloud Formation\n\n\nWe have packed all our demos in one single template for AWS CloudFormation. You can follow these steps and see how easy it is to deploy OpenVidu in the cloud.\n\n\n1. Access to the console of AWS Cloud Formation\n\n\nGo to CloudFormation\n\n\n2. Click on \nCreate Stack\n\n\n\n    \n\n  \n\n\n3. Option \nSpecify an Amazon S3 template URL\n with the following URL\n\n\nhttps://s3-eu-west-1.amazonaws.com/aws.openvidu.io/CF-OpenVidu-Demos-latest.json\n\n  \nCopy\n\n\n\n    \n\n  \n\n\n4. Complete the configuration fields\n\n\nWe provide 3 different scenarios: you can use the default \nSELF-SIGNED CERTIFICATE\n stored in the application (users will need to accept the security alert) or if you have a custom domain, either allow \nLET'S ENCRYPT\n to automatically generate a valid and free certificate for your domain or use your own \nCUSTOM CERTIFICATE\n if you already have one.\n\n\n\n  \n\n    \n\n      \n\n      \nSelf-Signed certificate\n\n      \nLet's Encrypt\n certificate\n\n      \nCustom certificate\n\n    \n\n    \n\n      \nStack name\n\n      \nYour choice\n\n      \nYour choice\n\n      \nYour choice\n\n    \n\n    \n\n      \nType of SSL Certificate\n\n      \nselfsigned\n\n      \nletsencrypt\n\n      \nowncert\n\n    \n\n    \n\n      \nEmail\n\n      \n\n      \nYour choice\n\n      \n\n    \n\n    \n\n      \nFully qualified domain name\n\n      \n\n      \nYour custom domain\n(for example: \nopenvidu.io\n)\n\n      \nYour custom domain\n(for example: \nopenvidu.io\n)\n\n    \n\n    \n\n      \nElastic IP\n\n      \n\n      \nOne AWS Elastic IP you generated\n(check \nAWS Docs\n to generate a new one)\n\n      \nOne AWS Elastic IP you generated\n(check \nAWS Docs\n to generate a new one)\n\n    \n\n    \n\n      \nCRT File\n\n      \n\n      \n\n      \nContent of your \n.crt\n file\n-----BEGIN CERTIFICATE-----\nfooFOOfooFOOfooFOOfoo...\n-----END CERTIFICATE-----\n\n    \n\n    \n\n      \nKEY File\n\n      \n\n      \n\n      \nContent of your \n.key\n file\n-----BEGIN RSA PRIVATE KEY-----\nfooFOOfooFOOfooFOOfoo...\n-----END RSA PRIVATE KEY-----\n\n    \n\n    \n\n      \nInstance Type\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n    \n\n    \n\n      \nKeyName\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n    \n\n  \n\n\n\n\n\n\n\nIf you are using \nLET'S ENCRYPT CERTIFICATE\n, of course you will need to register your ElasticIP in your DNS hosting service and associate it with the fully qualified domain name.\n\n\n\n\n5. Create your Stack\n\n\nNo extra options are necessary. Click on  \nNext\n \u279e \nNext\n \u279e \nCreate\n\n\nCREATE_IN_PROGRESS\n status will show up. You will now have to wait for a few minutes.\n\n\nDespite saying \nCREATE_COMPLETE\n, it can take up to 7 minutes to fully deploy the Demo Software, so please be patient.\n\n\n6. Access the demos through your new IP\n\n\nGo to \nOutputs\n tab to get your brand new IP and click on it (or if you have deployed the demos with Let's Encrypt under your own custom domain, then you should access through it).\n\n\n\n    \n\n  \n\n\n\n\nIMPORTANT\n: Even though the Status of your new Stack shows \"CREATE_COMPLETE\", \nit will take a bit longer until you can access your demos. Be patient.", 
            "title": "Deploying OpenVidu Demos on AWS (TUTORIAL)"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#deploying-on-aws-with-cloud-formation", 
            "text": "We have packed all our demos in one single template for AWS CloudFormation. You can follow these steps and see how easy it is to deploy OpenVidu in the cloud.", 
            "title": "Deploying on AWS with Cloud Formation"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#1-access-to-the-console-of-aws-cloud-formation", 
            "text": "Go to CloudFormation", 
            "title": "1. Access to the console of AWS Cloud Formation"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#2-click-on-create-stack", 
            "text": "", 
            "title": "2. Click on Create Stack"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#3-option-specify-an-amazon-s3-template-url-with-the-following-url", 
            "text": "https://s3-eu-west-1.amazonaws.com/aws.openvidu.io/CF-OpenVidu-Demos-latest.json \n   Copy", 
            "title": "3. Option Specify an Amazon S3 template URL with the following URL"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#4-complete-the-configuration-fields", 
            "text": "We provide 3 different scenarios: you can use the default  SELF-SIGNED CERTIFICATE  stored in the application (users will need to accept the security alert) or if you have a custom domain, either allow  LET'S ENCRYPT  to automatically generate a valid and free certificate for your domain or use your own  CUSTOM CERTIFICATE  if you already have one.  \n   \n     \n       \n       Self-Signed certificate \n       Let's Encrypt  certificate \n       Custom certificate \n     \n     \n       Stack name \n       Your choice \n       Your choice \n       Your choice \n     \n     \n       Type of SSL Certificate \n       selfsigned \n       letsencrypt \n       owncert \n     \n     \n       Email \n       \n       Your choice \n       \n     \n     \n       Fully qualified domain name \n       \n       Your custom domain (for example:  openvidu.io ) \n       Your custom domain (for example:  openvidu.io ) \n     \n     \n       Elastic IP \n       \n       One AWS Elastic IP you generated (check  AWS Docs  to generate a new one) \n       One AWS Elastic IP you generated (check  AWS Docs  to generate a new one) \n     \n     \n       CRT File \n       \n       \n       Content of your  .crt  file -----BEGIN CERTIFICATE----- fooFOOfooFOOfooFOOfoo... -----END CERTIFICATE----- \n     \n     \n       KEY File \n       \n       \n       Content of your  .key  file -----BEGIN RSA PRIVATE KEY----- fooFOOfooFOOfooFOOfoo... -----END RSA PRIVATE KEY----- \n     \n     \n       Instance Type \n       Your choice (at least  t2.medium  recommended) \n       Your choice (at least  t2.medium  recommended) \n       Your choice (at least  t2.medium  recommended) \n     \n     \n       KeyName \n       Your choice (check  AWS Docs  to create a new one) \n       Your choice (check  AWS Docs  to create a new one) \n       Your choice (check  AWS Docs  to create a new one) \n     \n      If you are using  LET'S ENCRYPT CERTIFICATE , of course you will need to register your ElasticIP in your DNS hosting service and associate it with the fully qualified domain name.", 
            "title": "4. Complete the configuration fields"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#5-create-your-stack", 
            "text": "No extra options are necessary. Click on   Next  \u279e  Next  \u279e  Create  CREATE_IN_PROGRESS  status will show up. You will now have to wait for a few minutes.  Despite saying  CREATE_COMPLETE , it can take up to 7 minutes to fully deploy the Demo Software, so please be patient.", 
            "title": "5. Create your Stack"
        }, 
        {
            "location": "/deployment/deploying-demos-aws/#6-access-the-demos-through-your-new-ip", 
            "text": "Go to  Outputs  tab to get your brand new IP and click on it (or if you have deployed the demos with Let's Encrypt under your own custom domain, then you should access through it).  \n     \n     IMPORTANT : Even though the Status of your new Stack shows \"CREATE_COMPLETE\", \nit will take a bit longer until you can access your demos. Be patient.", 
            "title": "6. Access the demos through your new IP"
        }, 
        {
            "location": "/deployment/deploying-aws/", 
            "text": "Deploying OpenVidu Server and your app on AWS\n\n\n\n\n\n\nDeploying OpenVidu Server on AWS with Cloud Formation\n\n\nThe deployment of OpenVidu can be a piece of cake if you have an AWS account. Just follow these steps:\n\n\n1. Access to the console of AWS Cloud Formation\n\n\nGo to CloudFormation\n\n\n2. Click on \nCreate Stack\n\n\n\n    \n\n  \n\n\n3. Option \nSpecify an Amazon S3 template URL\n with the following URL\n\n\nhttps://s3-eu-west-1.amazonaws.com/aws.openvidu.io/CF-OpenVidu-latest.json\n\n  \nCopy\n\n\n\n    \n\n  \n\n\n4. Complete the configuration fields\n\n\nWe provide 3 different scenarios: you can use the default \nSELF-SIGNED CERTIFICATE\n stored in the application (users will need to accept the security alert) or if you have a custom domain, either allow \nLET'S ENCRYPT\n to automatically generate a valid and free certificate for your domain or use your own \nCUSTOM CERTIFICATE\n if you already have one.\n\n\n\n  \n\n    \n\n      \n\n      \nSelf-Signed certificate\n\n      \nLet's Encrypt\n certificate\n\n      \nCustom certificate\n\n    \n\n    \n\n      \nStack name\n\n      \nYour choice\n\n      \nYour choice\n\n      \nYour choice\n\n    \n\n    \n\n      \nType of SSL Certificate\n\n      \nselfsigned\n\n      \nletsencrypt\n\n      \nowncert\n\n    \n\n    \n\n      \nEmail\n\n      \n\n      \nYour choice\n\n      \n\n    \n\n    \n\n      \nFully qualified domain name\n\n      \n\n      \nYour custom domain\n(for example: \nopenvidu.io\n)\n\n      \nYour custom domain\n(for example: \nopenvidu.io\n)\n\n    \n\n    \n\n      \nElastic IP\n\n      \n\n      \nOne AWS Elastic IP you generated\n(check \nAWS Docs\n to generate a new one)\n\n      \nOne AWS Elastic IP you generated\n(check \nAWS Docs\n to generate a new one)\n\n    \n\n    \n\n      \nCRT File\n\n      \n\n      \n\n      \nContent of your \n.crt\n file\n-----BEGIN CERTIFICATE-----\nfooFOOfooFOOfooFOOfoo...\n-----END CERTIFICATE-----\n\n    \n\n    \n\n      \nKEY File\n\n      \n\n      \n\n      \nContent of your \n.key\n file\n-----BEGIN RSA PRIVATE KEY-----\nfooFOOfooFOOfooFOOfoo...\n-----END RSA PRIVATE KEY-----\n\n    \n\n    \n\n      \nOpenVidu Secret\n\n      \nYour choice\n\n      \nYour choice\n\n      \nYour choice\n\n    \n\n    \n\n      \nFree HTTP access to recorded videos\n(see \nopenvidu.recording.public-access\n property \nhere\n)\n\n      \ntrue / false\n\n      \ntrue / false\n\n      \ntrue / false\n\n    \n\n    \n\n      \nInstance Type\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n      \nYour choice\n(at least \nt2.medium\n recommended)\n\n    \n\n    \n\n      \nKeyName\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n      \nYour choice\n(check \nAWS Docs\n to create a new one)\n\n    \n\n  \n\n\n\n\n\n\n\nIf you are using \nLET'S ENCRYPT CERTIFICATE\n, of course you will need to register your ElasticIP in your DNS hosting service and associate it with the fully qualified domain name.\n\n\n\n\n5. Create your Stack\n\n\nNo extra options are necessary. Click on  \nNext\n \u279e \nNext\n \u279e \nCreate\n\n\nCREATE_IN_PROGRESS\n status will show up. You will now have to wait for a few minutes until it shows \nCREATE_COMPLETE\n.\n\n\n6. Access and test your OpenVidu Server through your new IP\n\n\nAfter status changes to \nCREATE_COMPLETE\n, go to \nOutputs\n tab to get your brand new IP and click on it (or if you have deployed under your own custom domain, then you should access through it).\n\n\n\n    \n\n  \n\n\nYou will connect to your OpenVidu dashboard. To access to it use:\n\n\n\n\nOPENVIDUAPP\n as username\n\n\nThe secret you chose on \nStep 4\n as password (field \nOpenVidu Secret\n in the table). \n\n\n\n\nAt OpenVidu dashboard you can test the video transmission. You can now add your own application to your instance. To learn how check the \nnext section\n.\n\n\nAdding your own app to CloudFormation OpenVidu Server\n\n\nOnce you have deployed your CloudFormation OpenVidu Server and checked that it is up and running, you can easily add your own application to the instance. Follow these steps:\n\n\n1. Upload your app to your EC2 instance\n\n\nIn Linux/Mac you can use \nscp\n command. In Windows (or If you prefer a more friendly GUI) you can use \nFileZilla\n. Furthermore, if your app is stored in a GitHub repo, you can directly clone it once you connect to your instance.\n\n\nRemember that the key will be the same you indicated when configuring the \nCloudFormation fields\n. \n\n\n2. Connect to your EC2 instance through SSH\n\n\nRemember that the key will be the same you indicated when configuring the \nCloudFormation fields\n. In case of doubt, check \nAWS docs\n.\n\n\n3. Configure your app\n\n\nDepending on the framework of your app:\n\n\n\n\nPlain HTML/CSS/JS\n\n\n\n\n\n\nIf your app doesn't have a server-side and it is plain HTML, CSS and JavaScript, you just have to add your web files into \n/var/www/html/\n. You will have instant access to it through \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/\n\n\n\n\nIf you want to test the deployment of a plain HTML/CSS/JS app, you can use \nopenvidu-insecure-js\n\n\n\n\n\n\n\n\n\n\nJava\n\n\n\n\n\n\nCopy your JAR or WAR into \n/opt/\n\n\n\n\n\n\nWrite a script to launch your app with all the parameters it needs, and store it under \n/opt/\n. For example, a file \n/opt/YOUR_LAUNCHER.sh\n containing:\n\n\ncd /opt\njava -jar -Dserver.port=4040 myapp.jar\n\n\n\n\n\nIMPORTANT 1\n: It is crucial to navigate to \n/opt\n before the launching command. Otherwise, the system will surely have some problems for finding your files\n\n\nIMPORTANT 2\n: Obviously your app will need Java to run. You must install the correct version of Java in your machine (check version: \njava -version\n)\n\n\nIMPORTANT 3\n: Make sure the script you made is executable.(For Linux you could do like this \nchmod +x YOUR_LAUNCHER.sh\n)\n\n\n\n\n\n\n\n\nConfigure Nginx: add a new \nlocation\n directive to the file \n/etc/nginx/sites-enabled/default\n, inside the \nserver { }\n group:\n\n\n  location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:PORT;\n  }\n\n\n\nFor example\n\n\n  location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:4040;\n  }\n\n\n\n\n\n\n\nConfigure Supervisor: add the script you wrote in the second step to the file \n/etc/supervisor/conf.d/openvidu.conf\n like this:\n\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true\n\n\n\nNow your \n/etc/supervisor/conf.d/openvidu.conf\n must looks like this:\n\n\n  [supervisord]\n  nodaemon=true\n  logfile=/var/log/supervisor/supervisord.log\n  pidfile=/var/run/supervisord.pid\n  loglevel=debug\n\n  [program:openvidu-server]\n  command=java -jar -Dopenvidu.secret=\"MY_SECRET\" -Dserver.ssl.enabled=false -Dopenvidu.pu$\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true\n\n\n\n\n\nTo connect your Java app to OpenVidu Server in order to get your sessionIds and tokens (whether you use the \nREST API\n or \nopenvidu-java-client\n), you will need to use the URL \nhttps://localhost:4443\n. \nlocalhost\n because both your app and OpenVidu Server run in the same machine. \n4443\n because there's where OpenVidu Server listens for petitions. For example, our tutorial \nopenvidu-js-java\n sets this parameter as an environment variable \nright here\n.\n\n\n\n\n\n\n\n\nRestart Nginx: \nsystemctl restart nginx\n\n\n\n\n\n\nRestart Supervisor: \nsystemctl restart supervisor\n\n\n\n\n\n\nYou will have access to your app through \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/\n\n\n\n\n\n\nTroubleshooting: If your app is not working as expected, there are a few files you should check for debugging: \n/var/log/nginx/\n (info about the proxy), \n/var/log/supervisor/\n (output of your app). You can also try to connect to your app directly through the port like \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN:YOUR_APP_PORT\n\n\n\n\nIf you want to test the deployment of a Java app, you can use \nopenvidu-js-java\n or \nopenvidu-mvc-java\n (\nrelease here\n)\n\n\n\n\n\n\n\n\n\n\nNode\n\n\n\n\n\n\nAdd your web files into \n/opt/\n\n\n\n\n\n\nWrite a script to launch your app with all the parameters it needs, and store it under \n/opt/\n. For example, a file \n/opt/YOUR_LAUNCHER.sh\n containing:\n\n\ncd /opt\nnode myserver.js 4040\n\n\n\n\n\nIMPORTANT 1\n: It is crucial to navigate to \n/opt\n before the launching command. Otherwise, the system will surely have some problems for finding your files\n\n\nIMPORTANT 2\n: Obviously your app will need Node to run. You must install the correct version of Node in your machine (check version: \nnodejs -v\n)\n\n\nIMPORTANT 3\n: Make sure the script you made is executable.(For Linux you could do like this \nchmod +x YOUR_LAUNCHER.sh\n)\n\n\n\n\n\n\n\n\nConfigure Nginx: add a new \nlocation\n directive to the file \n/etc/nginx/sites-enabled/default\n, inside the \nserver { }\n group::\n\n\n  location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:PORT;\n  }\n\n\n\nFor example\n\n\n  location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:4040;\n  }\n\n\n\n\n\n\n\nRestart Nginx: \nsystemctl restart nginx\n\n\n\n\n\n\nConfigure Supervisor: add the script you wrote in the second step to \n/etc/supervisor/conf.d/openvidu.conf\n like this:\n\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true\n\n\n\nNow your \n/etc/supervisor/conf.d/openvidu.conf\n must looks like this:\n\n\n  [supervisord]\n  nodaemon=true\n  logfile=/var/log/supervisor/supervisord.log\n  pidfile=/var/run/supervisord.pid\n  loglevel=debug\n\n  [program:openvidu-server]\n  command=java -jar -Dopenvidu.secret=\"MY_SECRET\" -Dserver.ssl.enabled=false -Dopenvidu.pu$\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true\n\n\n\n\n\nTo connect your Node app to OpenVidu Server in order to get your sessionIds and tokens (whether you use the \nREST API\n or \nopenvidu-node-client\n), you will need to use the URL \nhttps://localhost:4443\n. \nlocalhost\n because both your app and OpenVidu Server run in the same machine. \n4443\n because there's where OpenVidu Server listens for petitions. For example, our tutorial \nopenvidu-js-node\n expects this parameter as the first argument on launch command \nright here\n.\n\n\n\n\n\n\n\n\nRestart Supervisor: \nsystemctl restart supervisor\n\n\n\n\n\n\nYou will have access to your app through \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/\n\n\n\n\n\n\nTroubleshooting: If your app is not working as expected, there are a few files you should check for debugging: \n/var/log/nginx/\n (info about the proxy), \n/var/log/supervisor/\n (output of your app). You can also try to connect to your app directly through the port like \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN:YOUR_APP_PORT\n\n\n\n\nIf you want to test the deployment of a Node app, you can use \nopenvidu-js-node\n\n\n\n\n\n\n\n\n\n\nPHP, Ruby, Python, .NET...\n\n\nWe are not going to spell out in detail what is to be done with the rest of backend technologies, but you can get the idea from the Java and Node steps above. It is always the same process: take your app to your instance, place it under \n/opt/\n, configure Nginx and Supervisor (this last with the necessary launching script depending on your technology) and relaunch both services. Be sure that your machine has all the necessary dependencies and technologies to execute your application, depending on the framework (Java for a Java app, Node for a Node app, Ruby for a Ruby app...)\n\n\nVoil\u00e0! It is really this simple.\n\n\nPS: Multiple apps in the same instance\n\n\nTo launch multiple apps in the same instance, just store each one of them inside its own folder under \n/opt/\n. For example:\n\n\n\n\n/opt/YOUR_APP_1\n : will be available at \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/YOUR_APP_1/\n\n\n/opt/YOUR_APP_2\n : will be available at \nhttps://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/YOUR_APP_2/\n\n\n\n\nThe other steps explained above also need some adjustments related to paths:\n\n\n\n\n\n\nConfigure Nginx: now it would be...\n\n\nlocation /YOUR_APP_1 {\n  rewrite /YOUR_APP_1(.*) /$1 break;\n  proxy_pass https://localhost:PORT1;\n}\n\nlocation /YOUR_APP_2 {\n  rewrite /YOUR_APP_2(.*) /$1 break;\n  proxy_pass https://localhost:PORT2;\n}\n\n\n\n\n\n\n\nConfigure Supervisor: now...\n\n\n  [program:YOUR_APP_1]\n  command=/bin/bash /opt/YOUR_APP_1/YOUR_LAUNCHER_1.sh YOUR_APP1_PARAM_1 YOUR_APP1_PARAM_2 ...\n  redirect_stderr=true\n\n  [program:YOUR_APP_2]\n  command=/bin/bash /opt/YOUR_APP_2/YOUR_LAUNCHER_2.sh YOUR_APP2_PARAM_1 YOUR_APP2_PARAM_2 ...\n  redirect_stderr=true\n\n\n\n\n\n\n\n\n\n\nConnecting your external app to CloudFormation OpenVidu Server\n\n\nThe best production setup for OpenVidu is having your application deployed in a different dedicated server. That is, not being included in the same host as OpenVidu Server, which is the scenario explained in the \nprevious section\n (that all-in-one scenario is easier for the first approach to the deployment of your OpenVidu app. Try it if you want detailed instructions on how to deploy your app).\n\n\nOnce you have deployed your CloudFormation OpenVidu Server and checked that it is up and running, and after setting up your own application in its dedicated server:\n\n\n\n\nMake sure you know your \nOpenVidu Server public IP\n. That includes the protocol (\nhttps\n), the location and the port. For example: \nhttps://YOUR_SERVER_IP:4443/\n\n\nUse it in your application server to perform the \nREST\n operations, or to initialize your OpenVidu object if you are making use of \nopenvdiu-java-client\n or \nopenvidu-node-client\n :\n\n\nREST\n operations to \nhttps://OPENVIDUSERVER_PUBLIC_IP/api/METHOD\n \n\n\nopenvidu-java-client\n entrypoint is \nnew OpenVidu(OPENVIDUSERVER_PUBLIC_IP, OPENVIDU_SECRET)\n\n\nopenvidu-node-client\n entrypoint is \nnew OpenVidu(OPENVIDUSERVER_PUBLIC_IP, OPENVIDU_SECRET)\n \n\n\n\n\n\n\n\n\n\n\n\n\nIn the one-server-scenario of the \nprevious section\n the OpenVidu Server public IP would be \nhttps://localhost:4443\n, as both OpenVidu Server and your app live in the same host.", 
            "title": "Deploying OpenVidu Server and your app on AWS"
        }, 
        {
            "location": "/deployment/deploying-aws/#deploying-openvidu-server-on-aws-with-cloud-formation", 
            "text": "The deployment of OpenVidu can be a piece of cake if you have an AWS account. Just follow these steps:", 
            "title": "Deploying OpenVidu Server on AWS with Cloud Formation"
        }, 
        {
            "location": "/deployment/deploying-aws/#1-access-to-the-console-of-aws-cloud-formation", 
            "text": "Go to CloudFormation", 
            "title": "1. Access to the console of AWS Cloud Formation"
        }, 
        {
            "location": "/deployment/deploying-aws/#2-click-on-create-stack", 
            "text": "", 
            "title": "2. Click on Create Stack"
        }, 
        {
            "location": "/deployment/deploying-aws/#3-option-specify-an-amazon-s3-template-url-with-the-following-url", 
            "text": "https://s3-eu-west-1.amazonaws.com/aws.openvidu.io/CF-OpenVidu-latest.json \n   Copy", 
            "title": "3. Option Specify an Amazon S3 template URL with the following URL"
        }, 
        {
            "location": "/deployment/deploying-aws/#4-complete-the-configuration-fields", 
            "text": "We provide 3 different scenarios: you can use the default  SELF-SIGNED CERTIFICATE  stored in the application (users will need to accept the security alert) or if you have a custom domain, either allow  LET'S ENCRYPT  to automatically generate a valid and free certificate for your domain or use your own  CUSTOM CERTIFICATE  if you already have one.  \n   \n     \n       \n       Self-Signed certificate \n       Let's Encrypt  certificate \n       Custom certificate \n     \n     \n       Stack name \n       Your choice \n       Your choice \n       Your choice \n     \n     \n       Type of SSL Certificate \n       selfsigned \n       letsencrypt \n       owncert \n     \n     \n       Email \n       \n       Your choice \n       \n     \n     \n       Fully qualified domain name \n       \n       Your custom domain (for example:  openvidu.io ) \n       Your custom domain (for example:  openvidu.io ) \n     \n     \n       Elastic IP \n       \n       One AWS Elastic IP you generated (check  AWS Docs  to generate a new one) \n       One AWS Elastic IP you generated (check  AWS Docs  to generate a new one) \n     \n     \n       CRT File \n       \n       \n       Content of your  .crt  file -----BEGIN CERTIFICATE----- fooFOOfooFOOfooFOOfoo... -----END CERTIFICATE----- \n     \n     \n       KEY File \n       \n       \n       Content of your  .key  file -----BEGIN RSA PRIVATE KEY----- fooFOOfooFOOfooFOOfoo... -----END RSA PRIVATE KEY----- \n     \n     \n       OpenVidu Secret \n       Your choice \n       Your choice \n       Your choice \n     \n     \n       Free HTTP access to recorded videos (see  openvidu.recording.public-access  property  here ) \n       true / false \n       true / false \n       true / false \n     \n     \n       Instance Type \n       Your choice (at least  t2.medium  recommended) \n       Your choice (at least  t2.medium  recommended) \n       Your choice (at least  t2.medium  recommended) \n     \n     \n       KeyName \n       Your choice (check  AWS Docs  to create a new one) \n       Your choice (check  AWS Docs  to create a new one) \n       Your choice (check  AWS Docs  to create a new one) \n     \n      If you are using  LET'S ENCRYPT CERTIFICATE , of course you will need to register your ElasticIP in your DNS hosting service and associate it with the fully qualified domain name.", 
            "title": "4. Complete the configuration fields"
        }, 
        {
            "location": "/deployment/deploying-aws/#5-create-your-stack", 
            "text": "No extra options are necessary. Click on   Next  \u279e  Next  \u279e  Create  CREATE_IN_PROGRESS  status will show up. You will now have to wait for a few minutes until it shows  CREATE_COMPLETE .", 
            "title": "5. Create your Stack"
        }, 
        {
            "location": "/deployment/deploying-aws/#6-access-and-test-your-openvidu-server-through-your-new-ip", 
            "text": "After status changes to  CREATE_COMPLETE , go to  Outputs  tab to get your brand new IP and click on it (or if you have deployed under your own custom domain, then you should access through it).  \n     \n    You will connect to your OpenVidu dashboard. To access to it use:   OPENVIDUAPP  as username  The secret you chose on  Step 4  as password (field  OpenVidu Secret  in the table).    At OpenVidu dashboard you can test the video transmission. You can now add your own application to your instance. To learn how check the  next section .", 
            "title": "6. Access and test your OpenVidu Server through your new IP"
        }, 
        {
            "location": "/deployment/deploying-aws/#adding-your-own-app-to-cloudformation-openvidu-server", 
            "text": "Once you have deployed your CloudFormation OpenVidu Server and checked that it is up and running, you can easily add your own application to the instance. Follow these steps:", 
            "title": "Adding your own app to CloudFormation OpenVidu Server"
        }, 
        {
            "location": "/deployment/deploying-aws/#1-upload-your-app-to-your-ec2-instance", 
            "text": "In Linux/Mac you can use  scp  command. In Windows (or If you prefer a more friendly GUI) you can use  FileZilla . Furthermore, if your app is stored in a GitHub repo, you can directly clone it once you connect to your instance.  Remember that the key will be the same you indicated when configuring the  CloudFormation fields .", 
            "title": "1. Upload your app to your EC2 instance"
        }, 
        {
            "location": "/deployment/deploying-aws/#2-connect-to-your-ec2-instance-through-ssh", 
            "text": "Remember that the key will be the same you indicated when configuring the  CloudFormation fields . In case of doubt, check  AWS docs .", 
            "title": "2. Connect to your EC2 instance through SSH"
        }, 
        {
            "location": "/deployment/deploying-aws/#3-configure-your-app", 
            "text": "Depending on the framework of your app:", 
            "title": "3. Configure your app"
        }, 
        {
            "location": "/deployment/deploying-aws/#plain-htmlcssjs", 
            "text": "If your app doesn't have a server-side and it is plain HTML, CSS and JavaScript, you just have to add your web files into  /var/www/html/ . You will have instant access to it through  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/   If you want to test the deployment of a plain HTML/CSS/JS app, you can use  openvidu-insecure-js", 
            "title": "Plain HTML/CSS/JS"
        }, 
        {
            "location": "/deployment/deploying-aws/#java", 
            "text": "Copy your JAR or WAR into  /opt/    Write a script to launch your app with all the parameters it needs, and store it under  /opt/ . For example, a file  /opt/YOUR_LAUNCHER.sh  containing:  cd /opt\njava -jar -Dserver.port=4040 myapp.jar   IMPORTANT 1 : It is crucial to navigate to  /opt  before the launching command. Otherwise, the system will surely have some problems for finding your files  IMPORTANT 2 : Obviously your app will need Java to run. You must install the correct version of Java in your machine (check version:  java -version )  IMPORTANT 3 : Make sure the script you made is executable.(For Linux you could do like this  chmod +x YOUR_LAUNCHER.sh )     Configure Nginx: add a new  location  directive to the file  /etc/nginx/sites-enabled/default , inside the  server { }  group:    location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:PORT;\n  }  For example    location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:4040;\n  }    Configure Supervisor: add the script you wrote in the second step to the file  /etc/supervisor/conf.d/openvidu.conf  like this:    [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true  Now your  /etc/supervisor/conf.d/openvidu.conf  must looks like this:    [supervisord]\n  nodaemon=true\n  logfile=/var/log/supervisor/supervisord.log\n  pidfile=/var/run/supervisord.pid\n  loglevel=debug\n\n  [program:openvidu-server]\n  command=java -jar -Dopenvidu.secret=\"MY_SECRET\" -Dserver.ssl.enabled=false -Dopenvidu.pu$\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true   To connect your Java app to OpenVidu Server in order to get your sessionIds and tokens (whether you use the  REST API  or  openvidu-java-client ), you will need to use the URL  https://localhost:4443 .  localhost  because both your app and OpenVidu Server run in the same machine.  4443  because there's where OpenVidu Server listens for petitions. For example, our tutorial  openvidu-js-java  sets this parameter as an environment variable  right here .     Restart Nginx:  systemctl restart nginx    Restart Supervisor:  systemctl restart supervisor    You will have access to your app through  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/    Troubleshooting: If your app is not working as expected, there are a few files you should check for debugging:  /var/log/nginx/  (info about the proxy),  /var/log/supervisor/  (output of your app). You can also try to connect to your app directly through the port like  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN:YOUR_APP_PORT   If you want to test the deployment of a Java app, you can use  openvidu-js-java  or  openvidu-mvc-java  ( release here )", 
            "title": "Java"
        }, 
        {
            "location": "/deployment/deploying-aws/#node", 
            "text": "Add your web files into  /opt/    Write a script to launch your app with all the parameters it needs, and store it under  /opt/ . For example, a file  /opt/YOUR_LAUNCHER.sh  containing:  cd /opt\nnode myserver.js 4040   IMPORTANT 1 : It is crucial to navigate to  /opt  before the launching command. Otherwise, the system will surely have some problems for finding your files  IMPORTANT 2 : Obviously your app will need Node to run. You must install the correct version of Node in your machine (check version:  nodejs -v )  IMPORTANT 3 : Make sure the script you made is executable.(For Linux you could do like this  chmod +x YOUR_LAUNCHER.sh )     Configure Nginx: add a new  location  directive to the file  /etc/nginx/sites-enabled/default , inside the  server { }  group::    location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:PORT;\n  }  For example    location / {\n    rewrite /(.*) /$1 break;\n    proxy_pass https://localhost:4040;\n  }    Restart Nginx:  systemctl restart nginx    Configure Supervisor: add the script you wrote in the second step to  /etc/supervisor/conf.d/openvidu.conf  like this:    [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true  Now your  /etc/supervisor/conf.d/openvidu.conf  must looks like this:    [supervisord]\n  nodaemon=true\n  logfile=/var/log/supervisor/supervisord.log\n  pidfile=/var/run/supervisord.pid\n  loglevel=debug\n\n  [program:openvidu-server]\n  command=java -jar -Dopenvidu.secret=\"MY_SECRET\" -Dserver.ssl.enabled=false -Dopenvidu.pu$\n\n  [program:YOUR_APP]\n  command=/bin/bash /opt/YOUR_LAUNCHER.sh YOUR_APP_PARAM_1 YOUR_APP_PARAM_2 ...\n  redirect_stderr=true   To connect your Node app to OpenVidu Server in order to get your sessionIds and tokens (whether you use the  REST API  or  openvidu-node-client ), you will need to use the URL  https://localhost:4443 .  localhost  because both your app and OpenVidu Server run in the same machine.  4443  because there's where OpenVidu Server listens for petitions. For example, our tutorial  openvidu-js-node  expects this parameter as the first argument on launch command  right here .     Restart Supervisor:  systemctl restart supervisor    You will have access to your app through  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/    Troubleshooting: If your app is not working as expected, there are a few files you should check for debugging:  /var/log/nginx/  (info about the proxy),  /var/log/supervisor/  (output of your app). You can also try to connect to your app directly through the port like  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN:YOUR_APP_PORT   If you want to test the deployment of a Node app, you can use  openvidu-js-node", 
            "title": "Node"
        }, 
        {
            "location": "/deployment/deploying-aws/#php-ruby-python-net", 
            "text": "We are not going to spell out in detail what is to be done with the rest of backend technologies, but you can get the idea from the Java and Node steps above. It is always the same process: take your app to your instance, place it under  /opt/ , configure Nginx and Supervisor (this last with the necessary launching script depending on your technology) and relaunch both services. Be sure that your machine has all the necessary dependencies and technologies to execute your application, depending on the framework (Java for a Java app, Node for a Node app, Ruby for a Ruby app...)  Voil\u00e0! It is really this simple.", 
            "title": "PHP, Ruby, Python, .NET..."
        }, 
        {
            "location": "/deployment/deploying-aws/#ps-multiple-apps-in-the-same-instance", 
            "text": "To launch multiple apps in the same instance, just store each one of them inside its own folder under  /opt/ . For example:   /opt/YOUR_APP_1  : will be available at  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/YOUR_APP_1/  /opt/YOUR_APP_2  : will be available at  https://AMAZON_URL_OR_YOUR_CUSTOM_DOMAIN/YOUR_APP_2/   The other steps explained above also need some adjustments related to paths:    Configure Nginx: now it would be...  location /YOUR_APP_1 {\n  rewrite /YOUR_APP_1(.*) /$1 break;\n  proxy_pass https://localhost:PORT1;\n}\n\nlocation /YOUR_APP_2 {\n  rewrite /YOUR_APP_2(.*) /$1 break;\n  proxy_pass https://localhost:PORT2;\n}    Configure Supervisor: now...    [program:YOUR_APP_1]\n  command=/bin/bash /opt/YOUR_APP_1/YOUR_LAUNCHER_1.sh YOUR_APP1_PARAM_1 YOUR_APP1_PARAM_2 ...\n  redirect_stderr=true\n\n  [program:YOUR_APP_2]\n  command=/bin/bash /opt/YOUR_APP_2/YOUR_LAUNCHER_2.sh YOUR_APP2_PARAM_1 YOUR_APP2_PARAM_2 ...\n  redirect_stderr=true", 
            "title": "PS: Multiple apps in the same instance"
        }, 
        {
            "location": "/deployment/deploying-aws/#connecting-your-external-app-to-cloudformation-openvidu-server", 
            "text": "The best production setup for OpenVidu is having your application deployed in a different dedicated server. That is, not being included in the same host as OpenVidu Server, which is the scenario explained in the  previous section  (that all-in-one scenario is easier for the first approach to the deployment of your OpenVidu app. Try it if you want detailed instructions on how to deploy your app).  Once you have deployed your CloudFormation OpenVidu Server and checked that it is up and running, and after setting up your own application in its dedicated server:   Make sure you know your  OpenVidu Server public IP . That includes the protocol ( https ), the location and the port. For example:  https://YOUR_SERVER_IP:4443/  Use it in your application server to perform the  REST  operations, or to initialize your OpenVidu object if you are making use of  openvdiu-java-client  or  openvidu-node-client  :  REST  operations to  https://OPENVIDUSERVER_PUBLIC_IP/api/METHOD    openvidu-java-client  entrypoint is  new OpenVidu(OPENVIDUSERVER_PUBLIC_IP, OPENVIDU_SECRET)  openvidu-node-client  entrypoint is  new OpenVidu(OPENVIDUSERVER_PUBLIC_IP, OPENVIDU_SECRET)         In the one-server-scenario of the  previous section  the OpenVidu Server public IP would be  https://localhost:4443 , as both OpenVidu Server and your app live in the same host.", 
            "title": "Connecting your external app to CloudFormation OpenVidu Server"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/", 
            "text": "Deploying on Ubuntu with native services and executables\n\n\n\n\n\n\nInstallation process\n\n\nIf you prefer having KMS installed in your EC2 machine and your own version of openvidu-server, follow these few steps. \nUbuntu xenial 14.04\n and \nUbuntu trusty 16.04\n are supported.\n\n\n1. Install KMS (in first command: \nxenial\n for 16.04, \ntrusty\n for 14.04)\n\n\necho \ndeb http://ubuntu.openvidu.io/6.7.0 xenial kms6\n | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5\n\n\n\n\n2. Install COTURN\n\n\nsudo apt-get -y install coturn\n\n\n\n\n\n\nThis is a great implementation of a STUN/TURN server, necessary for connecting your users under some complicated circumstances. You can check its documentation \nhere\n.\nIf there's any problem with the installation on \nUbuntu trusty 14.04\n:\n\n\nwget -c http://ftp.us.debian.org/debian/pool/main/c/coturn/coturn_4.2.1.2-1_amd64.deb\n\n\nsudo dpkg -i coturn_4.2.1.2-1_amd64.deb\n\n\nsudo apt-get -f -y install\n\n\nsudo dpkg -i coturn_4.2.1.2-1_amd64.deb\n\n\n\n\n3. File \n/etc/kurento/modules/kurento/WebRtcEndpoint.conf.ini\n\n\nstunServerAddress=YOUR_MACHINE_PUBLIC_IP\nstunServerPort=3478\nturnURL=USER:PASS@YOUR_MACHINE_PUBLIC_IP:3478\n\n\n\n\n4. File \n/etc/turnserver.conf\n\n\nexternal-ip=YOUR_MACHINE_PUBLIC_IP\nfingerprint\nuser=USER:PASS\nlt-cred-mech\nrealm=kurento.org\nlog-file=/var/log/turnserver/turnserver.log\nsimple-log\n\n\n\n\n5. File \n/etc/default/coturn\n\n\nTURNSERVER_ENABLED=1\n\n\n\n\n6. Init services\n\n\nsudo service coturn restart\nsudo service kurento-media-server restart\n\n\n\n\n7A. Init openvidu-server Docker container...\n\n\nsudo docker run -d -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ --net=\nhost\n openvidu/openvidu-server\n\n\n\n\n\n\nTo quickly install the latest official stable version of \nDocker CE\n:\n\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n\n\nsudo apt-get update\n\n\nsudo apt-get -y install docker-ce\n\n\n\n\n\n\nGo to \nUsing your own certificate\n to add your certificate to the container instead of using the self-signed default one (which will launch a security warning on the user's browser).\n\n\n7B. ...or init your own openvidu-server executable\n\n\njava -jar -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ openvidu-server.jar \n\n\n\n\n\nGo to \nUsing your own certificate\n to add your certificate to the JAR instead of using the self-signed default one (which will launch a security warning on the user's browser).\n\n\n8. Finally check your server\n\n\nYou can connect to OpenVidu dashboard through \nhttps://YOUR_OPENVIDU_SERVER_MACHINE_PUBLIC_IP:4443\n (authorization is \nOPENVIDUAPP:YOUR_SECRET\n). Make sure you allow TCP and UDP inbound connections to your machine!\n\n\nTo connect your application to OpenVidu Server, use the same URL \nhttps://YOUR_OPENVIDU_SERVER_MACHINE_PUBLIC_IP:4443\n. To learn more, this scenario is exactly the same as portrayed \nhere\n.\n\n\nServer network requirements\n\n\nIn order for this deployment to work, you will have to meet 2 sets of needs in the machine hosting your services:\n\n\n\n\n\n\nFirst of all, you certainly need the machine to have a \npublic, reachable IP\n. The reason is pretty simple: we are precisely installing \nCOTURN\n service to cover those situations where the final users are hidden behind NATs or complex networks (\nlearn more\n). If the \nCOTURN\n itself is running inside an unreachable machine, your video transmission could fail in certain cases.\n\n\n\n\n\n\nBesides, the server needs some \nports\n opened in the firewall:\n\n\n\n\n3478 TCP \n UDP\n (\nCOTURN\n listens on port 3478 by default)\n\n\n49152 - 65535 UDP\n (WebRTC exchanges media through any of these ports)\n\n\n\n\n\n\n\n\n\n\nIf you were still in trouble, we provide a ready-to-use Amazon CloudFormation Stack to easily deploy OpenVidu in a few minutes \nhere\n.\n\n\n\n\nArchitectures\n\n\nYou can have the following scenarios depending on how many machines you have and what architecture you prefer. What are the advantages and disadvantages of each one of them? Well, it really depends on the power of the machine, the nature of your application and the load expected. In general, having all the services running in one machine will reduce its performance and scalability, but on the other hand, makes it easier the process of installation, configuration and launching.\n\n\nIf you are deploying with these instructions for the first time, we recommend using only one machine. When you verify that everything is working as expected, you can try different configurations to compare overall performance and load capacity.\n\n\n\n  \n\n    \n\n  \n\n  \n\n  \n\n    \n\n      \nApp, OpenVidu Server and KMS run in the same machine\n\n      \nApp runs in its own machine. OpenVidu Server and KMS run in the same machine\n\n      \nApp, OpenVidu Server and KMS all run in different machines\n\n    \n\n    \n\n  \n\n\n\n\n\nThe instructions above portray scenarios 1 and 2 in the image. In other words, we are supposing that OpenVidu Server and KMS will be hosted in the same machine. The only difference between options 1-2 and option 3 is that for steps 7A and 7B, another parameter is required when launching your openvidu-server:\n\n\n7A\n\n\ndocker run -d -p 4443:4443 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ -e kms.uris=[\\\nws://YOUR_KMS_MACHINE_IP:8888/kurento\\\n] openvidu/openvidu-server\n\n\n\n\n7B\n\n\njava -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ -Dkms.uris=[\\\nws://YOUR_KMS_MACHINE_IP:8888/kurento\\\n] -jar openvidu-server.jar", 
            "title": "Deploying OpenVidu in Ubuntu"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#installation-process", 
            "text": "If you prefer having KMS installed in your EC2 machine and your own version of openvidu-server, follow these few steps.  Ubuntu xenial 14.04  and  Ubuntu trusty 16.04  are supported.", 
            "title": "Installation process"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#1-install-kms-in-first-command-xenial-for-1604-trusty-for-1404", 
            "text": "echo  deb http://ubuntu.openvidu.io/6.7.0 xenial kms6  | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5", 
            "title": "1. Install KMS (in first command: xenial for 16.04, trusty for 14.04)"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#2-install-coturn", 
            "text": "sudo apt-get -y install coturn   This is a great implementation of a STUN/TURN server, necessary for connecting your users under some complicated circumstances. You can check its documentation  here .\nIf there's any problem with the installation on  Ubuntu trusty 14.04 :  wget -c http://ftp.us.debian.org/debian/pool/main/c/coturn/coturn_4.2.1.2-1_amd64.deb  sudo dpkg -i coturn_4.2.1.2-1_amd64.deb  sudo apt-get -f -y install  sudo dpkg -i coturn_4.2.1.2-1_amd64.deb", 
            "title": "2. Install COTURN"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#3-file-etckurentomoduleskurentowebrtcendpointconfini", 
            "text": "stunServerAddress=YOUR_MACHINE_PUBLIC_IP\nstunServerPort=3478\nturnURL=USER:PASS@YOUR_MACHINE_PUBLIC_IP:3478", 
            "title": "3. File /etc/kurento/modules/kurento/WebRtcEndpoint.conf.ini"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#4-file-etcturnserverconf", 
            "text": "external-ip=YOUR_MACHINE_PUBLIC_IP\nfingerprint\nuser=USER:PASS\nlt-cred-mech\nrealm=kurento.org\nlog-file=/var/log/turnserver/turnserver.log\nsimple-log", 
            "title": "4. File /etc/turnserver.conf"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#5-file-etcdefaultcoturn", 
            "text": "TURNSERVER_ENABLED=1", 
            "title": "5. File /etc/default/coturn"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#6-init-services", 
            "text": "sudo service coturn restart\nsudo service kurento-media-server restart", 
            "title": "6. Init services"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#7a-init-openvidu-server-docker-container", 
            "text": "sudo docker run -d -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ --net= host  openvidu/openvidu-server   To quickly install the latest official stable version of  Docker CE :  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"  sudo apt-get update  sudo apt-get -y install docker-ce    Go to  Using your own certificate  to add your certificate to the container instead of using the self-signed default one (which will launch a security warning on the user's browser).", 
            "title": "7A. Init openvidu-server Docker container..."
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#7b-or-init-your-own-openvidu-server-executable", 
            "text": "java -jar -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ openvidu-server.jar    Go to  Using your own certificate  to add your certificate to the JAR instead of using the self-signed default one (which will launch a security warning on the user's browser).", 
            "title": "7B. ...or init your own openvidu-server executable"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#8-finally-check-your-server", 
            "text": "You can connect to OpenVidu dashboard through  https://YOUR_OPENVIDU_SERVER_MACHINE_PUBLIC_IP:4443  (authorization is  OPENVIDUAPP:YOUR_SECRET ). Make sure you allow TCP and UDP inbound connections to your machine!  To connect your application to OpenVidu Server, use the same URL  https://YOUR_OPENVIDU_SERVER_MACHINE_PUBLIC_IP:4443 . To learn more, this scenario is exactly the same as portrayed  here .", 
            "title": "8. Finally check your server"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#server-network-requirements", 
            "text": "In order for this deployment to work, you will have to meet 2 sets of needs in the machine hosting your services:    First of all, you certainly need the machine to have a  public, reachable IP . The reason is pretty simple: we are precisely installing  COTURN  service to cover those situations where the final users are hidden behind NATs or complex networks ( learn more ). If the  COTURN  itself is running inside an unreachable machine, your video transmission could fail in certain cases.    Besides, the server needs some  ports  opened in the firewall:   3478 TCP   UDP  ( COTURN  listens on port 3478 by default)  49152 - 65535 UDP  (WebRTC exchanges media through any of these ports)      If you were still in trouble, we provide a ready-to-use Amazon CloudFormation Stack to easily deploy OpenVidu in a few minutes  here .", 
            "title": "Server network requirements"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#architectures", 
            "text": "You can have the following scenarios depending on how many machines you have and what architecture you prefer. What are the advantages and disadvantages of each one of them? Well, it really depends on the power of the machine, the nature of your application and the load expected. In general, having all the services running in one machine will reduce its performance and scalability, but on the other hand, makes it easier the process of installation, configuration and launching.  If you are deploying with these instructions for the first time, we recommend using only one machine. When you verify that everything is working as expected, you can try different configurations to compare overall performance and load capacity.  \n   \n     \n   \n   \n   \n     \n       App, OpenVidu Server and KMS run in the same machine \n       App runs in its own machine. OpenVidu Server and KMS run in the same machine \n       App, OpenVidu Server and KMS all run in different machines \n     \n     \n     The instructions above portray scenarios 1 and 2 in the image. In other words, we are supposing that OpenVidu Server and KMS will be hosted in the same machine. The only difference between options 1-2 and option 3 is that for steps 7A and 7B, another parameter is required when launching your openvidu-server:", 
            "title": "Architectures"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#7a", 
            "text": "docker run -d -p 4443:4443 -e openvidu.secret=YOUR_SECRET -e openvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ -e kms.uris=[\\ ws://YOUR_KMS_MACHINE_IP:8888/kurento\\ ] openvidu/openvidu-server", 
            "title": "7A"
        }, 
        {
            "location": "/deployment/deploying-ubuntu/#7b", 
            "text": "java -Dopenvidu.secret=YOUR_SECRET -Dopenvidu.publicurl=https://YOUR_MACHINE_PUBLIC_IP:4443/ -Dkms.uris=[\\ ws://YOUR_KMS_MACHINE_IP:8888/kurento\\ ] -jar openvidu-server.jar", 
            "title": "7B"
        }, 
        {
            "location": "/deployment/custom-certificate/", 
            "text": "Using your own certificate\n\n\n\n\n\n\nFor a JAR binary of OpenVidu Server\n\n\nYou will need a Java keystore (\n.jks\n). Check \nGet JKS from CRT and KEY\n section to see how to get it from your certificate's files.\nIn order to use your JKS, just set the following values for these properties on launch:\n\n\n\n\nserver.ssl.key-store\n\n\nserver.ssl.key-store-password\n\n\nserver.ssl.key-alias\n\n\n\n\n\n\nExample\n\n\njava -jar -Dopenvidu.secret=YOUR_SECRET -Dserver.ssl.key-store=PATH/TO/YOUR/KEYSTORE.jks -Dserver.ssl.key-store-password=YOUR_KEYSTORE_PASSWORD -Dserver.ssl.key-alias=YOUR_KEYSTORE_ALIAS openvidu-server.jar\n\n\n\n\n\n\nFor the Docker container of OpenVidu Server\n\n\nYou will need a Java keystore (\n.jks\n). Check \nGet JKS from CRT and KEY\n section to see how to get it from your certificate's files.\nIn order to use your JKS, just set the following values for these properties on launch:\n\n\n\n\nserver.ssl.key-store\n\n\nserver.ssl.key-store-password\n\n\nserver.ssl.key-alias\n\n\n\n\nYou must also indicate the \nvolume\n flag (-v) to mount your keystore file, letting know Docker the location of the file and that it should be only readable:\n\n\n\n\n-v /ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:ro\n\n\n\n\n\n\nExample\n\n\ndocker run -d -p 4443:4443 --rm -v /ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:ro -e openvidu.secret=YOUR_SECRET -e server.ssl.key-store=/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks -e server.ssl.key-store-password=YOUR_KEYSTORE_PASSWORD -e server.ssl.key-alias=YOUR_KEYSTORE_ALIAS openvidu/openvidu-server-kms\n\n\n\n\n\n\nFor the CloudFormation of OpenVidu Server\n\n\nFirst of all, remember we provide a super simple way of using a \nFREE\n, \nAUTOMATIC\n and 100% \nVALID\n certificate thanks to Let's Encrypt technology: when deploying your CloudFormation Stack, just fill in the form fields with the values from the column \nLET'S ENCRYPT CERTIFICATE\n.\n\n\nIf, however, you have already purchased your own certificate and you are determined to use it, you can easily add it to your CloudFormation stack. Just fill in the form fields with the values from the column \nCUSTOM CERTIFICATE\n.\n\n\n\n\nGet JKS from CRT and KEY\n\n\nOpenVidu Server is a Java application and therefore needs a Java keystore (.jks) for providing security certificates. If you don't have it, you can easily obtain a \n.jks\n file from your certificate (\n.crt\n) and private key (\n.key\n) files by using \nopenssl\n and \nkeytool\n :\n\n\nopenssl pkcs12 -export -name YOUR_CERT_NAME -in YOUR_CRT.crt -inkey YOUR_PRIVATE_KEY.key -out p12keystore.p12\n\n\n\n\nkeytool -importkeystore -destkeystore YOUR_KEYSTORE_NAME.jks -srckeystore p12keystore.p12 -srcstoretype pkcs12 -alias YOUR_JKS_ALIAS", 
            "title": "Using your own certificate"
        }, 
        {
            "location": "/deployment/custom-certificate/#for-a-jar-binary-of-openvidu-server", 
            "text": "You will need a Java keystore ( .jks ). Check  Get JKS from CRT and KEY  section to see how to get it from your certificate's files.\nIn order to use your JKS, just set the following values for these properties on launch:   server.ssl.key-store  server.ssl.key-store-password  server.ssl.key-alias", 
            "title": "For a JAR binary of OpenVidu Server"
        }, 
        {
            "location": "/deployment/custom-certificate/#example", 
            "text": "java -jar -Dopenvidu.secret=YOUR_SECRET -Dserver.ssl.key-store=PATH/TO/YOUR/KEYSTORE.jks -Dserver.ssl.key-store-password=YOUR_KEYSTORE_PASSWORD -Dserver.ssl.key-alias=YOUR_KEYSTORE_ALIAS openvidu-server.jar", 
            "title": "Example"
        }, 
        {
            "location": "/deployment/custom-certificate/#for-the-docker-container-of-openvidu-server", 
            "text": "You will need a Java keystore ( .jks ). Check  Get JKS from CRT and KEY  section to see how to get it from your certificate's files.\nIn order to use your JKS, just set the following values for these properties on launch:   server.ssl.key-store  server.ssl.key-store-password  server.ssl.key-alias   You must also indicate the  volume  flag (-v) to mount your keystore file, letting know Docker the location of the file and that it should be only readable:   -v /ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:ro", 
            "title": "For the Docker container of OpenVidu Server"
        }, 
        {
            "location": "/deployment/custom-certificate/#example_1", 
            "text": "docker run -d -p 4443:4443 --rm -v /ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks:ro -e openvidu.secret=YOUR_SECRET -e server.ssl.key-store=/ABSOLUTE/PATH/TO/YOUR/KEYSTORE.jks -e server.ssl.key-store-password=YOUR_KEYSTORE_PASSWORD -e server.ssl.key-alias=YOUR_KEYSTORE_ALIAS openvidu/openvidu-server-kms", 
            "title": "Example"
        }, 
        {
            "location": "/deployment/custom-certificate/#for-the-cloudformation-of-openvidu-server", 
            "text": "First of all, remember we provide a super simple way of using a  FREE ,  AUTOMATIC  and 100%  VALID  certificate thanks to Let's Encrypt technology: when deploying your CloudFormation Stack, just fill in the form fields with the values from the column  LET'S ENCRYPT CERTIFICATE .  If, however, you have already purchased your own certificate and you are determined to use it, you can easily add it to your CloudFormation stack. Just fill in the form fields with the values from the column  CUSTOM CERTIFICATE .", 
            "title": "For the CloudFormation of OpenVidu Server"
        }, 
        {
            "location": "/deployment/custom-certificate/#get-jks-from-crt-and-key", 
            "text": "OpenVidu Server is a Java application and therefore needs a Java keystore (.jks) for providing security certificates. If you don't have it, you can easily obtain a  .jks  file from your certificate ( .crt ) and private key ( .key ) files by using  openssl  and  keytool  :  openssl pkcs12 -export -name YOUR_CERT_NAME -in YOUR_CRT.crt -inkey YOUR_PRIVATE_KEY.key -out p12keystore.p12  keytool -importkeystore -destkeystore YOUR_KEYSTORE_NAME.jks -srckeystore p12keystore.p12 -srcstoretype pkcs12 -alias YOUR_JKS_ALIAS", 
            "title": "Get JKS from CRT and KEY"
        }, 
        {
            "location": "/developing/", 
            "text": "Developing OpenVidu\n\n\nThis documentation is suitable for \nUbuntu 14.04\n or \nUbuntu 16.04\n. Packages required:\n\n\n\n\n\n\n\n\nDependecy\n\n\nCheck version\n\n\nInstall\n\n\n\n\n\n\n\n\n\n\njava 8 JDK\n\n\njava -version\n\n\nsudo apt-get install -y default-jdk\n\n\n\n\n\n\nnode\n\n\nnode -v\n\n\nsudo curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -\nsudo apt-get install -y nodejs\n\n\n\n\n\n\nmaven\n\n\nmvn -v\n\n\nsudo apt-get install -y maven\n\n\n\n\n\n\nangular-cli\n\n\nng -v\n\n\nsudo npm install -g @angular/cli\n\n\n\n\n\n\n\n\nSetup for development\n\n\nHere we show how to develop an Angular app (\nopenvidu-testapp\n) with \nopenvidu-browser\n and \nopenvidu-server\n as local dependencies, waiting to be modified as you want.\n\n\n1) \nInstall KMS\n\n\n2) Clone repo:\n\n\ngit clone https://github.com/OpenVidu/openvidu.git\n\n\n\n\n3) \nopenvidu/openvidu-browser/\n\n\nnpm install\nnpm run build\nsudo npm link\n\n\n\n\n4) \nopenvidu/\n\n\nmvn -DskipTests=true compile \n mvn -DskipTests=true install\n\n\n\n\n5) \nopenvidu/openvidu-testapp/\n\n\nnpm install\nnpm link openvidu-browser\nng serve\n\n\n\n\n6) Start KMS in your machine:\n\n\nsudo service kurento-media-server restart\n\n\n\n\n8) \nopenvidu/openvidu-server/\n\n\nmvn exec:java\n\n\n\n\n(or if you prefer you can just run the Java application in your favourite IDE)\n\n\n\n\nAt these point, you can start modifying \nopenvidu-ng-testapp\n, \nopenvidu-browser\n or \nopenvidu-server\n.\n\n\n\n\n\n\nopenvidu-testapp\n :  the previous \"ng serve\" command will take care of refreshing the browser's page whenever any change takes place.\n\n\n\n\n\n\nopenvidu-browser\n : after modifying any typescript file, you will need to run the following command to update your changes:\n\n\n/openvidu/openvidu-browser\n \n\n\nnpm run build\n\n\n\n\n\n\nopenvidu-server\n : after modifying any file, there is no other alternative but to re-launch the java application if you want to update your changes.\n\n\n/openvidu/openvidu-server\n\n\nmvn clean exec:java\n\n\n(or re-launch the Java application in your IDE. Some IDE's support automatic re-launch in response to changes)\n\n\n\n\n\n\n\n\nSetup for advanced development: share the app through your network\n\n\nYou can also use \ndifferent machines\n in the \nsame network\n to build a more advanced development environment, so you can test the application in different devices at the same time. It's very similar to the process outlined above:\n\n\nYou will need a server for the built app (if you don't have any, we recommend \nhttp-server\n):\n\nnpm install -g http-server\n\n\nRun exactly the same commands as the process above, but on step \n6)\n skip \nng serve\n. We don't want Angular-CLI to serve our app. Instead, these commands will be the ones which you should launch (and relaunch to update your changes):\n\n\nopenvidu/openvidu-testapp/\n\n\nng build -op ./dist\ncd dist\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem\nhttp-server -S\n\n\n\n\nThis builds the Angular project, generate a self-signed certificate (which unfortunately is a mandatory requirement for http-server SSL) and serves the content with http-server.\n\n\nFinally, to launch the app connect to \nhttps://localhost:8080\n in the machine running the http-server and to \nhttps://[HOST]:8080\n in other devices of the same network (\n[HOST]\n being the IP of the machine running the http-server).\n\n\n\n\nInstalling KMS\n\n\nHow to \ninstall\n and \nrun\n KMS in your development machine:\n\n\nUbuntu 14.04 LTS Trusty (64 bits)\n\n\necho \ndeb http://ubuntu.openvidu.io/6.7.0 trusty kms6\n | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5\n\n\n\n\nUbuntu 16.04 LTS Xenial (64 bits)\n\n\necho \ndeb http://ubuntu.openvidu.io/6.7.0 xenial kms6\n | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5\n\n\n\n\nStart and stop the service\n\n\nsudo service kurento-media-server start\nsudo service kurento-media-server stop\n\n\n\n\nHere\n you can check Kurento's official documentation.", 
            "title": "Developing OpenVidu"
        }, 
        {
            "location": "/developing/#developing-openvidu", 
            "text": "This documentation is suitable for  Ubuntu 14.04  or  Ubuntu 16.04 . Packages required:     Dependecy  Check version  Install      java 8 JDK  java -version  sudo apt-get install -y default-jdk    node  node -v  sudo curl -sL https://deb.nodesource.com/setup_6.x | sudo bash - sudo apt-get install -y nodejs    maven  mvn -v  sudo apt-get install -y maven    angular-cli  ng -v  sudo npm install -g @angular/cli", 
            "title": "Developing OpenVidu"
        }, 
        {
            "location": "/developing/#setup-for-development", 
            "text": "Here we show how to develop an Angular app ( openvidu-testapp ) with  openvidu-browser  and  openvidu-server  as local dependencies, waiting to be modified as you want.  1)  Install KMS  2) Clone repo:  git clone https://github.com/OpenVidu/openvidu.git  3)  openvidu/openvidu-browser/  npm install\nnpm run build\nsudo npm link  4)  openvidu/  mvn -DskipTests=true compile   mvn -DskipTests=true install  5)  openvidu/openvidu-testapp/  npm install\nnpm link openvidu-browser\nng serve  6) Start KMS in your machine:  sudo service kurento-media-server restart  8)  openvidu/openvidu-server/  mvn exec:java  (or if you prefer you can just run the Java application in your favourite IDE)   At these point, you can start modifying  openvidu-ng-testapp ,  openvidu-browser  or  openvidu-server .    openvidu-testapp  :  the previous \"ng serve\" command will take care of refreshing the browser's page whenever any change takes place.    openvidu-browser  : after modifying any typescript file, you will need to run the following command to update your changes:  /openvidu/openvidu-browser    npm run build    openvidu-server  : after modifying any file, there is no other alternative but to re-launch the java application if you want to update your changes.  /openvidu/openvidu-server  mvn clean exec:java  (or re-launch the Java application in your IDE. Some IDE's support automatic re-launch in response to changes)", 
            "title": "Setup for development"
        }, 
        {
            "location": "/developing/#setup-for-advanced-development-share-the-app-through-your-network", 
            "text": "You can also use  different machines  in the  same network  to build a more advanced development environment, so you can test the application in different devices at the same time. It's very similar to the process outlined above:  You will need a server for the built app (if you don't have any, we recommend  http-server ): npm install -g http-server  Run exactly the same commands as the process above, but on step  6)  skip  ng serve . We don't want Angular-CLI to serve our app. Instead, these commands will be the ones which you should launch (and relaunch to update your changes):  openvidu/openvidu-testapp/  ng build -op ./dist\ncd dist\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem\nhttp-server -S  This builds the Angular project, generate a self-signed certificate (which unfortunately is a mandatory requirement for http-server SSL) and serves the content with http-server.  Finally, to launch the app connect to  https://localhost:8080  in the machine running the http-server and to  https://[HOST]:8080  in other devices of the same network ( [HOST]  being the IP of the machine running the http-server).", 
            "title": "Setup for advanced development: share the app through your network"
        }, 
        {
            "location": "/developing/#installing-kms", 
            "text": "How to  install  and  run  KMS in your development machine:  Ubuntu 14.04 LTS Trusty (64 bits)  echo  deb http://ubuntu.openvidu.io/6.7.0 trusty kms6  | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5  Ubuntu 16.04 LTS Xenial (64 bits)  echo  deb http://ubuntu.openvidu.io/6.7.0 xenial kms6  | tee /etc/apt/sources.list.d/kurento.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\napt-get update\napt-get -y install kurento-media-server\napt-get -y install openh264-gst-plugins-bad-1.5  Start and stop the service  sudo service kurento-media-server start\nsudo service kurento-media-server stop  Here  you can check Kurento's official documentation.", 
            "title": "Installing KMS"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Troubleshooting and FAQ\n\n\n\n\n\n\n1. Everything looks alright, but I cannot see any remote video\n\n\nYou have an app that uses OpenVidu to stream some video user-to-user, and the process looks perfectly okey. No errors on the console and all the OpenVidu events you are subscribed to are correctly triggered. So what's happening?\n\n\n99% of the time this is a problem related with \nOPENVIDU SERVER NOT HAVING A PUBLIC IP\n. To learn more about it, you can check \nthis FAQ\n. The quickest solution to this problem is to deploy in Amazon our ready-to-use OpenVidu Server with \nCloudFormation\n.\n\n\nIf you are a bit reluctant to this quick solution with Amazon CloudFormation, you can always deploy OpenVidu by yourself in Ubuntu 14.04 and 16.04. Check \nDeploying OpenVidu as a native service\n section to learn how to properly do it.\n\n\nBesides that, these are the recommended steps to follow when videos are not received:\n\n\n\n\nAccess your OpenVidu dashboard (\nhttps://YOUR_OPENVIDU_IP:4443\n) to quickly test the video transmission (user: \nOPENVIDUAPP\n, pass: \n[your private secret]\n)\n\n\nPlease be sure that your OpenVidu Server host meets the \nnetwork requirements\n.\n\n\n\n\nThe other 1% of the time this can be an attempt of \naccessing the same camera from two different browsers at the same time\n. Remember that Chrome, Firefox, Opera and Safari are distinct processes which cannot generally access the same physical resource (as a webcam) at the same time on your computer. On the other hand, accessing the camera from different tabs of the same browser is tipically possible.\n\n\n\n\n2. Any tips to make easier the development of my app with OpenVidu?\n\n\nYou can do some things to improve your efficiency while using OpenVidu:\n\n\n\n\nMultiple tabs to test the video transmission\n\n\nYou can use multiple tabs in the same browser to test your video streams.\n\n\nWARNING\n: you may have trouble for testing with tabs from different browsers at the same time, as they compete for the camera access.\n\n\n\n\nBe very aware of the browser's console\n\n\nThere you can find logs reporting important stuff. Error messages can help you to solve many issues.\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n\n  \n\n  \n\n    \n\n      OpenVidu Browser is developed with both \nChrome\n (first image) and \nFirefox\n (second image) in mind in terms of logging. By default the browser's console displays OpenVidu's high-level messages (that's when the option 'Info' is enabled, as seen in the images). This means logs about OpenVidu objects being created and destroyed and logs for each triggered event (only for those you are subscribed to).\n    \n\n    \n\n    \n\n      Warn and Error messages are specifically reserved for unwanted situations, and you should check your code in case you spot one of them.\n    \n\n    \n\n    \n\n      If you enable the lowest level of logging you can see all the messages concerning the WebRTC negotiation process (generally not very interesting for an OpenVidu user).\n    \n\n  \n\n\n\n\n\n\n\nRemember the browser's cache\n\n\nIf you have changed your HTML, JavaScript or CSS code, refreshed the page and cannot see the changes on the browser, probably the cache is still serving the old files. To perform a hard reload of your page on the browser, press \nCtrl + Shift + R\n\n\n\n\nUse \nNgrok\n to share your app\n\n\nDo you want to be able to publish your development app over your network or even the Internet, without really having to deploy it in a server? This can be very helpful, as you can test with different devices and browsers at the same time. To achieve this, you can use \nNgrok\n. The set up for Ubuntu is quite simple:\n\n\n\n\nDownload \nNgrok\n with this link [\nLINK\n] and unzip it.\n\n\nDownload this \nNgrok\n configuration file (named \nngrok.yml\n) from our GitHub repo \n[\nLINK\n]\n and place it in the same path as \nNgrok\n binary.\n\n\nRun \nNgrok\n with this command: \n./ngrok start --all -config=ngrok.yml\n. You will get two public IPs (ended with \n.ngrok.io\n) publishing your local address \nlocalhost:5000\n and \nlocalhost:3000\n.\n\n\nYou just have to run you app at port \n3000\n and run OpenVidu Server locally adding this parameter:\n\n\nWhen running OpenVidu Server as a Docker container: \n-e spring.profiles.active=ngrok\n\n\nWhen running OpenVidu Server as a JAR: \n-Dspring.profiles.active=ngrok\n\n\n\n\n\n\nThat's it! Now you can connect to your app through the \nNgrok\n public IP and the connection to OpenVidu Server will work just fine. You have \"deployed\" your app on your own computer, and cross-device testing through your own network is now possible. Connecting to your app over the Internet is also possible, but the video transmission may not work (check \nthis FAQ\n to learn why).\n\n\n\n\n\n\n3. I am using Windows to run the tutorials / develop my app. Anything I should know?\n\n\nYes, some little changes are needed because of the way Docker runs on Windows. In Linux/Mac, Docker containers are easily accesible through \nlocalhost\n, but in Windows you will have to use the specific IP allocated to your container (usually \n192.168.99.100\n). To let your applications know how to connect to OpenVidu Server:\n\n\nApplications \nClient-Side Only\n\n\n(Tutorials \nopenvidu-hello-world\n, \nopenvidu-insecure-js\n, \nopenvidu-insecure-angular\n, \nopenvidu-getaroom\n)\n\n\nWhen consuming openvidu-server REST api, change \nlocation.hostname\n to the IP of the Docker container running openvidu-server (usually \n192.168.99.100\n). For every one of the insecure tutorials listed above, the url where to send the REST operations ...\n\n\n\"https://\" + location.hostname + \":4443/api/\nOPERATION\n\"\n\n\n\n... in Windows is ...\n\n\n\"https://192.168.99.100:4443/api/\nOPERATION\n\"\n\n\n\nChange this url in every insecure tutorial right here:\n\n\n\n\nopenvidu-hello-world\n: \nhere\n\n\nopenvidu-insecure-js\n: \nhere\n\n\nopenvidu-insecure-angular\n: \nhere\n\n\nopenvidu-getaroom\n: \nhere\n\n\n\n\n\n\n\n\nAlso you will need to serve your apps over \nhttps\n. Browsers only accept camera usage on http when the address is \nlocalhost\n, and here it will be \n192.168.99.100\n or the one that Docker picks up for you. To serve over https with \nhttp-server\n, generate a self-signed certificate and run with \n-S\n flag on the root path of your app:\n\n\nGenerate a selfsigned certificate (run in  your Docker console)\n\n\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem\n\n\nRun with SSL flag\n\n\nhttp-server -S\n\n\n\n\nApplications \nClient-Side + Server-Side\n\n\n(Tutorials \nopenvidu-js-java\n, \nopenvidu-mvc-java\n, \nopenvidu-js-node\n, \nopenvidu-mvc-node\n)\n\n\nJust need to add a new parameter when launching you openvidu-server container:\n\n\n\n\n\n\nopenvidu/openvidu-server-kms Docker container\n (See \nDockerHub\n): override the default value of the property \nopenvidu.publicurl\n:\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms\n\n\n\nin Windows is...\n\n\ndocker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET -e openvidu.publicurl=https://192.168.99.100:4443/ openvidu/openvidu-server-kms\n\n\n\n\n\n\n\nAnd let know your app/tutorial how to initialize \nopenvidu-java-client\n or \nopenvidu-node-client\n (or where to send your REST API operations in case you are not using any of these clients). For example:\n\n\n\n\n\n\nJava tutorials\n (tutorials \nopenvidu-js-java\n, \nopenvidu-mvc-java\n): override the default value of the property \nopenvidu.url\n:\n\n\nmvn package exec:java\n\n\n\nin Windows is...\n\n\nmvn -Dopenvidu.url=https://192.168.99.100:4443/ package exec:java\n\n\n\n\n\nWith this change we are simply changing the param \nurlOpenViduServer\n that our OpenVidu object from \nopenvidu-java-client\n will receive in \nits constructor\n. This change is something related to these specific applications.\n\n\n\n\n\n\n\n\nNode tutorials\n (tutorials \nopenvidu-js-node\n, \nopenvidu-mvc-node\n): change the URL param passed on launch:\n\n\nnode server.js https://localhost:4443/ MY_SECRET\n\n\n\nin Windows is...\n\n\nnode server.js https://192.168.99.100:4443/ MY_SECRET\n\n\n\n\n\nWith this change we are simply changing the param \nurlOpenViduServer\n that our OpenVidu object from \nopenvidu-node-client\n will receive in \nits constructor\n. This change is something related to these specific applications.\n\n\n\n\n\n\n\n\n\n\n4. Does my app need a server-side?\n\n\nFirst of all, let's differentiate between OpenVidu server-side and your application's server-side. \n\n\n\n\nYou will always need OpenVidu Server deployed at some place on the Internet (check the \nDeployment section\n to learn how to do it in 5 minutes). For now, OpenVidu doesn't support p2p direct connections between two users, so all the traffic must flow to OpenVidu Server or from OpenVidu Server.\n\n\nYou will generally want your application to have its own server-side. Why?\n\n\n\n\nWell, it is really not necessary. You can have a pure client-side application if you want. Just check any of these tutorials:\nopenvidu-hello-world\n, \nopenvidu-insecure-js\n, \nopenvidu-getaroom\n\n\nThe problem here is pretty evident: if you don't have any kind of server side to control your users, anyone can use your app. In fact, you can respectively see \nhere\n, \nhere\n and \nhere\n a comment warning about this matter in every insecure tutorial. Due to the lack of a server-side in these tutorials, we have no choice but to embed the REST API consumption methods in our JavaScript code, which includes hardcoding our secret in the JS client code.\n\n\n\n\n\n\nIMPORTANT\n: Do NOT include your SECRET in your JavaScript or HTML files in a production environment!\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n\n  \n\n  \n\n    \n\n      \nFirst an OpenVidu app Client-Side Only.\n\n    \n\n    \n\n    \n\n      \nSecond an OpenVidu app Client-Side + Server-Side.\n\n    \n\n    \n\n    \n\n      \nIn production you will usually want the second option to avoid unwanted users.\n\n    \n\n  \n\n\n\n\n\n\n\n5. The CloudFormation Stack is a nice option for Amazon, but I don't like it. I want more control\n\n\nYou can always deploy everything by yourself. To do so, check \nDeploying OpenVidu as a native service\n section. It is very important to understand all the posibilities you have available regarding to the architecture of your system: you can have everything running in the same host or split the services between two or even more machines. That's up to you.\n\n\n\n  \n\n    \n\n  \n\n  \n\n  \n\n    \n\n      \nApp, OpenVidu Server and KMS run in the same machine\n\n      \nApp runs in its own machine. OpenVidu Server and KMS run in the same machine\n\n      \nApp, OpenVidu Server and KMS all run in different machines\n\n    \n\n    \n\n  \n\n\n\n\n\nIn this diagram \nSTUN/TURN server\n is not outlined. It is another necessary service, and it can be hosted wherever you want (we recommend running it in the same host as Kurento Media Server).\n\n\n\n\n6. What are STUN and TURN servers and why do I need them?\n\n\nIf the user's devices don't have a public and reachable IP, WebRTC connections cannot be established and therefore, video streams cannot be sent or received. This occurs when the users are behind NAT's and Firewalls. In brief, when they are hidden under complex networks.\n\n\nIn order to support these circumstances, WebRTC relies on \nSTUN and TURN\n servers:\n\n\n\n\nSTUN\n can easily provide to the user's devices their own public IP (the IP that other devices on the Internet use to connect to it), so they can tell OpenVidu where to send the video streams. Only with a STUN server, around \n86%\n of the time the connection will be successful.\n\n\nTURN\n is an extension of STUN, and covers the most extreme cases of complex networks (symmetric NATs). It acts as a gateway, passing all the media streams form one side to the other. This situation will occur with a probability of around \n8%\n.\n\n\n\n\nFor all purposes, OpenVidu Server acts as a final user, and your connections may fail if it is hosted behind a complex network. To provide a a solid service you definitely need both STUN and TURN servers. There are many public, free-to-use STUN servers (\nSTUN server list\n), but because TURN always faces a much larger load when coming into play, no one offers it free of charge. The good news is that it is very easy to install a COTURN server, which offers both STUN and TURN:\n\n\n\n\nOur ready-to-use \nCloudFormation stack\n already includes a properly configured COTURN server.\n\n\n\n\nIf you are deploying OpenVidu Server by your own, there are detailed instructions in the \nDeploying OpenVidu as a native service\n section, which explains how to install, configure and run COTURN in Ubuntu.\n\n\n\n\nYou can test your \nCOTURN\n server on this website: \nTrickle ICE\n. To do so, remove the default Google server from the list and add your own following this format: \nturn:YOUR_TURN_IP:YOUR_TURN_PORT\n (add your TURN username and password below)\n\n\n\n\n\n\n\n\n\n\n7. What does OpenVidu not integrate regarding WebRTC and Kurento yet?\n\n\nAs the main goal OpenVidu has is to make as simple as possible the integration of video-call capabilities in applications, it would make little sense to support all the features provided by Kurento: why would most of developers want visual recognition or augmented reality capabilities when adding video-calls to their apps?\n\n\nBut there's also a bunch of features supported by Kurento or WebRTC that will be part of OpenVidu as well:\n\n\n\n\nVideo composing\n: right now OpenVidu streams are always sent and received without any processing in Kurento Media Server, so every subscription to a video stream in a video-session implies its own WebRTC connection. We intend to provide the possibility of configuring video-sessions to be processed and send as only one video, composed in a grid by all the published streams.\n\n\nDirect p2p connections between users\n: OpenVidu will offer the possibility of connecting users without having to use Kurento Media Server as central node. This can be very advantegeous for certain use-cases, as will reduce the need of infraestructure.\n\n\nSingle stream video recording\n: OpenVidu will support single stream recording, not only composed recording.\n\n\nMobile platforms\n: OpenVidu will provide clients for both Android and iOS.\n\n\n\n\n\n\n8. Does OpenVidu support Android and iOS?\n\n\nAt the moment there are no OpenVidu clients for mobile platforms, but we are working on it. In the future you will have available \nOpenVidu Android\n and \nOpenVidu iOS\n, joining \nOpenVidu Browser\n. The main goal here is that all of them are fully compatible with one another.\n\n\n\n\n9. Which is the current status of OpenVidu on scalability and fault tolerance?\n\n\nThis particular point relies on Kurento Media Server performance, as it is the media server used by OpenVidu. \nTestRTC\n published on September 13, 2017 a very interesting article describing in detail the behaviour of Kurento Media Server while holding a different number of video-sessions. \nHere\n is the complete article.\n\n\nThese are the conclusions for a machine with \n8 cores and 15 GB of RAM\n. The upper limit where the following scenarios guaranteed good quality of service are:\n\n\n\n\n\n\n\n\nScenario\n\n\nSize\n\n\n\n\n\n\n\n\n\n\n1:1 video calls\n\n\n18 users in 9 parallel sessions\n\n\n\n\n\n\n4-way group video calls (grid composing)\n\n\n3 rooms of 4 users each\n\n\n\n\n\n\n1:N broadcast\n\n\n1 broadcaster + 80-150 viewers\n\n\n\n\n\n\n\n\nThat said, one of the most important features OpenVidu will offer is the possibility of automated scalability and fault tolerance. We intend to provide an easy-to-use service integrated with Amazon Web Services to allow the automated launching and shutdown of servers depending on the workload of your application.\n\n\n\n\n10. I am getting an \"Error accesing the camera\" and I have already granted permissions on the browser\n\n\nIf you are using \nChrome\n: you \ncannot access the camera or microphone from a \nhttp\n URL if it is not \nlocalhost\n or \n127.0.0.1\n. In a nutshell: in Chrome accessing the webcam on \nhttp://localhost:8080\n or \nhttp://127.0.0.1:8080\n is perfectly OK. But, for example, on \nhttp://172.17.0.1:8080\n it will through an error saying \"\nOnly secure origins are allowed\n\". If for any reason you want to serve your app locally on a custom URL, the only solution is to serve it over \nhttps\n with a certificate. If you are making use of the web server we have strongly suggested over the documentation (\nnpm install -g http-server\n), you can do this with the following commands on your application's root path:\n\n\n\n\n\n\nGenerate a selfsigned certificate with \nopenssl\n\n\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem\n\n\n\n\n\n\n\nRun \nhttp-server\n with SSL flag\n\n\nhttp-server -S", 
            "title": "Troubleshooting / FAQ"
        }, 
        {
            "location": "/troubleshooting/#1-everything-looks-alright-but-i-cannot-see-any-remote-video", 
            "text": "You have an app that uses OpenVidu to stream some video user-to-user, and the process looks perfectly okey. No errors on the console and all the OpenVidu events you are subscribed to are correctly triggered. So what's happening?  99% of the time this is a problem related with  OPENVIDU SERVER NOT HAVING A PUBLIC IP . To learn more about it, you can check  this FAQ . The quickest solution to this problem is to deploy in Amazon our ready-to-use OpenVidu Server with  CloudFormation .  If you are a bit reluctant to this quick solution with Amazon CloudFormation, you can always deploy OpenVidu by yourself in Ubuntu 14.04 and 16.04. Check  Deploying OpenVidu as a native service  section to learn how to properly do it.  Besides that, these are the recommended steps to follow when videos are not received:   Access your OpenVidu dashboard ( https://YOUR_OPENVIDU_IP:4443 ) to quickly test the video transmission (user:  OPENVIDUAPP , pass:  [your private secret] )  Please be sure that your OpenVidu Server host meets the  network requirements .   The other 1% of the time this can be an attempt of  accessing the same camera from two different browsers at the same time . Remember that Chrome, Firefox, Opera and Safari are distinct processes which cannot generally access the same physical resource (as a webcam) at the same time on your computer. On the other hand, accessing the camera from different tabs of the same browser is tipically possible.", 
            "title": "1. Everything looks alright, but I cannot see any remote video"
        }, 
        {
            "location": "/troubleshooting/#2-any-tips-to-make-easier-the-development-of-my-app-with-openvidu", 
            "text": "You can do some things to improve your efficiency while using OpenVidu:", 
            "title": "2. Any tips to make easier the development of my app with OpenVidu?"
        }, 
        {
            "location": "/troubleshooting/#multiple-tabs-to-test-the-video-transmission", 
            "text": "You can use multiple tabs in the same browser to test your video streams.  WARNING : you may have trouble for testing with tabs from different browsers at the same time, as they compete for the camera access.", 
            "title": "Multiple tabs to test the video transmission"
        }, 
        {
            "location": "/troubleshooting/#be-very-aware-of-the-browsers-console", 
            "text": "There you can find logs reporting important stuff. Error messages can help you to solve many issues.  \n   \n     \n   \n   \n     \n   \n   \n     \n      OpenVidu Browser is developed with both  Chrome  (first image) and  Firefox  (second image) in mind in terms of logging. By default the browser's console displays OpenVidu's high-level messages (that's when the option 'Info' is enabled, as seen in the images). This means logs about OpenVidu objects being created and destroyed and logs for each triggered event (only for those you are subscribed to).\n     \n     \n     \n      Warn and Error messages are specifically reserved for unwanted situations, and you should check your code in case you spot one of them.\n     \n     \n     \n      If you enable the lowest level of logging you can see all the messages concerning the WebRTC negotiation process (generally not very interesting for an OpenVidu user).", 
            "title": "Be very aware of the browser's console"
        }, 
        {
            "location": "/troubleshooting/#remember-the-browsers-cache", 
            "text": "If you have changed your HTML, JavaScript or CSS code, refreshed the page and cannot see the changes on the browser, probably the cache is still serving the old files. To perform a hard reload of your page on the browser, press  Ctrl + Shift + R", 
            "title": "Remember the browser's cache"
        }, 
        {
            "location": "/troubleshooting/#use-ngrok-to-share-your-app", 
            "text": "Do you want to be able to publish your development app over your network or even the Internet, without really having to deploy it in a server? This can be very helpful, as you can test with different devices and browsers at the same time. To achieve this, you can use  Ngrok . The set up for Ubuntu is quite simple:   Download  Ngrok  with this link [ LINK ] and unzip it.  Download this  Ngrok  configuration file (named  ngrok.yml ) from our GitHub repo  [ LINK ]  and place it in the same path as  Ngrok  binary.  Run  Ngrok  with this command:  ./ngrok start --all -config=ngrok.yml . You will get two public IPs (ended with  .ngrok.io ) publishing your local address  localhost:5000  and  localhost:3000 .  You just have to run you app at port  3000  and run OpenVidu Server locally adding this parameter:  When running OpenVidu Server as a Docker container:  -e spring.profiles.active=ngrok  When running OpenVidu Server as a JAR:  -Dspring.profiles.active=ngrok    That's it! Now you can connect to your app through the  Ngrok  public IP and the connection to OpenVidu Server will work just fine. You have \"deployed\" your app on your own computer, and cross-device testing through your own network is now possible. Connecting to your app over the Internet is also possible, but the video transmission may not work (check  this FAQ  to learn why).", 
            "title": "Use Ngrok to share your app"
        }, 
        {
            "location": "/troubleshooting/#3-i-am-using-windows-to-run-the-tutorials-develop-my-app-anything-i-should-know", 
            "text": "Yes, some little changes are needed because of the way Docker runs on Windows. In Linux/Mac, Docker containers are easily accesible through  localhost , but in Windows you will have to use the specific IP allocated to your container (usually  192.168.99.100 ). To let your applications know how to connect to OpenVidu Server:", 
            "title": "3. I am using Windows to run the tutorials / develop my app. Anything I should know?"
        }, 
        {
            "location": "/troubleshooting/#applications-client-side-only", 
            "text": "(Tutorials  openvidu-hello-world ,  openvidu-insecure-js ,  openvidu-insecure-angular ,  openvidu-getaroom )  When consuming openvidu-server REST api, change  location.hostname  to the IP of the Docker container running openvidu-server (usually  192.168.99.100 ). For every one of the insecure tutorials listed above, the url where to send the REST operations ...  \"https://\" + location.hostname + \":4443/api/ OPERATION \"  ... in Windows is ...  \"https://192.168.99.100:4443/api/ OPERATION \"  Change this url in every insecure tutorial right here:   openvidu-hello-world :  here  openvidu-insecure-js :  here  openvidu-insecure-angular :  here  openvidu-getaroom :  here     Also you will need to serve your apps over  https . Browsers only accept camera usage on http when the address is  localhost , and here it will be  192.168.99.100  or the one that Docker picks up for you. To serve over https with  http-server , generate a self-signed certificate and run with  -S  flag on the root path of your app:  Generate a selfsigned certificate (run in  your Docker console)  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem  Run with SSL flag  http-server -S", 
            "title": "Applications Client-Side Only"
        }, 
        {
            "location": "/troubleshooting/#applications-client-side-server-side", 
            "text": "(Tutorials  openvidu-js-java ,  openvidu-mvc-java ,  openvidu-js-node ,  openvidu-mvc-node )  Just need to add a new parameter when launching you openvidu-server container:    openvidu/openvidu-server-kms Docker container  (See  DockerHub ): override the default value of the property  openvidu.publicurl :  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET openvidu/openvidu-server-kms  in Windows is...  docker run -p 4443:4443 --rm -e openvidu.secret=MY_SECRET -e openvidu.publicurl=https://192.168.99.100:4443/ openvidu/openvidu-server-kms    And let know your app/tutorial how to initialize  openvidu-java-client  or  openvidu-node-client  (or where to send your REST API operations in case you are not using any of these clients). For example:    Java tutorials  (tutorials  openvidu-js-java ,  openvidu-mvc-java ): override the default value of the property  openvidu.url :  mvn package exec:java  in Windows is...  mvn -Dopenvidu.url=https://192.168.99.100:4443/ package exec:java   With this change we are simply changing the param  urlOpenViduServer  that our OpenVidu object from  openvidu-java-client  will receive in  its constructor . This change is something related to these specific applications.     Node tutorials  (tutorials  openvidu-js-node ,  openvidu-mvc-node ): change the URL param passed on launch:  node server.js https://localhost:4443/ MY_SECRET  in Windows is...  node server.js https://192.168.99.100:4443/ MY_SECRET   With this change we are simply changing the param  urlOpenViduServer  that our OpenVidu object from  openvidu-node-client  will receive in  its constructor . This change is something related to these specific applications.", 
            "title": "Applications Client-Side + Server-Side"
        }, 
        {
            "location": "/troubleshooting/#4-does-my-app-need-a-server-side", 
            "text": "First of all, let's differentiate between OpenVidu server-side and your application's server-side.    You will always need OpenVidu Server deployed at some place on the Internet (check the  Deployment section  to learn how to do it in 5 minutes). For now, OpenVidu doesn't support p2p direct connections between two users, so all the traffic must flow to OpenVidu Server or from OpenVidu Server.  You will generally want your application to have its own server-side. Why?   Well, it is really not necessary. You can have a pure client-side application if you want. Just check any of these tutorials: openvidu-hello-world ,  openvidu-insecure-js ,  openvidu-getaroom  The problem here is pretty evident: if you don't have any kind of server side to control your users, anyone can use your app. In fact, you can respectively see  here ,  here  and  here  a comment warning about this matter in every insecure tutorial. Due to the lack of a server-side in these tutorials, we have no choice but to embed the REST API consumption methods in our JavaScript code, which includes hardcoding our secret in the JS client code.    IMPORTANT : Do NOT include your SECRET in your JavaScript or HTML files in a production environment!   \n   \n     \n   \n   \n     \n   \n   \n     \n       First an OpenVidu app Client-Side Only. \n     \n     \n     \n       Second an OpenVidu app Client-Side + Server-Side. \n     \n     \n     \n       In production you will usually want the second option to avoid unwanted users.", 
            "title": "4. Does my app need a server-side?"
        }, 
        {
            "location": "/troubleshooting/#5-the-cloudformation-stack-is-a-nice-option-for-amazon-but-i-dont-like-it-i-want-more-control", 
            "text": "You can always deploy everything by yourself. To do so, check  Deploying OpenVidu as a native service  section. It is very important to understand all the posibilities you have available regarding to the architecture of your system: you can have everything running in the same host or split the services between two or even more machines. That's up to you.  \n   \n     \n   \n   \n   \n     \n       App, OpenVidu Server and KMS run in the same machine \n       App runs in its own machine. OpenVidu Server and KMS run in the same machine \n       App, OpenVidu Server and KMS all run in different machines \n     \n     \n     In this diagram  STUN/TURN server  is not outlined. It is another necessary service, and it can be hosted wherever you want (we recommend running it in the same host as Kurento Media Server).", 
            "title": "5. The CloudFormation Stack is a nice option for Amazon, but I don't like it. I want more control"
        }, 
        {
            "location": "/troubleshooting/#6-what-are-stun-and-turn-servers-and-why-do-i-need-them", 
            "text": "If the user's devices don't have a public and reachable IP, WebRTC connections cannot be established and therefore, video streams cannot be sent or received. This occurs when the users are behind NAT's and Firewalls. In brief, when they are hidden under complex networks.  In order to support these circumstances, WebRTC relies on  STUN and TURN  servers:   STUN  can easily provide to the user's devices their own public IP (the IP that other devices on the Internet use to connect to it), so they can tell OpenVidu where to send the video streams. Only with a STUN server, around  86%  of the time the connection will be successful.  TURN  is an extension of STUN, and covers the most extreme cases of complex networks (symmetric NATs). It acts as a gateway, passing all the media streams form one side to the other. This situation will occur with a probability of around  8% .   For all purposes, OpenVidu Server acts as a final user, and your connections may fail if it is hosted behind a complex network. To provide a a solid service you definitely need both STUN and TURN servers. There are many public, free-to-use STUN servers ( STUN server list ), but because TURN always faces a much larger load when coming into play, no one offers it free of charge. The good news is that it is very easy to install a COTURN server, which offers both STUN and TURN:   Our ready-to-use  CloudFormation stack  already includes a properly configured COTURN server.   If you are deploying OpenVidu Server by your own, there are detailed instructions in the  Deploying OpenVidu as a native service  section, which explains how to install, configure and run COTURN in Ubuntu.   You can test your  COTURN  server on this website:  Trickle ICE . To do so, remove the default Google server from the list and add your own following this format:  turn:YOUR_TURN_IP:YOUR_TURN_PORT  (add your TURN username and password below)", 
            "title": "6. What are STUN and TURN servers and why do I need them?"
        }, 
        {
            "location": "/troubleshooting/#7-what-does-openvidu-not-integrate-regarding-webrtc-and-kurento-yet", 
            "text": "As the main goal OpenVidu has is to make as simple as possible the integration of video-call capabilities in applications, it would make little sense to support all the features provided by Kurento: why would most of developers want visual recognition or augmented reality capabilities when adding video-calls to their apps?  But there's also a bunch of features supported by Kurento or WebRTC that will be part of OpenVidu as well:   Video composing : right now OpenVidu streams are always sent and received without any processing in Kurento Media Server, so every subscription to a video stream in a video-session implies its own WebRTC connection. We intend to provide the possibility of configuring video-sessions to be processed and send as only one video, composed in a grid by all the published streams.  Direct p2p connections between users : OpenVidu will offer the possibility of connecting users without having to use Kurento Media Server as central node. This can be very advantegeous for certain use-cases, as will reduce the need of infraestructure.  Single stream video recording : OpenVidu will support single stream recording, not only composed recording.  Mobile platforms : OpenVidu will provide clients for both Android and iOS.", 
            "title": "7. What does OpenVidu not integrate regarding WebRTC and Kurento yet?"
        }, 
        {
            "location": "/troubleshooting/#8-does-openvidu-support-android-and-ios", 
            "text": "At the moment there are no OpenVidu clients for mobile platforms, but we are working on it. In the future you will have available  OpenVidu Android  and  OpenVidu iOS , joining  OpenVidu Browser . The main goal here is that all of them are fully compatible with one another.", 
            "title": "8. Does OpenVidu support Android and iOS?"
        }, 
        {
            "location": "/troubleshooting/#9-which-is-the-current-status-of-openvidu-on-scalability-and-fault-tolerance", 
            "text": "This particular point relies on Kurento Media Server performance, as it is the media server used by OpenVidu.  TestRTC  published on September 13, 2017 a very interesting article describing in detail the behaviour of Kurento Media Server while holding a different number of video-sessions.  Here  is the complete article.  These are the conclusions for a machine with  8 cores and 15 GB of RAM . The upper limit where the following scenarios guaranteed good quality of service are:     Scenario  Size      1:1 video calls  18 users in 9 parallel sessions    4-way group video calls (grid composing)  3 rooms of 4 users each    1:N broadcast  1 broadcaster + 80-150 viewers     That said, one of the most important features OpenVidu will offer is the possibility of automated scalability and fault tolerance. We intend to provide an easy-to-use service integrated with Amazon Web Services to allow the automated launching and shutdown of servers depending on the workload of your application.", 
            "title": "9. Which is the current status of OpenVidu on scalability and fault tolerance?"
        }, 
        {
            "location": "/troubleshooting/#10-i-am-getting-an-error-accesing-the-camera-and-i-have-already-granted-permissions-on-the-browser", 
            "text": "If you are using  Chrome : you  cannot access the camera or microphone from a  http  URL if it is not  localhost  or  127.0.0.1 . In a nutshell: in Chrome accessing the webcam on  http://localhost:8080  or  http://127.0.0.1:8080  is perfectly OK. But, for example, on  http://172.17.0.1:8080  it will through an error saying \" Only secure origins are allowed \". If for any reason you want to serve your app locally on a custom URL, the only solution is to serve it over  https  with a certificate. If you are making use of the web server we have strongly suggested over the documentation ( npm install -g http-server ), you can do this with the following commands on your application's root path:    Generate a selfsigned certificate with  openssl  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -subj '/CN=www.mydom.com/O=My Company LTD./C=US' -keyout key.pem -out cert.pem    Run  http-server  with SSL flag  http-server -S", 
            "title": "10. I am getting an \"Error accesing the camera\" and I have already granted permissions on the browser"
        }, 
        {
            "location": "/releases/", 
            "text": "Releases\n\n\n\n\n\n\n2.1.0\n\n\nArtifacts\n\n\n\n\n  \n\n    \nArtifact\n\n    \nType\n\n    \nCompatible Version\n\n    \nLink\n\n    \nInfo\n\n  \n\n\n  \n\n    \nopenvidu-browser\n\n    \nNPM package\n\n    \n2.1.0\n\n    \nNPM\n\n    \n\n  \n\n  \n\n    \nJS file\n\n    \n2.1.0\n\n    \nGitHub\n\n  \n\n\n  \n\n    \nopenvidu-server\n\n    \nJAR\n\n    \n2.1.0\n\n    \nGitHub\n\n    \n\n  \n\n  \n\n    \nDocker container\n\n    \n2.1.0\n\n    \nDockerHub\n\n  \n\n    \n\n    \nDocker container (+KMS)\n\n    \n2.1.0\n\n    \nDockerHub\n\n  \n\n\n  \n\n    \nopenvidu-java-client\n\n    \nMVN package\n\n    \n2.0.0\n\n    \nMVN Repository\n\n    \n\n  \n\n\n  \n\n    \nopenvidu-node-client\n\n    \nNPM package\n\n    \n2.0.0\n\n    \nNPM\n\n    \n\n  \n\n\n\n\n\n\nRelease Notes\n\n\n\n\nNEW FEATURES\n\n\nOpenVidu Browser support for video management\n\n\nWe have implemented a new class in OpenVidu Browser aimed to better support declarative frontend framewroks such as Angular, React or Vue.js.\n\n\nNow Publisher and Subscriber objects both inherit from \nStreamManager\n, which provides 2 different methods to tell OpenVidu what DOM video players should display each specific stream (\naddVideoElement\n and \ncreateVideoElement\n). This allows us to let OpenVidu take control of the video elements (even if our framework dinamically creates them) and do not worry about its internals. This is all explained in detail in \nManage video players\n section.\n\n\nIf you want to check out a real example of this behaviuor, explore our renovated \nOpenVidu Angular tutorial\n.\n\n\n\n\n2.0.0\n\n\nArtifacts\n\n\n\n\n  \n\n    \nArtifact\n\n    \nType\n\n    \nCompatible Version\n\n    \nLink\n\n    \nInfo\n\n  \n\n\n  \n\n    \nopenvidu-browser\n\n    \nNPM package\n\n    \n2.0.0\n\n    \nNPM\n\n    \n\n  \n\n  \n\n    \nJS file\n\n    \n2.0.0\n\n    \nGitHub\n\n  \n\n\n  \n\n    \nopenvidu-server\n\n    \nJAR\n\n    \n2.0.0\n\n    \nGitHub\n\n    \n\n  \n\n  \n\n    \nDocker container\n\n    \n2.0.0\n\n    \nDockerHub\n\n  \n\n    \n\n    \nDocker container (+KMS)\n\n    \n2.0.0\n\n    \nDockerHub\n\n  \n\n\n  \n\n    \nopenvidu-java-client\n\n    \nMVN package\n\n    \n2.0.0\n\n    \nMVN Repository\n\n    \n\n  \n\n\n  \n\n    \nopenvidu-node-client\n\n    \nNPM package\n\n    \n2.0.0\n\n    \nNPM\n\n    \n\n  \n\n\n\n\n\n\nRelease Notes\n\n\n\n\nThis is the first breaking change update for OpenVidu, which brings in lots of new features and internal improvements.\n\n\nNEW FEATURES\n\n\n\n\n\n\nOpenVidu Browser new methods\n\n\n\n\nSession.publish()\n: now returns a Promise so you can tell if the method was successful or not.\n\n\nSession.signal()\n: now returns a Promise so you can tell if the method was successful or not.\n\n\nSubcriber.subscribeToAudio()\n and \nSubscriber.subscribeToVideo()\n: new methods that allows you to mute the audio or video tracks of a remote stream.\n\n\n\n\nOpenVidu.initPublisher()\n: now expects properties as interface \nPublisherProperties\n. They include:\n\n\n{\n    audioSource: undefined, // The source of audio. If undefined default audio input\n    videoSource: undefined, // The source of video. If undefined default video input\n    publishAudio: true,     // Whether you want to start publishing with your audio unmuted or muted\n    publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n    resolution: '640x480',  // The resolution of your video\n    frameRate: 30,          // The frame rate of your video\n    insertMode: 'APPEND',   // How the video will be inserted in the target element\n    mirror: false           // Whether to mirror your local video or not\n}\n\n\n\n\n\n\n\nSession.subscribe()\n: now expects properties as interface \nSubscriberProperties\n. They include:\n\n\n{\n    insertMode: 'APPEND',   // How the video will be inserted in the target element\n    subscribeToAudio: true, // Whether to initially subscribe to the stream's audio track or not\n    subscribeToVideo: true  // Whether to initially subscribe to the stream's video track or not\n}\n\n\n\n\n\n\n\nOpenVidu.getDevices()\n: now you can use certain video or audio input device when calling \nOpenVidu.initPublisher()\n, thanks to properties \naudioSource\n or \nvideoSource\n of \nPublisherProperties\n object. Just set these variables to the property \ndeviceId\n of any of the devices returned by this method.\n\n\n\n\nOpenVidu.getUserMedia()\n: method improved. Now devs can customize a MediaStream object before calling \nOpenVidu.initPublisher()\n method, setting property \naudioSource\n or \nvideoSource\n to a MediaStreamTrack object (see \ndocs\n for further information)\n\n\n\n\n\n\n\n\nOpenVidu Browser new properties\n\n\n\n\nStream.frameRate\n: new property defining the frame rate of video streams. This property will only have value if the Publisher owning the stream has set property \nframeRate\n of \nPublisherProperties\n when calling \nOpenVidu.initPublisher()\n\n\n\n\n\n\n\n\nOpenVidu Browser events\n\n\n\n\nNew events \naccessDialogOpened\n and \naccessDialogClosed\n: dispatched by Publisher objects when the browser asks the user to grant permissions to camera or michrophone by opening a pop-up. You can use them to warn your users about it.\n\n\nNew events \nrecordingStarted\n and \nrecordingStopped\n: dispatched by Session object when the recording of a Session starts and stops. You can customize which clients will receive this event thanks to new property \nopenvidu.recording.notification\n (see \nOpenVidu Server configuration\n)\n\n\nEvents \npublisherStartSpeaking\n and \npublisherStopSpeaking\n improved: more customizable thanks to \nOpenVidu.setAdvancedConfiguration()\n and better overall performance.\n\n\nEvents \nstreamDestroyed\n, \nconnectionDestroyed\n and \nsessionDisconnected\n have new property \nreason\n. This gives more information about why the events have been dispatched so you can take specific actions depending on the context: maybe a stream has been destroyed because the user publishing has deliberately diposed it or maybe the network connection has unexpectedly closed (see docs for \nStreamEvent\n, \nConnectionEvent\n and \nSessionDisconnectedEvent\n)\n\n\n\n\n\n\n\n\nOther improvements in OpenVidu Browser\n\n\n\n\nSupport for \ncustom screen sharing extensions for Chrome\n\n\nSupport for custom STUN and TURN servers in openvidu-browser. Use \nOpenVidu.setAdvancedConfiguration()\n\n\nLibrary size decreased in almost 30% (\nopenvidu-browser.min.js\n from 300 KB to 216 KB)\n\n\n\n\n\n\n\n\nOpenVidu Server new features\n\n\n\n\nNew property \nname\n for recordings: you can now specify which name should OpenVidu Server give to each one of your recording files. You can do it by using the \nREST API\n (by setting \nbody parameter \"name\" in POST /api/recordings/start\n), \nopenvidu-java-client\n (by using \nRecordingProperties.Builder.name()\n) or \nopenvidu-node-client\n (by setting property \nRecordingProperties.name\n)\n\n\nNow support for initializing sessions with a custom \nsessionId\n. You can take advantage of this new property to facilitate the mapping between OpenVidu Server 'session' entities and your own 'session' entities. You can set it by using the \nREST API\n (by setting \nbody parameter \"customSessionId\" in POST /api/sessions\n), \nopenvidu-java-client\n (by using \nSessionProperties.Builder.customSessionId()\n) or \nopenvidu-node-client\n (by setting property \nSessionProperties.customSessionId\n)\n\n\nCall Detail Record extended: new events \nrecordingStarted\n and \nrecordingStopped\n, property \nreason\n for events \nsessionDestroyed\n, \nparticipantLeft\n and \nwebrtcConnectionDestroyed\n.\n\n\n\n\n\n\n\n\nBUG FIXES\n\n\n\n\nNow when any participant unexpectedly disconnects from a session (for example, due to a network failure), \nconnectionDestroyed\n event is sent to the rest of participants with property \nreason\n set to \nnetworkDisconnect\n.\n\n\nWhen OpenVidu Server is stopped, it will try to gracefully finish every in progress session and recording. This way no recording file will end corrupted upon OpenVidu Server termination (this cannot be granted if the process crashes or is forcibly terminated)\n\n\nNow both STUN and TURN \nOpenVidu Server configuration parameters\n can be set up at the same time with no overwritings.\n\n\nTons of small fixes and code refactoring that makes OpenVidu more stable and easy to test and develop\n\n\n\n\nBREAKING CHANGES LIST\n\n\n\n\n\n\nOpenVidu Browser\n\n\n\n\nOpenVidu.initSession\n now doesn't receive any input parameter.\n\n\nOpenVidu.initPublisher\n input parameters have changed. Now \nproperties\n parameter must match \nPublisherProperties\n interface.\n\n\nSession.connect\n method has been promisified. Change the last mandatory \ncallback\n parameter for a Promise implementation: \nsession.connect(token, (error) =\n { ... })\n to \nsession.connect(token).then(() =\n {...}).catch(error =\n {...});\n \n\n\n\n\n\n\n\n\nOpenVidu Java Client\n\n\n\n\nAll \nArchive\n entities are now called \nRecording\n. This includes: class \nArchive\n to \nRecording\n, class \nArchiveMode\n to \nRecordingMode\n, class \nArchiveLayout\n to \nRecordingLayout\n, method \nSessionProperties.archiveLayout()\n to \nSessionProperties.recordingLayout()\n, method \nSessionProperties.archiveMode()\n to \nSessionProperties.recordingMode()\n, method \nSessionProperties.Builder.archiveLayout()\n to \nSessionProperties.Builder.recordingLayout()\n, method \nSessionProperties.Builder.archiveMode()\n to \nSessionProperties.Builder.recordingMode()\n\n\nRecordingLayout\n property in \nSessionProperties.Builder\n is now configured calling method \ndefaultRecordingLayout()\n instead of \nrecordingLayout()\n. This means that if one Session is gonna be recorded more than once, each recording layout may be customize with \nRecordingProperties.Builder.recordingLayout()\n, which will overwrite the default one globally configured in SessionProperties object. \n\n\n\n\n\n\n\n\nOpenVidu Node Client\n\n\n\n\nWe have removed the builder pattern in all openvidu-node-client classes. Now objects are used instead, which includes classes \nTokenOptions\n, \nSessionProperties\n and \nRecordingProperties\n. For example, instead of getting a TokenOptions object like this: \nvar tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build()\n now it must be like this: \nvar tokenOptions = {data: serverData, role: role}\n\n\nThere has been a simple change in certain asynchronous call. Method \nSession.getSessionId()\n is now synchronous, but method \nOpenVidu.createSession()\n is now asynchronous (the reason is pretty simple: now method \ncreateSession\n implements the behaviour that \ngetSessionId\n was providing the first time it was called for certain \nSession\n object).\n\n\nAll callback methods have been promisified. This includes method \nSession.generateToken(tokenOptions?, callback): void\n (now  \nSession.generateToken(tokenOptions?): Promise\nstring\n) and method \nSession.getSessionId(callback): void\n (now \nOpenVidu.createSession(): Promise\nSession\n, take also into account that the async call has changed from one method to the other as stated in the previous point).\n\n\nAll \nArchive\n entities are now called \nRecording\n. This includes: object \nArchive\n to \nRecording\n, object \nArchiveMode\n to \nRecordingMode\n, object \nArchiveLayout\n to \nRecordingLayout\n, method \nSessionProperties.archiveLayout()\n to \nSessionProperties.recordingLayout()\n, method \nSessionProperties.archiveMode()\n to \nSessionProperties.recordingMode()\n, method \nSessionProperties.Builder.archiveLayout()\n to \nSessionProperties.Builder.recordingLayout()\n, method \nSessionProperties.Builder.archiveMode()\n to \nSessionProperties.Builder.recordingMode()\n\n\nrecordingLayout\n property in \nSessionProperties\n has changed to \ndefaultRecordingLayout\n. This means that if one Session is gonna be recorded more than once, each recording layout may be customize with \nrecordingLayout\n property (of \nRecordingProperties\n interface, which will overwrite the default one globally configured in SessionProperties object. \n\n\n\n\n\n\n\n\nREST API\n\n\n\n\nAll \nArchive\n entities are now called \nRecording\n in API REST. For example: \n{\"archiveMode\": \"ARCHIVE_MODE\", \"archiveLayout\": \"ARCHIVE_LAYOUT\", \"mediaMode\": \"MEDIA_MODE\"}\n now is \n{\"recordingMode\": \"RECORDING_MODE\", \"recordingLayout\": \"RECORDING_LAYOUT\", \"mediaMode\": \"MEDIA_MODE\"}\n.\n\n\nField \nrecordingLayout\n is now called \ndefaultRecordingLayout\n in operation \nPOST /api/sessions\n. This means that if one Session is gonna be recorded more than once, each recording layout may be customize adding a new field \nrecordingLayout\n in the call to \nPOST /api/recordings/start\n of the API REST, which will overwrite the default one globally configured during \nPOST /api/sessions\n \n\n\n\n\n\n\n\n\nOther breaking changes\n\n\n\n\nOpenVidu Server default port from \n8443\n to \n4443\n\n\nOpenVidu Server configuration property \nopenvidu.recording.free-access\n is now \nopenvidu.recording.public-access\n\n\n\n\n\n\n\n\n\n\n\n\n1.9.0-beta-1\n\n\nArtifacts\n\n\n\n\n  \n\n    \nArtifact\n\n    \nType\n\n    \nCompatible version\n\n    \nLink\n\n    \nInfo\n\n  \n\n\n  \n\n    \nopenvidu-browser\n\n    \nNPM package\n\n    \n1.9.0-beta-1\n\n    \nNPM\n\n    \n\n  \n\n  \n\n    \nJS file\n\n    \n1.9.0-beta-1\n\n    \nGitHub\n\n  \n\n\n  \n\n    \nopenvidu-server\n\n    \nJAR\n\n    \n1.9.0-beta-1\n\n    \nGitHub\n\n    \n\n  \n\n  \n\n    \nDocker container\n\n    \n1.9.0-beta-1\n\n    \nDockerHub\n\n  \n\n    \n\n    \nDocker container (+KMS)\n\n    \n1.9.0-beta-1\n\n    \nDockerHub\n\n  \n\n\n  \n\n    \nopenvidu-java-client\n\n    \nMVN package\n\n    \n1.8.0\n\n    \nMVN Repository\n\n    \n\n  \n\n\n  \n\n    \nopenvidu-node-client\n\n    \nNPM package\n\n    \n1.8.0\n\n    \nNPM\n\n    \n\n  \n\n\n\n\n\n\nRelease Notes\n\n\n\n\n\n\nSafari support\n: now OpenVidu is compatible with the most recent versions of Safari in Mac and iOS. It is necessary to use Kurento Media Server 6.7.0:\n\n\nopenvidu/openvidu-server-kms:1.9.0-beta-1\n Docker image already incorporates KMS 6.7.0\n\n\nopenvidu/openvidu-server:1.9.0-beta-1\n Docker image and \nopenvidu-server-1.9.0-beta-1.jar\n need KMS 6.7.0. To install it, first be sure to completely uninstall and clean any previous version of KMS and then:\n\n\n\n\n\n\n\n\n# In first command: xenial for Ubuntu 16.04, trusty for Ubuntu 14.04\nsudo echo \"deb http://ubuntu.openvidu.io/6.7.0 xenial kms6\" | sudo tee /etc/apt/sources.list.d/kurento.list\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\nsudo apt-get update\nsudo apt-get -y dist-upgrade\nsudo apt-get -y install kurento-media-server\nsudo apt-get -y install openh264-gst-plugins-bad-1.5\n\n\n\n\nTo start and stop KMS 6.7.0:\n\n\n\nsudo service kurento-media-server start\nsudo service kurento-media-server stop", 
            "title": "Releases"
        }, 
        {
            "location": "/releases/#210", 
            "text": "", 
            "title": "2.1.0"
        }, 
        {
            "location": "/releases/#artifacts", 
            "text": "Artifact \n     Type \n     Compatible Version \n     Link \n     Info \n   \n\n   \n     openvidu-browser \n     NPM package \n     2.1.0 \n     NPM \n     \n   \n   \n     JS file \n     2.1.0 \n     GitHub \n   \n\n   \n     openvidu-server \n     JAR \n     2.1.0 \n     GitHub \n     \n   \n   \n     Docker container \n     2.1.0 \n     DockerHub \n   \n     \n     Docker container (+KMS) \n     2.1.0 \n     DockerHub \n   \n\n   \n     openvidu-java-client \n     MVN package \n     2.0.0 \n     MVN Repository \n     \n   \n\n   \n     openvidu-node-client \n     NPM package \n     2.0.0 \n     NPM", 
            "title": "Artifacts"
        }, 
        {
            "location": "/releases/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/releases/#new-features", 
            "text": "OpenVidu Browser support for video management  We have implemented a new class in OpenVidu Browser aimed to better support declarative frontend framewroks such as Angular, React or Vue.js.  Now Publisher and Subscriber objects both inherit from  StreamManager , which provides 2 different methods to tell OpenVidu what DOM video players should display each specific stream ( addVideoElement  and  createVideoElement ). This allows us to let OpenVidu take control of the video elements (even if our framework dinamically creates them) and do not worry about its internals. This is all explained in detail in  Manage video players  section.  If you want to check out a real example of this behaviuor, explore our renovated  OpenVidu Angular tutorial .", 
            "title": "NEW FEATURES"
        }, 
        {
            "location": "/releases/#200", 
            "text": "", 
            "title": "2.0.0"
        }, 
        {
            "location": "/releases/#artifacts_1", 
            "text": "Artifact \n     Type \n     Compatible Version \n     Link \n     Info \n   \n\n   \n     openvidu-browser \n     NPM package \n     2.0.0 \n     NPM \n     \n   \n   \n     JS file \n     2.0.0 \n     GitHub \n   \n\n   \n     openvidu-server \n     JAR \n     2.0.0 \n     GitHub \n     \n   \n   \n     Docker container \n     2.0.0 \n     DockerHub \n   \n     \n     Docker container (+KMS) \n     2.0.0 \n     DockerHub \n   \n\n   \n     openvidu-java-client \n     MVN package \n     2.0.0 \n     MVN Repository \n     \n   \n\n   \n     openvidu-node-client \n     NPM package \n     2.0.0 \n     NPM", 
            "title": "Artifacts"
        }, 
        {
            "location": "/releases/#release-notes_1", 
            "text": "This is the first breaking change update for OpenVidu, which brings in lots of new features and internal improvements.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/releases/#new-features_1", 
            "text": "OpenVidu Browser new methods   Session.publish() : now returns a Promise so you can tell if the method was successful or not.  Session.signal() : now returns a Promise so you can tell if the method was successful or not.  Subcriber.subscribeToAudio()  and  Subscriber.subscribeToVideo() : new methods that allows you to mute the audio or video tracks of a remote stream.   OpenVidu.initPublisher() : now expects properties as interface  PublisherProperties . They include:  {\n    audioSource: undefined, // The source of audio. If undefined default audio input\n    videoSource: undefined, // The source of video. If undefined default video input\n    publishAudio: true,     // Whether you want to start publishing with your audio unmuted or muted\n    publishVideo: true,     // Whether you want to start publishing with your video enabled or not\n    resolution: '640x480',  // The resolution of your video\n    frameRate: 30,          // The frame rate of your video\n    insertMode: 'APPEND',   // How the video will be inserted in the target element\n    mirror: false           // Whether to mirror your local video or not\n}    Session.subscribe() : now expects properties as interface  SubscriberProperties . They include:  {\n    insertMode: 'APPEND',   // How the video will be inserted in the target element\n    subscribeToAudio: true, // Whether to initially subscribe to the stream's audio track or not\n    subscribeToVideo: true  // Whether to initially subscribe to the stream's video track or not\n}    OpenVidu.getDevices() : now you can use certain video or audio input device when calling  OpenVidu.initPublisher() , thanks to properties  audioSource  or  videoSource  of  PublisherProperties  object. Just set these variables to the property  deviceId  of any of the devices returned by this method.   OpenVidu.getUserMedia() : method improved. Now devs can customize a MediaStream object before calling  OpenVidu.initPublisher()  method, setting property  audioSource  or  videoSource  to a MediaStreamTrack object (see  docs  for further information)     OpenVidu Browser new properties   Stream.frameRate : new property defining the frame rate of video streams. This property will only have value if the Publisher owning the stream has set property  frameRate  of  PublisherProperties  when calling  OpenVidu.initPublisher()     OpenVidu Browser events   New events  accessDialogOpened  and  accessDialogClosed : dispatched by Publisher objects when the browser asks the user to grant permissions to camera or michrophone by opening a pop-up. You can use them to warn your users about it.  New events  recordingStarted  and  recordingStopped : dispatched by Session object when the recording of a Session starts and stops. You can customize which clients will receive this event thanks to new property  openvidu.recording.notification  (see  OpenVidu Server configuration )  Events  publisherStartSpeaking  and  publisherStopSpeaking  improved: more customizable thanks to  OpenVidu.setAdvancedConfiguration()  and better overall performance.  Events  streamDestroyed ,  connectionDestroyed  and  sessionDisconnected  have new property  reason . This gives more information about why the events have been dispatched so you can take specific actions depending on the context: maybe a stream has been destroyed because the user publishing has deliberately diposed it or maybe the network connection has unexpectedly closed (see docs for  StreamEvent ,  ConnectionEvent  and  SessionDisconnectedEvent )     Other improvements in OpenVidu Browser   Support for  custom screen sharing extensions for Chrome  Support for custom STUN and TURN servers in openvidu-browser. Use  OpenVidu.setAdvancedConfiguration()  Library size decreased in almost 30% ( openvidu-browser.min.js  from 300 KB to 216 KB)     OpenVidu Server new features   New property  name  for recordings: you can now specify which name should OpenVidu Server give to each one of your recording files. You can do it by using the  REST API  (by setting  body parameter \"name\" in POST /api/recordings/start ),  openvidu-java-client  (by using  RecordingProperties.Builder.name() ) or  openvidu-node-client  (by setting property  RecordingProperties.name )  Now support for initializing sessions with a custom  sessionId . You can take advantage of this new property to facilitate the mapping between OpenVidu Server 'session' entities and your own 'session' entities. You can set it by using the  REST API  (by setting  body parameter \"customSessionId\" in POST /api/sessions ),  openvidu-java-client  (by using  SessionProperties.Builder.customSessionId() ) or  openvidu-node-client  (by setting property  SessionProperties.customSessionId )  Call Detail Record extended: new events  recordingStarted  and  recordingStopped , property  reason  for events  sessionDestroyed ,  participantLeft  and  webrtcConnectionDestroyed .", 
            "title": "NEW FEATURES"
        }, 
        {
            "location": "/releases/#bug-fixes", 
            "text": "Now when any participant unexpectedly disconnects from a session (for example, due to a network failure),  connectionDestroyed  event is sent to the rest of participants with property  reason  set to  networkDisconnect .  When OpenVidu Server is stopped, it will try to gracefully finish every in progress session and recording. This way no recording file will end corrupted upon OpenVidu Server termination (this cannot be granted if the process crashes or is forcibly terminated)  Now both STUN and TURN  OpenVidu Server configuration parameters  can be set up at the same time with no overwritings.  Tons of small fixes and code refactoring that makes OpenVidu more stable and easy to test and develop", 
            "title": "BUG FIXES"
        }, 
        {
            "location": "/releases/#breaking-changes-list", 
            "text": "OpenVidu Browser   OpenVidu.initSession  now doesn't receive any input parameter.  OpenVidu.initPublisher  input parameters have changed. Now  properties  parameter must match  PublisherProperties  interface.  Session.connect  method has been promisified. Change the last mandatory  callback  parameter for a Promise implementation:  session.connect(token, (error) =  { ... })  to  session.connect(token).then(() =  {...}).catch(error =  {...});       OpenVidu Java Client   All  Archive  entities are now called  Recording . This includes: class  Archive  to  Recording , class  ArchiveMode  to  RecordingMode , class  ArchiveLayout  to  RecordingLayout , method  SessionProperties.archiveLayout()  to  SessionProperties.recordingLayout() , method  SessionProperties.archiveMode()  to  SessionProperties.recordingMode() , method  SessionProperties.Builder.archiveLayout()  to  SessionProperties.Builder.recordingLayout() , method  SessionProperties.Builder.archiveMode()  to  SessionProperties.Builder.recordingMode()  RecordingLayout  property in  SessionProperties.Builder  is now configured calling method  defaultRecordingLayout()  instead of  recordingLayout() . This means that if one Session is gonna be recorded more than once, each recording layout may be customize with  RecordingProperties.Builder.recordingLayout() , which will overwrite the default one globally configured in SessionProperties object.      OpenVidu Node Client   We have removed the builder pattern in all openvidu-node-client classes. Now objects are used instead, which includes classes  TokenOptions ,  SessionProperties  and  RecordingProperties . For example, instead of getting a TokenOptions object like this:  var tokenOptions = new TokenOptions.Builder().data(serverData).role(role).build()  now it must be like this:  var tokenOptions = {data: serverData, role: role}  There has been a simple change in certain asynchronous call. Method  Session.getSessionId()  is now synchronous, but method  OpenVidu.createSession()  is now asynchronous (the reason is pretty simple: now method  createSession  implements the behaviour that  getSessionId  was providing the first time it was called for certain  Session  object).  All callback methods have been promisified. This includes method  Session.generateToken(tokenOptions?, callback): void  (now   Session.generateToken(tokenOptions?): Promise string ) and method  Session.getSessionId(callback): void  (now  OpenVidu.createSession(): Promise Session , take also into account that the async call has changed from one method to the other as stated in the previous point).  All  Archive  entities are now called  Recording . This includes: object  Archive  to  Recording , object  ArchiveMode  to  RecordingMode , object  ArchiveLayout  to  RecordingLayout , method  SessionProperties.archiveLayout()  to  SessionProperties.recordingLayout() , method  SessionProperties.archiveMode()  to  SessionProperties.recordingMode() , method  SessionProperties.Builder.archiveLayout()  to  SessionProperties.Builder.recordingLayout() , method  SessionProperties.Builder.archiveMode()  to  SessionProperties.Builder.recordingMode()  recordingLayout  property in  SessionProperties  has changed to  defaultRecordingLayout . This means that if one Session is gonna be recorded more than once, each recording layout may be customize with  recordingLayout  property (of  RecordingProperties  interface, which will overwrite the default one globally configured in SessionProperties object.      REST API   All  Archive  entities are now called  Recording  in API REST. For example:  {\"archiveMode\": \"ARCHIVE_MODE\", \"archiveLayout\": \"ARCHIVE_LAYOUT\", \"mediaMode\": \"MEDIA_MODE\"}  now is  {\"recordingMode\": \"RECORDING_MODE\", \"recordingLayout\": \"RECORDING_LAYOUT\", \"mediaMode\": \"MEDIA_MODE\"} .  Field  recordingLayout  is now called  defaultRecordingLayout  in operation  POST /api/sessions . This means that if one Session is gonna be recorded more than once, each recording layout may be customize adding a new field  recordingLayout  in the call to  POST /api/recordings/start  of the API REST, which will overwrite the default one globally configured during  POST /api/sessions       Other breaking changes   OpenVidu Server default port from  8443  to  4443  OpenVidu Server configuration property  openvidu.recording.free-access  is now  openvidu.recording.public-access", 
            "title": "BREAKING CHANGES LIST"
        }, 
        {
            "location": "/releases/#190-beta-1", 
            "text": "", 
            "title": "1.9.0-beta-1"
        }, 
        {
            "location": "/releases/#artifacts_2", 
            "text": "Artifact \n     Type \n     Compatible version \n     Link \n     Info \n   \n\n   \n     openvidu-browser \n     NPM package \n     1.9.0-beta-1 \n     NPM \n     \n   \n   \n     JS file \n     1.9.0-beta-1 \n     GitHub \n   \n\n   \n     openvidu-server \n     JAR \n     1.9.0-beta-1 \n     GitHub \n     \n   \n   \n     Docker container \n     1.9.0-beta-1 \n     DockerHub \n   \n     \n     Docker container (+KMS) \n     1.9.0-beta-1 \n     DockerHub \n   \n\n   \n     openvidu-java-client \n     MVN package \n     1.8.0 \n     MVN Repository \n     \n   \n\n   \n     openvidu-node-client \n     NPM package \n     1.8.0 \n     NPM", 
            "title": "Artifacts"
        }, 
        {
            "location": "/releases/#release-notes_2", 
            "text": "Safari support : now OpenVidu is compatible with the most recent versions of Safari in Mac and iOS. It is necessary to use Kurento Media Server 6.7.0:  openvidu/openvidu-server-kms:1.9.0-beta-1  Docker image already incorporates KMS 6.7.0  openvidu/openvidu-server:1.9.0-beta-1  Docker image and  openvidu-server-1.9.0-beta-1.jar  need KMS 6.7.0. To install it, first be sure to completely uninstall and clean any previous version of KMS and then:     # In first command: xenial for Ubuntu 16.04, trusty for Ubuntu 14.04\nsudo echo \"deb http://ubuntu.openvidu.io/6.7.0 xenial kms6\" | sudo tee /etc/apt/sources.list.d/kurento.list\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5AFA7A83\nsudo apt-get update\nsudo apt-get -y dist-upgrade\nsudo apt-get -y install kurento-media-server\nsudo apt-get -y install openh264-gst-plugins-bad-1.5  To start and stop KMS 6.7.0:  sudo service kurento-media-server start\nsudo service kurento-media-server stop", 
            "title": "Release Notes"
        }
    ]
}